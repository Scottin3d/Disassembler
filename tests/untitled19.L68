00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 06/04/20 4:32:12 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9              
00001000  41F8 0400                 10              LEA     $400, A0
00001004  30FC 4CDF                 11              MOVE.W  #$4CDF, (A0)+
00001008  30FC 001F                 12              MOVE.W  #$001f, (A0)+
0000100C  41F8 0400                 13              LEA     $400, A0
00001010  45F8 0410                 14              LEA     $410, A2
00001014  3E18                      15              MOVE.W  (A0)+, D7
00001016                            16              
00001016  2607                      17              MOVE.L  D7, D3
00001018  C67C 01C0                 18              AND.W   #%0000000111000000, D3    *isolate bits 8 - 6
0000101C  EC43                      19              ASR.W     #$6, D3
0000101E                            20              *ASR.W     #$4, D3
0000101E  0C43 0003                 21              CMPI.W  #%011, D3
00001022  6700 0016                 22              BEQ     MOVEmem
00001026                            23  
00001026                            24              
00001026  14BC 0000                 25  print_b     MOVE.B  #00,(A2)
0000102A  43F8 0410                 26              LEA     $410,A1
0000102E  103C 000D                 27              MOVE.B  #13,D0
00001032  4E4F                      28              TRAP    #15
00001034                            29              
00001034  4EF9 00001314             30              JMP     END
0000103A                            31              
0000103A                            32              
0000103A                            33              
0000103A                            34  *Register Use
0000103A                            35  *For consistency, please utilize registers in the following way.
0000103A                            36  *
0000103A                            37  *D0 - Copy of mask
0000103A                            38  *D1 - Instruction Mask
0000103A                            39  *D2 - 
0000103A                            40  *D3 - utility register
0000103A                            41  *D4 -
0000103A                            42  *D5 - flag condition
0000103A                            43  *D6 - counter
0000103A                            44  *D7 - copy of working address
0000103A                            45  *
0000103A                            46  *A0 - temp address holder
0000103A                            47  *A1 - trap address
0000103A                            48  *A2 - buffer address of decoded instruction
0000103A                            49  *A3 -.
0000103A                            50  *A4 - starting address
0000103A                            51  *A5 - ending address
0000103A                            52  *A6 - jump tables
0000103A                            53  *A7 -
0000103A                            54              
0000103A                            55  MOVEmem     
0000103A  4242                      56              CLR D2
0000103C  4243                      57              CLR D3
0000103E  3607                      58              MOVE.W D7, D3
00001040  3603                      59              MOVE.W D3, D3
00001042  14FC 004D                 60              MOVE.B  #$4D, (A2)+     *'M' to buffer
00001046  14FC 004F                 61              MOVE.B  #$4F, (A2)+     *'O' to buffer
0000104A  14FC 0056                 62              MOVE.B  #$56, (A2)+     *'V' to buffer
0000104E  14FC 0045                 63              MOVE.B  #$45, (A2)+     *'E' to buffer
00001052  14FC 004D                 64              MOVE.B  #$4D, (A2)+     *'M' to buffer
00001056  14FC 002E                 65              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000105A                            66              
0000105A                            67              
0000105A  C67C 0040                 68              AND.W #%0000000001000000, D3    *isolate 6 bit
0000105E  EC43                      69              ASR.W #$6, D3
00001060  4EB9 000012C0             70              JSR    SIZE2BUFFER
00001066  14FC 0020                 71              MOVE.B  #$20, (A2)+     *' ' to buffer
0000106A  14FC 0020                 72              MOVE.B  #$20, (A2)+     *' ' to buffer
0000106E  3607                      73              MOVE D7, D3
00001070  C67C 0400                 74              AND.W #%0000010000000000, D3 **Checks the direction **
00001074  E043                      75              ASR.W #$8, D3
00001076  E443                      76              ASR.W #$2, D3
00001078  C6FC 0006                 77              MULU #$6, D3
0000107C  4DF9 0000108A             78              LEA MOVEmem_table, A6
00001082  4EB6 3000                 79              JSR 0(A6, D3)               *memory direction jump table
00001086  4EF8 1026                 80              JMP     print_b
0000108A                            81  
0000108A                            82  MOVEmem_table  
0000108A  4EF9 00001098             83                  JMP Reg2Mem
00001090  4EF9 000010C0             84                  JMP Mem2Reg
00001096  4E75                      85                  RTS
00001098                            86  Reg2Mem
00001098  3001                      87                 MOVE.W D1, D0             
0000109A  4EB9 000011C0             88                 JSR GETMWORD             *loads next word (A0) to D1
000010A0  4EB9 000010E8             89                 JSR Get_PRE_DReg_List    *get bits 7 - 0
000010A6  4EB9 0000111A             90                 JSR Get_PRE_AReg_List    *get bits 15 - 8
000010AC                            91                 
000010AC  153C 00FF                 92                 MOVE.B #$FF, -(A2)
000010B0  14FC 002C                 93                 MOVE.B #$2C, (A2)+
000010B4  14FC 0020                 94                 MOVE.B #$20, (A2)+
000010B8                            95                 *MOVE.W D0, D1
000010B8                            96                 
000010B8  4EB9 000011C4             97                 JSR      GETEA
000010BE  4E75                      98                 RTS
000010C0                            99                 
000010C0                           100  Mem2Reg
000010C0  4EB9 000011C4            101                 JSR      GETEA
000010C6  14FC 002C                102                 MOVE.B #$2C, (A2)+ *',' to buffer
000010CA  14FC 0020                103                 MOVE.B #$20, (A2)+   *' ' to buffer
000010CE                           104                 
000010CE  4EB9 000011C0            105                 JSR GETMWORD
000010D4  3001                     106                 MOVE.W D1, D0        *D1 mask, D0 copy of mask
000010D6                           107        
000010D6  4EB9 00001152            108                 JSR Get_POST_AReg_List
000010DC                           109                 *MOVE.W D0, D1
000010DC  4EB9 0000118C            110                 JSR Get_POST_DReg_List
000010E2  153C 00FF                111                 MOVE.B #$FF, -(A2)
000010E6  4E75                     112                 RTS    
000010E8                           113  
000010E8                           114  *Predec Register
000010E8                           115  Get_PRE_DReg_List
000010E8  3001                     116                 MOVE.W D1, D0
000010EA  E048                     117                 LSR #$8, D0 ** Data Register mask **
000010EC  143C 0000                118                 MOVE.B #$00, D2 ** Preps D2
000010F0  183C 0009                119                 MOVE.B #$09, D4 ** Sets the counter **
000010F4                           120                 
000010F4                           121  loopPRE_Dlist     
000010F4  5304                     122                 SUB.B #$1, D4    *sub from counter
000010F6  B83C 0000                123                 CMP.B #$00, D4   *end?
000010FA  6700 00C2                124                 BEQ end_loop
000010FE  E308                     125                 LSL.B #1, D0
00001100  6500 0006                126                 BCS printPRE_DReg_List
00001104  60EE                     127                 BRA loopPRE_Dlist
00001106  4E75                     128                 RTS
00001108                           129  
00001108                           130  printPRE_DReg_List
00001108  143C 0038                131                 MOVE.B #$38, D2
0000110C  9404                     132                 SUB.B D4, D2         
0000110E  14FC 0044                133                 MOVE.B #$44, (A2)+
00001112  14C2                     134                 MOVE.B D2, (A2)+
00001114  14FC 002F                135                 MOVE.B #$2F, (A2)+
00001118  60DA                     136                 BRA loopPRE_Dlist
0000111A                           137                 
0000111A                           138  *Predec Address               
0000111A                           139  Get_PRE_AReg_List
0000111A  1001                     140                 MOVE.B D1, D0     ***Moves the address list mask to d4 ***
0000111C  143C 0000                141                 MOVE.B #$00, D2  ** Preps D5
00001120  183C 0009                142                 MOVE.B #9, D4    ** Sets the counter to 8 
00001124                           143                 **ASR #8, D4      ** Shifts the mask for Address Registers **
00001124                           144  loopPRE_Alist
00001124  5304                     145                 SUB.B #$01, D4  ** Decrements the counter **
00001126  B03C 0000                146                 CMP.B #$00, D0
0000112A  6700 0092                147                 BEQ end_loop
0000112E  B83C 0000                148                 CMP.B #$00, D4  ** Checks the counter **
00001132  6700 008A                149                 BEQ end_loop   ** Ends the loop when counter is = 0 **
00001136  E308                     150                 LSL.B #1, D0  ** Shifts mask to the left by one **
00001138  6500 0006                151                 BCS printPRE_AReg_List ** Checks the carry Set bit **
0000113C  60E6                     152                 BRA loopPRE_Alist
0000113E  4E75                     153                 RTS
00001140                           154  
00001140                           155  printPRE_AReg_List
00001140  143C 0038                156                 MOVE.B #$38, D2
00001144  9404                     157                 SUB.B D4, D2
00001146  14FC 0041                158                 MOVE.B #$41, (A2)+
0000114A  14C2                     159                 MOVE.B D2, (A2)+
0000114C  14FC 002F                160                 MOVE.B #$2F, (A2)+
00001150  60D2                     161                 BRA loopPRE_Alist
00001152                           162  
00001152                           163  *Post Address D4 = D0
00001152                           164  Get_POST_AReg_List
00001152                           165                 
00001152  E040                     166                 ASR #8, D0
00001154  143C 0000                167                 MOVE.B #$00, D2  ** Preps D2
00001158  183C 0009                168                 MOVE.B #9, D4    ** Sets the counter to 8 
0000115C                           169  loopPOST_Alist
0000115C  5304                     170                 SUB.B #$01, D4  ** Decrements the counter **
0000115E  B03C 0000                171                 CMP.B #$00, D0
00001162  6700 005A                172                 BEQ end_loop
00001166  B83C 0000                173                 CMP.B #$00, D4  ** Checks the counter **
0000116A  6700 0052                174                 BEQ end_loop   ** Ends the loop when counter is = 0 **
0000116E  E308                     175                 LSL.B #1, D0  ** Shifts mask to the left by one **
00001170  6500 0006                176                 BCS printPOST_AReg_List ** Checks the carry Set bit **
00001174  60E6                     177                 BRA loopPOST_Alist
00001176  4E75                     178                 RTS
00001178                           179                 
00001178                           180                 
00001178                           181  printPOST_AReg_List
00001178  143C 0030                182                 MOVE.B #$30, D2
0000117C  D404                     183                 ADD.B D4, D2
0000117E  5302                     184                 SUB.B #$1, D2
00001180  14FC 0041                185                 MOVE.B #$41, (A2)+
00001184  14C2                     186                 MOVE.B D2, (A2)+
00001186  14FC 002F                187                 MOVE.B #$2F, (A2)+
0000118A  60D0                     188                 BRA loopPOST_Alist
0000118C                           189  
0000118C                           190  *Post Register  *
0000118C                           191  Get_POST_DReg_List
0000118C                           192                  
0000118C  1001                     193                 MOVE.B D1, D0
0000118E  143C 0000                194                 MOVE.B #$00, D2 ** Preps D2
00001192  183C 0009                195                 MOVE.B #$09, D4 ** Sets the counter **
00001196                           196                 
00001196                           197  loopPOST_Dlist     
00001196  5300                     198                 SUB.B #$1, D0
00001198  B03C 0000                199                 CMP.B #$00, D0
0000119C  6700 0020                200                 BEQ end_loop
000011A0  E308                     201                 LSL.B #1, D0
000011A2  6500 0006                202                 BCS printPOST_DReg_List
000011A6  60EE                     203                 BRA loopPOST_Dlist
000011A8  4E75                     204                 RTS
000011AA                           205  
000011AA                           206                 
000011AA                           207  printPOST_DReg_List
000011AA  143C 0030                208                 MOVE.B #$30, D2
000011AE  D404                     209                 ADD.B D4, D2
000011B0  5302                     210                 SUB.B #$1, D2
000011B2  14FC 0044                211                 MOVE.B #$44, (A2)+
000011B6  14C2                     212                 MOVE.B D2, (A2)+
000011B8  14FC 002F                213                 MOVE.B #$2F, (A2)+
000011BC  60D8                     214                 BRA loopPOST_Dlist
000011BE                           215  
000011BE  4E75                     216  end_loop        RTS               
000011C0                           217                 
000011C0                           218  *GETMWORD********************************************************              
000011C0                           219  GETMWORD
000011C0  3218                     220              MOVE.W (A0)+, D1
000011C2  4E75                     221  endGETMWORD RTS
000011C4                           222  
000011C4                           223  GETEA:
000011C4  4DF9 000011E2            224              LEA     EA_TABLE, A6
000011CA  4283                     225              CLR.L   D3
000011CC  3607                     226              MOVE.W  D7, D3
000011CE  0243 003F                227              ANDI.W  #$003F, D3
000011D2  123C 0003                228              MOVE.B  #3, D1
000011D6  E26B                     229              LSR.W   D1, D3
000011D8  C6FC 0006                230              MULU    #6, D3
000011DC  4EB6 3000                231              JSR     0(A6, D3)
000011E0  4E75                     232              RTS                     *return
000011E2                           233  *===========================================================
000011E2                           234  
000011E2                           235  ************************************************************
000011E2                           236  *GET_TABLE
000011E2                           237  *Description: Jump table of Effective Address Modes
000011E2                           238  ************************************************************
000011E2                           239  EA_TABLE:       
000011E2  4EF9 00001212            240              JMP     eacode000
000011E8  4EF9 00001224            241              JMP     eacode001
000011EE  4EF9 00001236            242              JMP     eacode010
000011F4  4EF9 00001250            243              JMP     eacode011
000011FA  4EF9 0000126E            244              JMP     eacode100
00001200  4EF9 0000128C            245              JMP     eacode101
00001206  4EF9 00001292            246              JMP     eacode110
0000120C  4EF9 00001298            247              JMP     eacode111
00001212                           248  *===========================================================
00001212                           249  
00001212                           250  ************************************************************
00001212                           251  *EA CODES
00001212                           252  *Description: Lsit of Effective Address Subrotines
00001212                           253  *000,001,010,011,100,[101],[110],111
00001212                           254  *Registers Used:
00001212                           255  *TODO
00001212                           256  *
00001212                           257  *Data Register**********************************************
00001212  3607                     258  eacode000   MOVE.W      D7, D3          *move to utility
00001214  0243 0007                259              ANDI.W      #$7, D3         *isolate
00001218  14FC 0044                260              MOVE.B      #$44,(A2)+      *'D' to buffer
0000121C  0603 0030                261              ADD.B       #$30, D3        *convert register number to ascii
00001220  14C3                     262              MOVE.B      D3,(A2)+        *to buffer                  
00001222  4E75                     263  endea000    RTS                         *return
00001224                           264  *Address Register*******************************************
00001224  3607                     265  eacode001   MOVE.W      D7, D3          *move to utility
00001226  0243 0007                266              ANDI.W      #$7, D3         *isolate
0000122A  163C 0041                267              MOVE.B      #$41, D3        *'A' to buffer
0000122E  0603 0030                268              ADD.B       #$30, D3        *convert register number to ascii
00001232  14C3                     269              MOVE.B      D3,(A2)+        *to buffer  
00001234  4E75                     270  endea001    RTS                         *return
00001236                           271  *Address
00001236  3607                     272  eacode010   MOVE.W      D7, D3          *move to utility
00001238  0243 0007                273              ANDI.W      #$7, D3         *isolate
0000123C  14FC 0028                274              MOVE.B      #$28,(A2)+      *'(' to buffer            
00001240  14FC 0041                275              MOVE.B      #$41,(A2)+      *'A' to buffer
00001244  0603 0030                276              ADD.B       #$30, D3        *convert register number to ascii
00001248  14C3                     277              MOVE.B      D3,(A2)+        *to buffer  
0000124A  14FC 0029                278              MOVE.B      #$29,(A2)+      *')' to buffe
0000124E  4E75                     279  endea010    RTS                         *return
00001250                           280  *Address with Postincrement*********************************
00001250  3607                     281  eacode011   MOVE.W      D7, D3          *move to utility
00001252  0243 0007                282              ANDI.W      #$7, D3         *isolate
00001256  14FC 0028                283              MOVE.B      #$28,(A2)+      *'(' to buffer            
0000125A  14FC 0041                284              MOVE.B      #$41,(A2)+      *'A' to buffer
0000125E  0603 0030                285              ADD.B       #$30, D3        *convert register number to ascii
00001262  14C3                     286              MOVE.B      D3,(A2)+        *to buffer  
00001264  14FC 0029                287              MOVE.B      #$29,(A2)+      *')' to buffer
00001268  14FC 002B                288              MOVE.B      #$2B, (A2)+     *'+' to buffer
0000126C  4E75                     289  endea011    RTS                         *return
0000126E                           290  *Address with Predecrement**********************************
0000126E  3607                     291  eacode100   MOVE.W      D7, D3          *move to utility
00001270  0243 0007                292              ANDI.W      #$7, D3         *isolate
00001274  14FC 002D                293              MOVE.B      #$2D,(A2)+      *'-' to buffer 
00001278  14FC 0028                294              MOVE.B      #$28,(A2)+      *'(' to buffer            
0000127C  14FC 0041                295              MOVE.B      #$41,(A2)+      *'A' to buffer
00001280  0603 0030                296              ADD.B       #$30, D3        *convert register number to ascii
00001284  14C3                     297              MOVE.B      D3,(A2)+        *to buffer  
00001286  14FC 0029                298              MOVE.B      #$29,(A2)+      *')' to buffe
0000128A  4E75                     299  endea100    RTS                         *return
0000128C                           300  *Bad Instruction********************************************
0000128C  4EF9 00001304            301  eacode101   JMP         BADINST
00001292                           302  *Bad Instruction********************************************
00001292  4EF9 00001304            303  eacode110   JMP         BADINST
00001298                           304  *Immediate*Absolute*****************************************
00001298  4EB9 00001308            305  eacode111   JSR         GETREGISTER     *isolate register bit
0000129E  0C03 0000                306              CMPI.B      #$0, D3         *word?
000012A2  6700 0066                307              BEQ         WORD2BUFFER
000012A6  0C03 0001                308              CMPI.B      #$1, D3         *long?
000012AA  6700 0060                309              BEQ         LONG2BUFFER
000012AE  0C03 0004                310              CMPI.B      #$4, D3         *Immediate Data?
000012B2  6700 005A                311              BEQ         IMM2BUFER
000012B6  0C03 0002                312              CMPI.B      #$2, D3         *PC?
000012BA  6700 0048                313              BEQ         BADINST
000012BE  4E75                     314  endea111    RTS                         *return
000012C0                           315  *=========================================================
000012C0                           316  
000012C0                           317  SIZE2BUFFER:
000012C0  4EB9 00001306            318              JSR     GETSIZE         *get the size of bit
000012C6  B63C 0000                319              CMP.B   #%00, D3        *byte
000012CA  6700 001E                320              BEQ     s2bB            *
000012CE  B63C 0001                321              CMP.B   #%01, D3        *word
000012D2  6700 0020                322              BEQ     s2bW            *
000012D6  B63C 0002                323              CMP.B   #%10, D3        *long
000012DA  6700 0022                324              BEQ     s2bL            *
000012DE  4EF9 00001304            325              JMP     BADINST         *bad instruction
000012E4  4EF9 00001302            326              JMP     ends2b          *
000012EA                           327              
000012EA  14FC 0042                328  s2bB        MOVE.B  #$42,(A2)+      *'B' to buffer
000012EE  4EF9 00001302            329              JMP     ends2b          *
000012F4  14FC 0057                330  s2bW        MOVE.B  #$57,(A2)+      *'W' to buffer
000012F8  4EF9 00001302            331              JMP     ends2b          *
000012FE  14FC 004C                332  s2bL        MOVE.B  #$4C,(A2)+      *'L' to buffer
00001302  4E75                     333  ends2b      RTS                     *return
00001304                           334              
00001304  4E75                     335  BADINST     RTS
00001306  4E75                     336  GETSIZE         RTS
00001308  4E75                     337  GETREGISTER     RTS
0000130A  4E75                     338  WORD2BUFFER     RTS
0000130C  4E75                     339  LONG2BUFFER     RTS
0000130E  4E75                     340  IMM2BUFER       RTS
00001310  FFFF FFFF                341      SIMHALT             ; halt simulator
00001314                           342  
00001314                           343  * Put variables and constants here
00001314                           344  END
00001314                           345      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BADINST             1304
EACODE000           1212
EACODE001           1224
EACODE010           1236
EACODE011           1250
EACODE100           126E
EACODE101           128C
EACODE110           1292
EACODE111           1298
EA_TABLE            11E2
END                 1314
ENDEA000            1222
ENDEA001            1234
ENDEA010            124E
ENDEA011            126C
ENDEA100            128A
ENDEA111            12BE
ENDGETMWORD         11C2
ENDS2B              1302
END_LOOP            11BE
GETEA               11C4
GETMWORD            11C0
GETREGISTER         1308
GETSIZE             1306
GET_POST_AREG_LIST  1152
GET_POST_DREG_LIST  118C
GET_PRE_AREG_LIST   111A
GET_PRE_DREG_LIST   10E8
IMM2BUFER           130E
LONG2BUFFER         130C
LOOPPOST_ALIST      115C
LOOPPOST_DLIST      1196
LOOPPRE_ALIST       1124
LOOPPRE_DLIST       10F4
MEM2REG             10C0
MOVEMEM             103A
MOVEMEM_TABLE       108A
PRINTPOST_AREG_LIST  1178
PRINTPOST_DREG_LIST  11AA
PRINTPRE_AREG_LIST  1140
PRINTPRE_DREG_LIST  1108
PRINT_B             1026
REG2MEM             1098
S2BB                12EA
S2BL                12FE
S2BW                12F4
SIZE2BUFFER         12C0
START               1000
WORD2BUFFER         130A
