00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 06/01/20 3:30:02 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Scott Shirley
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7   
00000000                             8  * Variables and EQUs
00000000  =00001000                  9  start           EQU     $1000               *start address
00000000  =0000A000                 10  stack           EQU     $A000               *stack address   
00000000  =0000000D                 11  CR              EQU     $0D                 *carriage return
00000000  =0000000A                 12  LF              EQU     $0A                 *line feed
00000000  =00000001                 13  goodflag        EQU     1
00000000  =00000000                 14  badflag         EQU     0
00000000  =00000000                 15  length          EQU     0
00000000  =00000001                 16  task1           EQU     01                  *
00000000  =00000002                 17  task2           EQU     02                  *
00000000  =00009000                 18  print_buffer    EQU $9000
00000000                            19  **op_table        EQU     $A100               *OPCODE JUMP TABLE
00000000                            20  **ea_table        EQU     $A200               *EA JUMP TABLE
00000000                            21  **adr_table       EQU     $A300               *ADDRESS JUMP TABLE
00000000                            22  
00000000                            23  *-----------------------------------------------------------
00000000                            24  *beging program
00000000                            25  *-----------------------------------------------------------
00001000                            26              ORG     start
00001000  6100 0026                 27              BSR     intro_msg           *print intro message
00001004  6100 04CC                 28  main        BSR     CLEAR               *clear all registers
00001008  4FF9 0000A000             29              LEA     stack, SP           *load stack pointer
0000100E  45F9 00001630             30              LEA     buffer, A2          *set buffer for input
00001014  49F9 00009000             31              LEA     print_buffer, A4
0000101A  2C4A                      32              MOVEA.L A2,A6 
0000101C                            33              
0000101C  6100 04C6                 34              BSR     U_INPUT
00001020                            35              
00001020  6100 04B0                 36              BSR     CLEAR
00001024                            37              
00001024  6000 001A                 38              BRA     MAIN_LOOP
00001028                            39              
00001028                            40  
00001028                            41  *-----------------------------------------------------------
00001028                            42  *subroutines
00001028                            43  *-----------------------------------------------------------
00001028                            44  intro_msg
00001028  103C 000D                 45              MOVE.B  #13,D0
0000102C  43F9 000015E0             46              LEA     intro,A1
00001032  3239 000015F8             47              MOVE.W  i_length,D1
00001038  4E4F                      48              TRAP    #15
0000103A  4E75                      49  endIntro    RTS
0000103C                            50  
0000103C                            51  GET_WORD
0000103C  3218                      52              MOVE.W (A0)+, D1
0000103E  4E75                      53  ENDGET_WORD RTS
00001040                            54  
00001040                            55  MAIN_LOOP
00001040  61FA                      56              BSR     GET_WORD *** GETS THE NEXT WORD ****
00001042  5247                      57              ADDI #1, D7
00001044  BE7C 000A                 58              CMP #10, D7
00001048                            59              ** PRINT THE BUFFER BEQ PRINT **
00001048  47F9 00001064             60              LEA op_table, A3
0000104E  2008                      61              MOVE.L A0, D0 *** LOADS THE FIRST INSTRUCTION INTO D0 ****
00001050                            62              **MOVE.L D0, (A4)+ ***LOADS INSRUCTION ADDRESS INTO PRINT BUFFER ***
00001050  4280                      63              CLR.L D0  *** CLEARS D0 ***
00001052                            64              **MOVE.W #$0909, (A4)+ *** ADDS "\T" TO THE PRINT BUFFER ***
00001052                            65              
00001052                            66              
00001052                            67              
00001052  3401                      68              MOVE.W D1, D2 *** LOADS THE INSTRUCTION INTO D2 ***
00001054  E042                      69              ASR #$8, D2 *** SHIFTS THE WORD DATA TO GET MOST SIG BYTE ***
00001056  E842                      70              ASR #$4, D2 *** SHIFTS BY 4 TO GET THE MOST SIG HEXA BIT ***
00001058  C4FC 0006                 71              MULU #6, D2 *** MULTIPLIES THE INDEX BY 6 TO GET INDEX ***
0000105C                            72              
0000105C  4EB3 2000                 73              JSR 0(A3, D2)
00001060                            74              
00001060                            75              
00001060                            76              
00001060                            77              
00001060                            78              
00001060  6100 057A                 79              BSR     END *** ENDS THE PROGRAM ***
00001064                            80              
00001064                            81  
00001064                            82  
00001064  4EF9 000010C4             83  op_table        JMP         code0000
0000106A  4EF9 000010C8             84                  JMP         code0001
00001070  4EF9 0000112E             85                  JMP         code0010
00001076  4EF9 00001132             86                  JMP         code0011
0000107C  4EF9 00001136             87                  JMP         code0100
00001082  4EF9 0000115C             88                  JMP         code0101
00001088  4EF9 00001160             89                  JMP         code0110
0000108E  4EF9 00001164             90                  JMP         code0111
00001094  4EF9 00001168             91                  JMP         code1000
0000109A  4EF9 0000116C             92                  JMP         code1001
000010A0  4EF9 00001170             93                  JMP         code1010
000010A6  4EF9 00001174             94                  JMP         code1011
000010AC  4EF9 00001178             95                  JMP         code1100
000010B2  4EF9 0000117C             96                  JMP         code1101
000010B8  4EF9 00001180             97                  JMP         code1110
000010BE  4EF9 00001184             98                  JMP         code1111
000010C4                            99                  
000010C4                           100                  
000010C4                           101                  
000010C4  4E72 2700                102  code0000       STOP        #$2700
000010C8                           103  
000010C8                           104  
000010C8                           105  **********************************************************************
000010C8                           106  **              code0001 handles MOVE.B Instructions                **
000010C8                           107  **********************************************************************
000010C8                           108  ** - stores "MOVE" into the print buffer                            **
000010C8                           109  ** - stores ".B\t\t" into the print buffer                          **
000010C8                           110  ** - checks bits 11-9 (register number)  D2  [destination]          **
000010C8                           111  ** - checks bits 8 - 6 (Ea mode)  D3   [destination]                **
000010C8                           112  ** - jumps to ea table                                              **
000010C8                           113  ** - stores ", " into the print buffer                              **
000010C8                           114  ** - checks bits 5 - 3 (Ea mode) D3 [source]                        **
000010C8                           115  ** - checks bits 2 - 0 (register number) D2 [source]                **
000010C8                           116  ** - jumps to ea table                                              **
000010C8                           117  **********************************************************************
000010C8                           118  
000010C8  28FC 4D4F5645            119  code0001       MOVE.L #$4D4F5645, (A4)+ ** Loads "MOVE" INTO PRINT_BUFFER
000010CE  28FC 2E420909            120                 MOVE.L #$2E420909, (A4)+ **Loads ".B" into the print_buffer 
000010D4                           121                 
000010D4  4282                     122                 CLR.L D2
000010D6                           123                 
000010D6  3401                     124                 MOVE.W D1, D2
000010D8  C4BC 00000007            125                 AND.L #%0000000000000111, D2 ** checks the source reg number **
000010DE                           126  
000010DE                           127                 
000010DE  3601                     128                 MOVE.W D1, D3
000010E0  C6BC 00000038            129                 AND.L #%0000000000111000, D3 ** checks the source mode type **
000010E6  E643                     130                 ASR.W #$3, D3 ** shifts the bits to the right **
000010E8                           131                 
000010E8  47F9 000013D2            132                 LEA ea_table, A3 ** loads ea_table for jmp **
000010EE  C6FC 0006                133                 MULU #6,D3 ** gets the index of the jmp table **
000010F2                           134                 
000010F2  4EB3 3000                135                 JSR 0(A3, D3) ** jumps to the Jump Table **
000010F6                           136                 
000010F6  38FC 2C20                137                 MOVE.W #$2C20, (A4)+
000010FA                           138                 
000010FA  4242                     139                 CLR D2   ** clears registers for source reg and mode 
000010FC  4243                     140                 CLR D3
000010FE                           141                 
000010FE  3401                     142                 MOVE.W D1, D2
00001100  C4BC 00000E00            143                 AND.L #%0000111000000000, D2 ** checks the register number ***
00001106  E04A                     144                 LSR.W #$8, D2 **shifts the bits to the right
00001108  E20A                     145                 LSR.B #$1, D2
0000110A                           146                 
0000110A  3601                     147                 MOVE.W D1, D3
0000110C  C6BC 000001C0            148                 AND.L #%0000000111000000, D3 ** checks the addressing mode **
00001112  EC4B                     149                 LSR.W #$6, D3 ** shifts the bits to the right 
00001114                           150                
00001114                           151                 
00001114  47F9 000013D2            152                 LEA ea_table, A3 ** loads the ea_table **
0000111A  C6FC 0006                153                 MULU #6, D3 ** gets the index of the jump table **
0000111E                           154                 
0000111E  4EB3 3000                155                 JSR 0(A3, D3) **jumps to the ea_table for source dissassembly **
00001122  38FC 2000                156                 MOVE.W #$2000, (A4)+
00001126  4EB9 000014C4            157                 JSR PRINT
0000112C  4E75                     158                 RTS ** Returns to sender **
0000112E                           159                 
0000112E  4E72 2700                160  code0010       STOP        #$2700
00001132  4E72 2700                161  code0011       STOP        #$2700
00001136                           162  code0100       
00001136  4282                     163                  CLR.L D2
00001138  3401                     164                  MOVE.W D1, D2
0000113A  3602                     165                  MOVE.W D2, D3
0000113C  C67C 01C0                166                  AND.W #%0000000111000000, D3
00001140  EC43                     167                  ASR #$6, D3
00001142  47F9 00001188            168                  LEA code0100L1_table, A3
00001148  C6FC 0006                169                  MULU #6, D3
0000114C                           170                  
0000114C  4EB3 3000                171                  JSR 0(A3, D3)
00001150  38FC 2000                172                  MOVE.W #$2000, (A4)+
00001154  4EB9 000014C4            173                  JSR PRINT
0000115A  4E75                     174                  RTS
0000115C                           175  
0000115C  4E72 2700                176  code0101       STOP        #$2700
00001160  4E72 2700                177  code0110       STOP        #$2700
00001164  4E72 2700                178  code0111       STOP        #$2700
00001168  4E72 2700                179  code1000       STOP        #$2700
0000116C  4E72 2700                180  code1001       STOP        #$2700
00001170  4E72 2700                181  code1010       STOP        #$2700
00001174  4E72 2700                182  code1011       STOP        #$2700
00001178  4E72 2700                183  code1100       STOP        #$2700
0000117C  4E72 2700                184  code1101       STOP        #$2700
00001180  4E72 2700                185  code1110       STOP        #$2700
00001184  4E72 2700                186  code1111       STOP        #$2700
00001188                           187  
00001188                           188  code0100L1_table   
00001188  4EF9 000011E4            189                 JMP         error_inst **000
0000118E  4EF9 000013CA            190                 JMP         RTSource   **001
00001194  4EF9 000011B8            191                 JMP         code0100L2 **010
0000119A  4EF9 000011E8            192                 JMP         MOVEmem ** 011
000011A0  4EF9 000011E4            193                 JMP         error_inst **100
000011A6  4EF9 000011E4            194                 JMP         error_inst **101
000011AC  4EF9 000011E4            195                 JMP         error_inst **110
000011B2  4EF9 000013C6            196                 JMP         LEadd **111
000011B8                           197  
000011B8                           198  
000011B8  4282                     199  code0100L2      CLR.L D2
000011BA  4283                     200                  CLR.L D3
000011BC  47F9 000011D8            201                  LEA code0100L2_table, A3
000011C2  2401                     202                  MOVE.L D1, D2
000011C4  2601                     203                  MOVE.L D1, D3
000011C6                           204                  
000011C6  C67C 0200                205                  AND.W #%0000001000000000, D3
000011CA  E083                     206                  ASR.L #$8, D3
000011CC  E283                     207                  ASR.L #$1, D3
000011CE  C6FC 0006                208                  MULU #$6, D3
000011D2                           209                  
000011D2  4EB3 3000                210                  JSR 0(A3, D3)
000011D6  4E75                     211                  RTS
000011D8                           212  
000011D8                           213  code0100L2_table
000011D8  4EF9 000011E8            214                 JMP MOVEmem 
000011DE  4EF9 000013C6            215                 JMP JSRoutine
000011E4                           216                 
000011E4  4E72 2700                217  error_inst          STOP #$2700
000011E8                           218  
000011E8                           219  MOVEmem     
000011E8  4242                     220                  CLR D2
000011EA  4243                     221                  CLR D3
000011EC  3401                     222                  MOVE.W D1, D2
000011EE  3602                     223                  MOVE.W D2, D3
000011F0  28FC 4D4F5645            224                  MOVE.L #$4D4F5645, (A4)+ ** Loads "MOVE" into print buffer 
000011F6  38FC 4D2E                225                  MOVE.W #$4D2E, (A4)+ ** Loads M." into print buffer
000011FA  C67C 0040                226                  AND.W #%0000000001000000, D3
000011FE  EC43                     227                  ASR.W #$6, D3
00001200  C6FC 0006                228                  MULU #$6, D3
00001204  47F9 00001210            229                  LEA MOVEmemSize_table, A3
0000120A  4EB3 3000                230                  JSR 0(A3, D3)
0000120E  4E75                     231                  RTS
00001210                           232                  
00001210                           233                  
00001210                           234  MOVEmemSize_table
00001210  4EB9 0000121E            235                  JSR MOVEmem_word
00001216  4EB9 00001242            236                  JSR MOVEmem_long
0000121C  4E75                     237                  RTS
0000121E                           238                  
0000121E                           239  MOVEmem_word
0000121E  4242                     240                  CLR D2
00001220  4243                     241                  CLR D3
00001222  38FC 5709                242                  MOVE.W #$5709, (A4)+ ** Loads "W\T" into the print buffer
00001226  3401                     243                  MOVE D1, D2
00001228  3602                     244                  MOVE D2, D3
0000122A  C67C 0400                245                  AND.W #%0000010000000000, D3 **Checks the direction **
0000122E  E043                     246                  ASR.W #$8, D3
00001230  E443                     247                  ASR.W #$2, D3
00001232  C6FC 0006                248                  MULU #$6, D3
00001236  47F9 00001336            249                  LEA MOVEmem_table, A3
0000123C  4EB3 3000                250                  JSR 0(A3, D3)
00001240  4E75                     251                  RTS
00001242                           252  
00001242                           253  MOVEmem_long
00001242  4242                     254                  CLR D2
00001244  4243                     255                  CLR D3
00001246  38FC 4C09                256                  MOVE.W #$4C09, (A4)+ ** Loads "L\T" into the print buffer
0000124A  3401                     257                  MOVE D1, D2
0000124C  3602                     258                  MOVE D2, D3
0000124E  C67C 0400                259                  AND.W #%0000010000000000, D3 **Checks the direction **
00001252  E043                     260                  ASR.W #$8, D3
00001254  E443                     261                  ASR.W #$2, D3
00001256  C6FC 0006                262                  MULU #$6, D3
0000125A  47F9 00001336            263                  LEA MOVEmem_table, A3
00001260  4EB3 3000                264                  JSR 0(A3, D3)
00001264  4E75                     265                  RTS
00001266                           266                  
00001266                           267  Get_PRE_AReg_List
00001266  1801                     268                 MOVE.B D1, D4     ***Moves the address list mask to d4 ***
00001268  1A3C 0000                269                 MOVE.B #$00, D5  ** Preps D5
0000126C  1C3C 0009                270                 MOVE.B #9, D6    ** Sets the counter to 8 
00001270                           271                 **ASR #8, D4      ** Shifts the mask for Address Registers **
00001270  1201                     272                 MOVE.B D1, D1
00001272                           273  loopPRE_Alist
00001272  5306                     274                 SUB.B #$01, D6  ** Decrements the counter **
00001274  B83C 0000                275                 CMP.B #$00, D4
00001278  6700 0138                276                 BEQ end_loop
0000127C  BC3C 0000                277                 CMP.B #$00, D6  ** Checks the counter **
00001280  6700 0130                278                 BEQ end_loop   ** Ends the loop when counter is = 0 **
00001284  E30C                     279                 LSL.B #1, D4  ** Shifts mask to the left by one **
00001286  6500 003C                280                 BCS printPRE_AReg_List ** Checks the carry Set bit **
0000128A  60E6                     281                 BRA loopPRE_Alist
0000128C  4E75                     282                 RTS
0000128E                           283                  
0000128E                           284  
0000128E                           285  Get_POST_AReg_List
0000128E  3801                     286                 MOVE.W D1, D4     ***Moves the address list mask to d4 ***
00001290  1A3C 0000                287                 MOVE.B #$00, D5  ** Preps D5
00001294  1C3C 0008                288                 MOVE.B #8, D6    ** Sets the counter to 8 
00001298  E044                     289                 ASR #8, D4      ** Shifts the mask for Address Registers **
0000129A                           290  loopPOST_Alist
0000129A  BC3C 0000                291                 CMP.B #$00, D6  ** Checks the counter **
0000129E  6700 0112                292                 BEQ end_loop   ** Ends the loop when counter is = 0 **
000012A2  E20C                     293                 LSR.B #1, D4  ** Shifts mask to the left by one **
000012A4  6500 000C                294                 BCS printPOST_AReg_List ** Checks the carry Set bit **
000012A8  5306                     295                 SUB.B #$01, D6  ** Decrements the counter **
000012AA  18FC 002F                296                 MOVE.B #$2F, (A4)+
000012AE  60EA                     297                 BRA loopPOST_Alist
000012B0  4E75                     298                 RTS
000012B2                           299                 
000012B2                           300                 
000012B2                           301  printPOST_AReg_List
000012B2  1A03                     302                 MOVE.B D3, D5
000012B4  DA06                     303                 ADD.B D6, D5
000012B6  18FC 0044                304                 MOVE.B #$44, (A4)+
000012BA  18C5                     305                 MOVE.B D5, (A4)+
000012BC  18FC 002F                306                 MOVE.B #$2F, (A4)+
000012C0  6000 0042                307                 BRA loopPOST_Dlist
000012C4                           308                 
000012C4                           309  printPRE_AReg_List
000012C4  1A03                     310                 MOVE.B D3, D5
000012C6  9A06                     311                 SUB.B D6, D5
000012C8  18FC 0041                312                 MOVE.B #$41, (A4)+
000012CC  18C5                     313                 MOVE.B D5, (A4)+
000012CE  18FC 002F                314                 MOVE.B #$2F, (A4)+
000012D2  609E                     315                 BRA loopPRE_Alist
000012D4                           316                 
000012D4                           317  Get_PRE_DReg_List
000012D4  3801                     318                 MOVE.W D1, D4
000012D6  E04C                     319                 LSR #$8, D4 ** Data Register mask **
000012D8  3204                     320                 MOVE.W D4, D1
000012DA  1A3C 0000                321                 MOVE.B #$00, D5 ** Preps D5
000012DE  1C3C 0009                322                 MOVE.B #$09, D6 ** Sets the counter **
000012E2                           323                 
000012E2                           324  loopPRE_Dlist     
000012E2  5306                     325                 SUB.B #$1, D6
000012E4  BC3C 0000                326                 CMP.B #$00, D6
000012E8  6700 00C8                327                 BEQ end_loop
000012EC  E30C                     328                 LSL.B #1, D4
000012EE  6500 0036                329                 BCS printPRE_DReg_List
000012F2  60EE                     330                 BRA loopPRE_Dlist
000012F4  4E75                     331                 RTS
000012F6                           332                 
000012F6                           333  Get_POST_DReg_List
000012F6  3801                     334                 MOVE.W D1, D4
000012F8  E04C                     335                 LSR #$8, D4 ** Data Register mask **
000012FA  1401                     336                 MOVE.B D1, D2 ** Address Register mask **
000012FC  1A3C 0000                337                 MOVE.B #$00, D5 ** Preps D5
00001300  1C3C 0008                338                 MOVE.B #$08, D6 ** Sets the counter **
00001304                           339                 
00001304                           340  loopPOST_Dlist     
00001304  5306                     341                 SUB.B #$1, D6
00001306  BC3C 0000                342                 CMP.B #$00, D6
0000130A  6700 00A6                343                 BEQ end_loop
0000130E  E30C                     344                 LSL.B #1, D4
00001310  6500 0004                345                 BCS printPOST_DReg_List
00001314  60EE                     346                 BRA loopPOST_Dlist
00001316                           347                 
00001316                           348  printPOST_DReg_List
00001316  1A03                     349                 MOVE.B D3, D5
00001318  DA06                     350                 ADD.B D6, D5
0000131A  18FC 0044                351                 MOVE.B #$44, (A4)+
0000131E  18C5                     352                 MOVE.B D5, (A4)+
00001320  18FC 002F                353                 MOVE.B #$2F, (A4)+
00001324  60DE                     354                 BRA loopPOST_Dlist
00001326                           355                 
00001326                           356  printPRE_DReg_List
00001326  1A03                     357                 MOVE.B D3, D5
00001328  9A06                     358                 SUB.B D6, D5
0000132A  18FC 0044                359                 MOVE.B #$44, (A4)+
0000132E  18C5                     360                 MOVE.B D5, (A4)+
00001330  18FC 002F                361                 MOVE.B #$2F, (A4)+
00001334  60AC                     362                 BRA loopPRE_Dlist
00001336                           363                 
00001336                           364  MOVEmem_table  
00001336  4EF9 00001342            365                  JMP Reg2Mem
0000133C  4EF9 00001374            366                  JMP Mem2Reg
00001342                           367                  
00001342                           368  Reg2Mem
00001342                           369                 
00001342                           370  
00001342                           371  
00001342  47F9 000013D2            372                 LEA ea_table, A3
00001348  3401                     373                 MOVE.W D1, D2
0000134A  3602                     374                 MOVE.W D2, D3
0000134C  C47C 0007                375                 AND #%0000000000000111, D2
00001350  C67C 0038                376                 AND #%0000000000111000, D3
00001354  E643                     377                 ASR #$3, D3
00001356  C6FC 0006                378                 MULU #$6, D3
0000135A  4EB3 3000                379                 JSR 0(A3, D3)
0000135E                           380                 
0000135E                           381                 
0000135E  4EB8 103C                382                 JSR GET_WORD
00001362  3001                     383                 MOVE.W D1, D0
00001364  363C 0030                384                 MOVE #$30, D3
00001368  4EB8 12F6                385                 JSR Get_POST_DReg_List
0000136C  3200                     386                 MOVE.W D0, D1
0000136E  4EB8 128E                387                 JSR Get_POST_AReg_List
00001372  4E75                     388                 RTS
00001374                           389                 
00001374                           390                  
00001374                           391  
00001374                           392  Mem2Reg
00001374  47F9 000013D2            393                 LEA ea_table, A3
0000137A  3401                     394                 MOVE.W D1, D2
0000137C  3602                     395                 MOVE.W D2, D3
0000137E  C47C 0007                396                 AND #%0000000000000111, D2
00001382  C67C 0038                397                 AND #%0000000000111000, D3
00001386  E643                     398                 ASR #$3, D3
00001388  C6FC 0006                399                 MULU #$6, D3
0000138C  4EB3 3000                400                 JSR 0(A3, D3)
00001390                           401                 
00001390  38FC 2C20                402                 MOVE.W #$2C20, (A4)+ 
00001394  4EB8 103C                403                 JSR GET_WORD
00001398  3001                     404                 MOVE D1, D0
0000139A  4242                     405                 CLR D2
0000139C  4243                     406                 CLR D3
0000139E  7638                     407                 MOVE.L #$38, D3
000013A0  4EB8 12D4                408                 JSR Get_PRE_DReg_List
000013A4  3200                     409                 MOVE.W D0, D1
000013A6  4EB8 1266                410                 JSR Get_PRE_AReg_List
000013AA  4EB9 000013BC            411                 JSR remove_tail
000013B0  4E75                     412                 RTS
000013B2                           413  
000013B2                           414  end_loop
000013B2  B23C 0000                415                  CMP.B #$00, D1
000013B6  6700 0004                416                  BEQ remove_tail
000013BA  4E75                     417                  RTS                    
000013BC                           418  remove_tail
000013BC  193C 00FF                419                  MOVE.B #$FF, -(A4)
000013C0  18FC 0020                420                  MOVE.B #$20, (A4)+ 
000013C4  4E75                     421                  RTS                     
000013C6                           422                  
000013C6                           423  LEadd          
000013C6                           424  
000013C6  4E72 2700                425  JSRoutine      STOP    #$2700
000013CA                           426  
000013CA                           427  
000013CA  28FC 52545320            428  RTSource       MOVE.L #$52545320, (A4)+ **PUSHES "RTS " onto the print buffer **
000013D0  4E75                     429                 RTS
000013D2                           430  
000013D2  4EF9 00001402            431  ea_table       JMP         eacode000
000013D8  4EF9 00001414            432                 JMP         eacode001
000013DE  4EF9 00001426            433                 JMP         eacode010
000013E4  4EF9 00001444            434                 JMP         eacode011
000013EA  4EF9 00001466            435                 JMP         eacode100
000013F0  4EF9 00001488            436                 JMP         eacode101
000013F6  4EF9 000014A6            437                 JMP         eacode110
000013FC  4EF9 000014C4            438                 JMP         eacode111
00001402                           439                 
00001402                           440                 
00001402                           441  **********************************************************************
00001402                           442  **      eacode000 handles addressing mode Data Register (Dn)        **
00001402                           443  **********************************************************************
00001402                           444  ** - Stores the value hexa value of the register in D2              **
00001402                           445  ** - Stores the hexa value of "D" in D3                             **
00001402                           446  ** - Appends the data to the print buffer                           **
00001402                           447  **********************************************************************
00001402                           448  
00001402  0602 0030                449  eacode000       ADD.B #$30, D2              ** Adds the hexa value "0" to the register number 
00001406  4243                     450                  CLR D3                      ** Clears the Register in D3
00001408  163C 0044                451                  MOVE.B #$44, D3             ** Adds the hexa value "D" to D3
0000140C  E183                     452                  ASL.L #$8, D3               ** Shifts the hexa bits to the left 
0000140E  D602                     453                  ADD.B D2, D3                ** Adds the hexavalue of the the register number
00001410  38C3                     454                  MOVE.W D3, (A4)+            ** Appends the ea mode and register number to the print buffer
00001412  4E75                     455                  RTS                         ** Returns to Sender 
00001414                           456                                      
00001414                           457  eacode001
00001414  0602 0030                458                 ADD.B #$30, D2
00001418  4243                     459                 CLR D3
0000141A  163C 0041                460                 MOVE.B #$41, D3
0000141E  E183                     461                 ASL.L #$8, D3
00001420  D602                     462                 ADD.B D2, D3
00001422  38C3                     463                 MOVE.W D3, (A4)+
00001424  4E75                     464                 RTS       
00001426                           465  eacode010
00001426  0602 0030                466                 ADD.B #$30, D2
0000142A  4243                     467                 CLR D3
0000142C  163C 0028                468                 MOVE.B #$28, D3
00001430  E183                     469                 ASL.L #$8, D3
00001432  163C 0041                470                 MOVE.B #$41, D3
00001436  E183                     471                 ASL.L #$8, D3
00001438  1602                     472                 MOVE.B D2, D3
0000143A  E183                     473                 ASL.L #$8, D3
0000143C  163C 0029                474                 MOVE.B #$29, D3
00001440  28C3                     475                 MOVE.L D3, (A4)+
00001442  4E75                     476                 RTS   
00001444                           477  
00001444                           478  eacode011
00001444  0602 0030                479                 ADD.B #$30, D2
00001448  4243                     480                 CLR D3
0000144A  163C 0028                481                 MOVE.B #$28, D3
0000144E  E183                     482                 ASL.L #$8, D3
00001450  163C 0041                483                 MOVE.B #$41, D3
00001454  E183                     484                 ASL.L #$8, D3
00001456  1602                     485                 MOVE.B D2, D3
00001458  E183                     486                 ASL.L #$8, D3
0000145A  163C 0029                487                 MOVE.B #$29, D3
0000145E  28C3                     488                 MOVE.L D3, (A4)+              
00001460  38FC 2B20                489                 MOVE.W #$2B20, (A4)+
00001464                           490  
00001464  4E75                     491                 RTS 
00001466                           492  eacode100
00001466  0602 0030                493                 ADD.B #$30, D2
0000146A  4243                     494                 CLR D3
0000146C  163C 002D                495                 MOVE.B #$2D, D3
00001470  E183                     496                 ASL.L #$8, D3
00001472  163C 0028                497                 MOVE.B #$28, D3
00001476  E183                     498                 ASL.L #$8, D3
00001478  163C 0041                499                 MOVE.B #$41, D3
0000147C  E183                     500                 ASL.L #$8, D3
0000147E  1602                     501                 MOVE.B D2, D3
00001480  28C3                     502                 MOVE.L D3, (A4)+              
00001482  38FC 2920                503                 MOVE.W #$2920, (A4)+
00001486  4E75                     504                 RTS
00001488                           505  eacode101
00001488  0602 0030                506                 ADD.B #$30, D2
0000148C  4243                     507                 CLR D3
0000148E  163C 0028                508                 MOVE.B #$28, D3
00001492  E183                     509                 ASL.L #$8, D3
00001494  163C 0041                510                 MOVE.B #$41, D3
00001498  E183                     511                 ASL.L #$8, D3
0000149A  1602                     512                 MOVE.B D2, D3
0000149C  E183                     513                 ASL.L #$8, D3
0000149E  163C 0029                514                 MOVE.B #$29, D3
000014A2  28C3                     515                 MOVE.L D3, (A4)+
000014A4  4E75                     516                 RTS 
000014A6                           517  eacode110
000014A6  0602 0030                518                 ADD.B #$30, D2
000014AA  4243                     519                 CLR D3
000014AC  163C 0028                520                 MOVE.B #$28, D3
000014B0  E183                     521                 ASL.L #$8, D3
000014B2  163C 0041                522                 MOVE.B #$41, D3
000014B6  E183                     523                 ASL.L #$8, D3
000014B8  1602                     524                 MOVE.B D2, D3
000014BA  E183                     525                 ASL.L #$8, D3
000014BC  163C 0029                526                 MOVE.B #$29, D3
000014C0  28C3                     527                 MOVE.L D3, (A4)+
000014C2  4E75                     528                 RTS 
000014C4                           529  eacode111        
000014C4                           530  
000014C4                           531   
000014C4                           532               
000014C4                           533  PRINT:
000014C4                           534  
000014C4  43F9 00009000            535              LEA print_buffer, A1
000014CA  103C 000D                536              MOVE.B #13, D0
000014CE  4E4F                     537              TRAP #15
000014D0  4E75                     538              RTS
000014D2                           539              
000014D2                           540  
000014D2                           541              
000014D2                           542  CLEAR:
000014D2  4240                     543              CLR     D0
000014D4  4241                     544              CLR     D1
000014D6  4242                     545              CLR     D2
000014D8  4243                     546              CLR     D3
000014DA  4244                     547              CLR     D4
000014DC  4245                     548              CLR     D5
000014DE  4246                     549              CLR     D6
000014E0  4247                     550              CLR     D7
000014E2  4E75                     551  endClear    RTS
000014E4                           552  
000014E4                           553  ************************************************************
000014E4                           554  *address input
000014E4                           555  ************************************************************
000014E4                           556  U_INPUT:
000014E4  103C 0001                557              MOVE.B  #task1,D0           *
000014E8  43F9 000015FA            558              LEA     srt_addr,A1         *
000014EE  3239 00001614            559              MOVE.W  s_len,D1            *
000014F4  4E4F                     560              TRAP    #15                 *
000014F6  D3FC 00001614            561              ADDA.L  #s_len,A1           *
000014FC  103C 0002                562              MOVE.B  #task2,D0           *
00001500  4E4F                     563              TRAP    #15                 *
00001502  4EB9 00001546            564              JSR     ASCII2HEX
00001508  BA3C 0000                565              CMP.B   #$00,D5             *bad input?
0000150C  6700 0036                566              BEQ     endInput
00001510                           567              
00001510  2848                     568              MOVEA.L A0,A4         
00001512  103C 0001                569              MOVE.B  #task1,D0
00001516  43F9 00001616            570              LEA     end_addr,A1
0000151C  3239 0000162E            571              MOVE.W  e_len,D1         
00001522  4E4F                     572              TRAP    #15         
00001524  D3FC 0000162E            573              ADDA.L  #e_len,A1
0000152A  103C 0002                574              MOVE.B  #task2,D0
0000152E  4E4F                     575              TRAP    #15
00001530  4EB9 00001546            576              JSR     ASCII2HEX
00001536  BA3C 0000                577              CMP.B   #$00,D5             *bad input?
0000153A  6700 0008                578              BEQ     endInput
0000153E                           579              
0000153E                           580             
0000153E                           581             **********swap************
0000153E  264C                     582              MOVEA.L A4,A3               *store starting into register
00001540  2848                     583              MOVEA.L A0,A4               *copy ending to A4
00001542  204B                     584              MOVEA.L A3,A0               *store starting in A0                    
00001544  4E75                     585  endInput    RTS
00001546                           586  
00001546                           587  ************************************************************
00001546                           588  *ascii2hex - see flowchart for logic
00001546                           589  *D3 - Placeholder for current ascii byte
00001546                           590  *D4 - Translated address
00001546                           591  *D5 - Return status
00001546                           592  *D6 - Counter (6)
00001546                           593  *A0 - Stored address at end of subroutine
00001546                           594  
00001546                           595  ************************************************************
00001546                           596  ASCII2HEX:
00001546  48E7 F800                597              MOVEM.L D0-D4,-(SP)         * save data registers to the stack
0000154A  4EB8 14D2                598              JSR     CLEAR
0000154E  3C3C 0000                599              MOVE    #length,D6
00001552                           600  
00001552                           601  loop
00001552  1619                     602              MOVE.B  (A1)+,D3            *
00001554  B63C 0030                603              CMP.B   #$30,D3             *byte < 30??
00001558  6D00 0056                604              BLT     error               *
0000155C                           605              
0000155C  B63C 003A                606              CMP.B   #$3A,D3             *byte < 3A??
00001560  6D00 002A                607              BLT     num2hex             *
00001564                           608              
00001564  B63C 0041                609              CMP.B   #$41,D3             *byte < 41??
00001568  6D00 0046                610              BLT     error               *
0000156C                           611              
0000156C  B63C 0047                612              CMP.B   #$47,D3             *byte < 47?
00001570  6D00 0026                613              BLT     upper2hex           *
00001574                           614              
00001574  B63C 0061                615              CMP.B   #$61,D3             *byte < 61??
00001578  6D00 0036                616              BLT     error               *
0000157C                           617              
0000157C  B63C 0067                618              CMP.B   #$67,D3             *byte < 67??
00001580  6D00 0022                619              BLT     lower2hex           *
00001584                           620              
00001584  B63C 0066                621              CMP.B   #$66,D3             *byte > 66??
00001588  6E00 0026                622              BGT     error               *
0000158C                           623  
0000158C                           624  num2hex
0000158C  0403 0030                625              SUBI.B  #$30,D3             *subracthex value of 0 to get correct value of input
00001590  D803                     626              ADD.B   D3,D4               *
00001592  4EF9 000015BA            627              JMP     resume              *return to top
00001598                           628              
00001598                           629  upper2hex
00001598  0403 0037                630              SUBI.B  #$37,D3             *subracthex value of A to get correct value of input
0000159C  D803                     631              ADD.B   D3,D4               *
0000159E  4EF9 000015BA            632              JMP     resume              *return to top
000015A4                           633              
000015A4                           634  lower2hex
000015A4  0403 0057                635              SUBI.B  #$57,D3             *subracthex value of a to get correct value of input
000015A8  D803                     636              ADD.B   D3,D4               *
000015AA  4EF9 000015BA            637              JMP     resume              *return to top
000015B0                           638  error
000015B0  1A3C 0000                639              MOVE.B  #$00,D5             *flag as bad input and return
000015B4  4EF9 000015D2            640              JMP     endA2H              *return to top
000015BA                           641  resume
000015BA  5246                     642              ADD     #1,D6               *increment length counter
000015BC  BC7C 0006                643              CMP     #6,D6               *check if done
000015C0  6700 0010                644              BEQ     endA2H              *
000015C4  0C11 0000                645              CMP.B   #$00,(A1)           *end of string??
000015C8  6700 0008                646              BEQ     endA2H              *
000015CC  E984                     647              ASL.L   #4,D4               *shiftleft by 4 bits to get next value            
000015CE  4EF8 1552                648              JMP     loop                *return to top
000015D2                           649  
000015D2                           650  endA2H
000015D2  2044                     651              MOVE.L  D4,A0               *
000015D4  4246                     652              CLR     D6                  *clear counter
000015D6  4CDF 001F                653              MOVEM.L (SP)+,D0-D4         *load data registers from stack      
000015DA  4E75                     654              RTS                         *
000015DC                           655  
000015DC                           656  END:
000015DC  FFFF FFFF                657              SIMHALT             ; halt simulator
000015E0                           658  
000015E0                           659  
000015E0                           660  *-----------------------------------------------------------
000015E0                           661  *variables
000015E0                           662  *-----------------------------------------------------------
000015E0= 45 61 73 79 36 38 ...    663  intro       dc.b    'Easy68k Disassembler',0,CR,LF
000015F8= 0018                     664  i_length    dc.w    i_length-intro
000015FA                           665  
000015FA= 45 6E 74 65 72 20 ...    666  srt_addr    dc.b    'Enter starting address: $',0
00001614= 001A                     667  s_len       dc.w    s_len-srt_addr
00001616                           668  
00001616= 45 6E 74 65 72 20 ...    669  end_addr    dc.b    'Enter ending address: $',0
0000162E= 0018                     670  e_len       dc.w    e_len-end_addr
00001630                           671  
00001630= 01                       672  buffer      dc.b    1
00001631                           673  
00001631= 4D 4F 56 45 2E 00        674  move_message dc.b 'MOVE.', 0
00001637                           675  
00001637= 57 20 00                 676  size_message dc.b 'W ', 0
0000163A                           677  
0000163A= 44 00                    678  data_register_message dc.b 'D', 0
0000163C                           679  
0000163C= 2C 20 00                 680  comma dc.b ', ', 0
0000163F                           681  
0000163F                           682  
0000163F                           683      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII2HEX           1546
BADFLAG             0
BUFFER              1630
CLEAR               14D2
CODE0000            10C4
CODE0001            10C8
CODE0010            112E
CODE0011            1132
CODE0100            1136
CODE0100L1_TABLE    1188
CODE0100L2          11B8
CODE0100L2_TABLE    11D8
CODE0101            115C
CODE0110            1160
CODE0111            1164
CODE1000            1168
CODE1001            116C
CODE1010            1170
CODE1011            1174
CODE1100            1178
CODE1101            117C
CODE1110            1180
CODE1111            1184
COMMA               163C
CR                  D
DATA_REGISTER_MESSAGE  163A
EACODE000           1402
EACODE001           1414
EACODE010           1426
EACODE011           1444
EACODE100           1466
EACODE101           1488
EACODE110           14A6
EACODE111           14C4
EA_TABLE            13D2
END                 15DC
ENDA2H              15D2
ENDCLEAR            14E2
ENDGET_WORD         103E
ENDINPUT            1544
ENDINTRO            103A
END_ADDR            1616
END_LOOP            13B2
ERROR               15B0
ERROR_INST          11E4
E_LEN               162E
GET_POST_AREG_LIST  128E
GET_POST_DREG_LIST  12F6
GET_PRE_AREG_LIST   1266
GET_PRE_DREG_LIST   12D4
GET_WORD            103C
GOODFLAG            1
INTRO               15E0
INTRO_MSG           1028
I_LENGTH            15F8
JSROUTINE           13C6
LEADD               13C6
LENGTH              0
LF                  A
LOOP                1552
LOOPPOST_ALIST      129A
LOOPPOST_DLIST      1304
LOOPPRE_ALIST       1272
LOOPPRE_DLIST       12E2
LOWER2HEX           15A4
MAIN                1004
MAIN_LOOP           1040
MEM2REG             1374
MOVEMEM             11E8
MOVEMEMSIZE_TABLE   1210
MOVEMEM_LONG        1242
MOVEMEM_TABLE       1336
MOVEMEM_WORD        121E
MOVE_MESSAGE        1631
NUM2HEX             158C
OP_TABLE            1064
PRINT               14C4
PRINTPOST_AREG_LIST  12B2
PRINTPOST_DREG_LIST  1316
PRINTPRE_AREG_LIST  12C4
PRINTPRE_DREG_LIST  1326
PRINT_BUFFER        9000
REG2MEM             1342
REMOVE_TAIL         13BC
RESUME              15BA
RTSOURCE            13CA
SIZE_MESSAGE        1637
SRT_ADDR            15FA
STACK               A000
START               1000
S_LEN               1614
TASK1               1
TASK2               2
UPPER2HEX           1598
U_INPUT             14E4
