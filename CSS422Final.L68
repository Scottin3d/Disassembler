00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 06/06/20 10:57:37 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Scott Shirley, Carl Howing, Daniel Yakovlev
00000000                             4  * Date       : June 6, 2020
00000000                             5  * Description: This program is written in Motorola 68000 assembly 
00000000                             6  *              language (M68k), and its purpose is to disassemble 
00000000                             7  *              data back into human readable opcodes and effective 
00000000                             8  *              addresses.
00000000                             9  ************************************************************
00000000                            10  
00000000                            11  ************************************************************
00000000                            12  *  ____            _     _                
00000000                            13  * |  _ \ ___  __ _(_)___| |_ ___ _ __ ___ 
00000000                            14  * | |_) / _ \/ _` | / __| __/ _ \ '__/ __|
00000000                            15  * |  _ <  __/ (_| | \__ \ ||  __/ |  \__ \
00000000                            16  * |_| \_\___|\__, |_|___/\__\___|_|  |___/
00000000                            17  *            |___/                        
00000000                            18  *Register Use
00000000                            19  *For consistency, please utilize registers in the following way.
00000000                            20  *
00000000                            21  *D0 - Copy of mask
00000000                            22  *D1 - Instruction Mask
00000000                            23  *D2 - 
00000000                            24  *D3 - utility register
00000000                            25  *D4 -
00000000                            26  *D5 - flag condition
00000000                            27  *D6 - counter
00000000                            28  *D7 - copy of working address
00000000                            29  *
00000000                            30  *A0 - temp address holder
00000000                            31  *A1 - trap address
00000000                            32  *A2 - buffer address of decoded instruction
00000000                            33  *A3 -
00000000                            34  *A4 - starting address
00000000                            35  *A5 - ending address
00000000                            36  *A6 - jump tables
00000000                            37  *A7 -
00000000                            38  ************************************************************
00000000                            39  
00000000                            40  ************************************************************
00000000                            41  * __     __         _       _     _                               _     _____ ___  _   _ 
00000000                            42  * \ \   / /_ _ _ __(_) __ _| |__ | | ___  ___      __ _ _ __   __| |   | ____/ _ \| | | |
00000000                            43  *  \ \ / / _` | '__| |/ _` | '_ \| |/ _ \/ __|    / _` | '_ \ / _` |   |  _|| | | | | | |
00000000                            44  *   \ V / (_| | |  | | (_| | |_) | |  __/\__ \   | (_| | | | | (_| |   | |__| |_| | |_| |
00000000                            45  *    \_/ \__,_|_|  |_|\__,_|_.__/|_|\___||___/    \__,_|_| |_|\__,_|   |_____\__\_\\___/ 
00000000                            46  *                                                                                        
00000000                            47  * Variables and EQUs
00000000                            48  ************************************************************
00000000  =00001000                 49  start       EQU     $1000               *start address
00000000  =0000A000                 50  stack       EQU     $A000               *stack address  
00000000  =00009000                 51  buf         EQU     $9000
00000000                            52  
00000000  =00000000                 53  minAdd      EQU     $00000000           *start of address space
00000000  =00FFFFFF                 54  maxAdd      EQU     $00FFFFFF           *end of address space
00000000                            55  
00000000  =0000000D                 56  CR          EQU     $0D                 *carriage return
00000000  =0000000A                 57  LF          EQU     $0A                 *line feed
00000000  =00000900                 58  badInstCount EQU    $900
00000000  =00000001                 59  goodflag    EQU     1                   *good flag condition
00000000  =00000000                 60  badflag     EQU     0                   *bad flag condition
00000000  =00000000                 61  length      EQU     0                   *
00000000                            62  
00000000  =0000000A                 63  printCount  EQU     10                  *number of lines printed to console before user input
00000000                            64  
00000000                            65  *TRAP tasks for preload
00000000  =00000000                 66  task0       EQU     00                  *Display string at (A1), D1.W bytes long (max 255) with carriage return and line feed (CR, LF)
00000000  =00000001                 67  task1       EQU     01                  *Display string at (A1), D1.W bytes long (max 255) without CR, LF
00000000  =00000002                 68  task2       EQU     02                  *Read string from keyboard and store at (A1), NULL terminated, length retuned in D1.W (max 80)
00000000  =00000003                 69  task3       EQU     03                  *Display signed number in D1.L in decimal in smallest field
00000000  =0000000D                 70  task13      EQU     13                  *Display the NULL terminated string at (A1) with CR, LF
00000000  =0000000E                 71  task14      EQU     14                  *Display the NULL terminated string at (A1) without CR, LF
00000000                            72  ************************************************************
00000000                            73  
00000000                            74  ************************************************************
00000000                            75  *  __  __       _       
00000000                            76  * |  \/  | __ _(_)_ __  
00000000                            77  * | |\/| |/ _` | | '_ \ 
00000000                            78  * | |  | | (_| | | | | |
00000000                            79  * |_|  |_|\__,_|_|_| |_|
00000000                            80  *                      
00000000                            81  ************************************************************
00001000                            82              ORG     start
00001000  6100 0084                 83              BSR     dis_intro_msg       *print intro message
00001004                            84              
00001004  6100 00E2                 85  main        BSR     CLEAR               *clear all registers
00001008  4FF9 0000A000             86              LEA     stack, SP           *load stack pointer
0000100E  45F9 00009000             87              LEA     buf, A2          *set buffer for input
00001014  2C4A                      88              MOVEA.L A2,A6    
00001016                            89              
00001016  6100 00E2                 90  main_input  BSR     U_INPUT             *branch to input
0000101A  BA3C 0000                 91              CMP.B   #$0, D5             *check if bad input
0000101E  6700 007A                 92              BEQ     dis_badInput        *bad flag, reinput 
00001022                            93              
00001022                            94               
00001022                            95                          
00001022  4EB9 000011FA             96  main_loop   JSR     DECODE         *prep buffer
00001028                            97  *loop checking **********************************************  
00001028  BA3C 0000                 98              CMP.B   #%0, D5
0000102C  6600 0006                 99              BNE     main_next
00001030  5278 0900                100              ADD     #1, (badInstCount)
00001034  BBC8                     101  main_next   CMPA.L  A0, A5              * have we reached the end of our address range?
00001036  6F00 0014                102              BLE     dis_yncont 
0000103A                           103              
0000103A  5246                     104              ADDI    #1, D6              *add counter
0000103C  BC7C 000A                105              CMP     #printcount, D6     *check loop progress
00001040  66E0                     106              BNE     main_loop
00001042                           107  
00001042  4EB9 000010C8            108  main_cont   JSR     dis_cont
00001048  4EF8 1022                109              JMP     main_loop
0000104C                           110              
0000104C                           111              
0000104C                           112  **display y/n***********************************************
0000104C  4241                     113  dis_yncont  CLR     D1
0000104E  4242                     114              CLR     D2
00001050  4EB9 000010B4            115              JSR     dis_cr
00001056  103C 000E                116              MOVE.B  #task14, D0
0000105A  43F9 00002784            117              LEA     str_yncont, A1
00001060  4E4F                     118              TRAP    #15
00001062                           119              
00001062  103C 0005                120              MOVE.B  #5, D0           Trap task 4 does the following:
00001066  4E4F                     121              TRAP    #15 
00001068  1401                     122              MOVE.B  D1, D2
0000106A  4EB9 000010B4            123              JSR     dis_cr
00001070                           124  
00001070  B43C 0059                125              CMP.B   #$59, D2
00001074                           126              
00001074  678E                     127              BEQ     main        
00001076  B43C 0079                128              CMP.B   #$79, D2
0000107A  6788                     129              BEQ     main  
0000107C                           130              
0000107C  4EB9 000010B4            131              JSR     dis_cr
00001082                           132  
00001082                           133  
00001082  6100 104C                134  main_end    BSR     END
00001086                           135  *===========================================================
00001086                           136  
00001086                           137  *-----------------------------------------------------------
00001086                           138  *display subroutines
00001086                           139  *intro message, bad inputs, carriage return, enter2return, input test
00001086                           140  *-----------------------------------------------------------
00001086                           141  *intro message display
00001086                           142  ************************************************************
00001086                           143  dis_intro_msg
00001086  103C 000D                144              MOVE.B  #13,D0              *load task
0000108A  43F9 000020FA            145              LEA     intro,A1            *load string
00001090  3239 000026CC            146              MOVE.W  i_length,D1         *load string length 
00001096  4E4F                     147              TRAP    #15                 *display
00001098  4E75                     148  endIntro    RTS                         *return
0000109A                           149  *bad input error message display****************************
0000109A                           150  dis_badInput
0000109A  103C 0000                151              MOVE.B  #task0,D0           *load task
0000109E  43F9 00002736            152              LEA     str_error, A1       *load string
000010A4  3239 00002762            153              MOVE.W  err_len, D1         *load string length
000010AA  4E4F                     154              TRAP    #15                 *display
000010AC  1A3C 0000                155              MOVE.B  #badFlag,D5         *set flag condition to bad
000010B0  4EB8 1016                156  endBI       JSR     main_input          *return to main_input
000010B4                           157  *dsiplay carriage return************************************
000010B4                           158  dis_cr
000010B4  103C 000D                159              MOVE.B  #task13, D0         *load task
000010B8  43F9 00002780            160              LEA     str_cr, A1          *load string
000010BE  3239 00002782            161              MOVE.W  cr_len, D1          *load string length
000010C4  4E4F                     162              TRAP    #15                 *display
000010C6  4E75                     163  end_cr      RTS                         *return
000010C8                           164  *enter2return***********************************************
000010C8                           165  dis_cont   
000010C8  103C 000E                166              MOVE.B  #task14, D0         *load task
000010CC  43F9 00002764            167              LEA     str_cont, A1        *load string
000010D2  3239 0000277E            168              MOVE.W  cont_len, D1        *load string length
000010D8  4E4F                     169              TRAP    #15                 *display
000010DA                           170              
000010DA  103C 0002                171              MOVE.B  #task2,D0           *load task
000010DE  4E4F                     172              TRAP    #15                 *get input
000010E0                           173              
000010E0  12BC 0050                174              MOVE.B  #$50,(A1)           *reset A1
000010E4                           175              
000010E4  4246                     176              CLR     D6                  *clear counter, reset loop
000010E6  4E75                     177  endDC       RTS                         *return
000010E8                           178  
000010E8                           179  *===========================================================
000010E8                           180  
000010E8                           181  ************************************************************ 
000010E8                           182  *  _   _ _____ _     ____  _____ ____  
000010E8                           183  * | | | | ____| |   |  _ \| ____|  _ \ 
000010E8                           184  * | |_| |  _| | |   | |_) |  _| | |_) |
000010E8                           185  * |  _  | |___| |___|  __/| |___|  _ < 
000010E8                           186  * |_| |_|_____|_____|_|   |_____|_| \_\
000010E8                           187  *                                      
000010E8                           188  *HELPER SUBROUTINES
000010E8                           189  *Description: These subroutines are called during teh opcode translation
000010E8                           190  ************************************************************
000010E8                           191  
000010E8                           192  ************************************************************   
000010E8                           193  *CLEAR
000010E8                           194  *Description: Clears registers of values
000010E8                           195  ************************************************************        
000010E8                           196  CLEAR:
000010E8  4240                     197              CLR     D0
000010EA  4241                     198              CLR     D1
000010EC  4242                     199              CLR     D2
000010EE  4243                     200              CLR     D3
000010F0  4244                     201              CLR     D4
000010F2  4245                     202              CLR     D5
000010F4  4246                     203              CLR     D6
000010F6  4247                     204              CLR     D7
000010F8  4E75                     205  endClear    RTS
000010FA                           206  *===========================================================
000010FA                           207  
000010FA                           208  ************************************************************
000010FA                           209  *U_INPUT
000010FA                           210  *Description: Gets input address from user for program
000010FA                           211  *D5 - Return Status
000010FA                           212  *D7 - Temparary register to store address value
000010FA                           213  *A0 - Working Address
000010FA                           214  *A4 - Start Address
000010FA                           215  *A5 - End Address
000010FA                           216  ************************************************************
000010FA                           217  U_INPUT:
000010FA  103C 0001                218              MOVE.B  #task1,D0           *
000010FE  43F9 000026CE            219              LEA     srt_addr,A1         *
00001104  3239 000026E8            220              MOVE.W  s_len,D1            *
0000110A  4E4F                     221              TRAP    #15                 *
0000110C  D3FC 000026E8            222              ADDA.L  #s_len,A1           *
00001112  103C 0002                223              MOVE.B  #task2,D0           *
00001116  4E4F                     224              TRAP    #15                 *
00001118  4EB9 0000115E            225              JSR     ASCII2HEX
0000111E  BA3C 0000                226              CMP.B   #$00,D5             *bad input?
00001122  6700 0038                227              BEQ     endInput
00001126                           228              *MOVE.L  D7, v_srt_add       *store to varable
00001126  4247                     229              CLR     D7
00001128                           230              
00001128  2848                     231              MOVEA.L A0,A4       
0000112A  103C 0001                232              MOVE.B  #task1,D0
0000112E  43F9 000026EA            233              LEA     end_addr,A1
00001134  3239 00002702            234              MOVE.W  e_len,D1         
0000113A  4E4F                     235              TRAP    #15         
0000113C  D3FC 00002702            236              ADDA.L  #e_len,A1
00001142  103C 0002                237              MOVE.B  #task2,D0
00001146  4E4F                     238              TRAP    #15
00001148  4EB9 0000115E            239              JSR     ASCII2HEX
0000114E  BA3C 0000                240              CMP.B   #$00,D5             *bad input?
00001152  6700 0008                241              BEQ     endInput
00001156                           242              *MOVE.L  D7, v_end_add        *store to varable
00001156  4247                     243              CLR     D7
00001158                           244  
00001158                           245  
00001158  2A48                     246              MOVEA.L A0,A5               *store ending to A5
0000115A  204C                     247              MOVEA.L A4,A0               *store starting in A0  
0000115C                           248                    
0000115C  4E75                     249  endInput    RTS
0000115E                           250  *===========================================================
0000115E                           251  
0000115E                           252  ************************************************************
0000115E                           253  *ASCII2HEX 
0000115E                           254  *Description: Converts an ASCII character to HEX - see flowchart for logic
0000115E                           255  *D3 - Placeholder for current ascii byte
0000115E                           256  *D4 - Translated address
0000115E                           257  *D5 - Return status
0000115E                           258  *D6 - Counter (6)
0000115E                           259  *D7 - Temparary register to store address value
0000115E                           260  *A0 - Stored address at end of subroutine
0000115E                           261  ************************************************************
0000115E                           262  ASCII2HEX:
0000115E  48E7 F800                263              MOVEM.L D0-D4,-(SP)         *save data registers to the stack
00001162  4EB8 10E8                264              JSR     CLEAR
00001166  1A3C 0001                265              MOVE.B  #$01,D5             *preset flag condition to good
0000116A  3C3C 0000                266              MOVE    #length,D6
0000116E                           267  
0000116E                           268  loop
0000116E  1619                     269              MOVE.B  (A1)+,D3            *
00001170  B63C 0030                270              CMP.B   #$30,D3             *byte < 30??
00001174  6D00 0056                271              BLT     error               *
00001178                           272              
00001178  B63C 003A                273              CMP.B   #$3A,D3             *byte < 3A??
0000117C  6D00 002A                274              BLT     num2hex             *
00001180                           275              
00001180  B63C 0041                276              CMP.B   #$41,D3             *byte < 41??
00001184  6D00 0046                277              BLT     error               *
00001188                           278              
00001188  B63C 0047                279              CMP.B   #$47,D3             *byte < 47?
0000118C  6D00 0026                280              BLT     upper2hex           *
00001190                           281              
00001190  B63C 0061                282              CMP.B   #$61,D3             *byte < 61??
00001194  6D00 0036                283              BLT     error               *
00001198                           284              
00001198  B63C 0067                285              CMP.B   #$67,D3             *byte < 67??
0000119C  6D00 0022                286              BLT     lower2hex           *
000011A0                           287              
000011A0  B63C 0066                288              CMP.B   #$66,D3             *byte > 66??
000011A4  6E00 0026                289              BGT     error               *
000011A8                           290  
000011A8                           291  num2hex
000011A8  0403 0030                292              SUBI.B  #$30,D3             *subracthex value of 0 to get correct value of input
000011AC  D803                     293              ADD.B   D3,D4               *
000011AE  4EF9 000011D6            294              JMP     resume              *return to top
000011B4                           295              
000011B4                           296  upper2hex
000011B4  0403 0037                297              SUBI.B  #$37,D3             *subracthex value of A to get correct value of input
000011B8  D803                     298              ADD.B   D3,D4               *
000011BA  4EF9 000011D6            299              JMP     resume              *return to top
000011C0                           300              
000011C0                           301  lower2hex
000011C0  0403 0057                302              SUBI.B  #$57,D3             *subracthex value of a to get correct value of input
000011C4  D803                     303              ADD.B   D3,D4               *
000011C6  4EF9 000011D6            304              JMP     resume              *return to top
000011CC                           305  error
000011CC  1A3C 0000                306              MOVE.B  #$00,D5             *flag as bad input and return
000011D0  4EF9 000011EE            307              JMP     endA2H              *return to top
000011D6                           308  resume
000011D6  5246                     309              ADD     #1,D6               *increment length counter
000011D8  BC7C 0006                310              CMP     #6,D6               *check if done
000011DC  6700 0010                311              BEQ     endA2H              *
000011E0  0C11 0000                312              CMP.B   #$00,(A1)           *end of string??
000011E4  6700 0008                313              BEQ     endA2H              *
000011E8  E984                     314              ASL.L   #4,D4               *shiftleft by 4 bits to get next value            
000011EA  4EF8 116E                315              JMP     loop                *return to top
000011EE                           316  
000011EE                           317  endA2H
000011EE  2044                     318              MOVE.L  D4,A0               *
000011F0  2E04                     319              MOVE.L  D4,D7               *move address to temp register
000011F2  4246                     320              CLR     D6                  *clear counter
000011F4  4CDF 001F                321              MOVEM.L (SP)+,D0-D4         *load data registers from stack      
000011F8  4E75                     322              RTS                         *
000011FA                           323  *===========================================================
000011FA                           324  
000011FA                           325  ************************************************************
000011FA                           326  *DECODE
000011FA                           327  *Description: Decodes an operation instruction from memory
000011FA                           328  ************************************************************
000011FA                           329  DECODE:
000011FA  45F9 00009000            330              LEA     buf, A2             *load buffer
00001200  224A                     331              MOVEA.L A2,A1               *load trap address with buffer 
00001202  4EB9 00001220            332              JSR     ADDRESS             *current address to buffer
00001208  3E18                     333              MOVE.W  (A0)+, D7            *move A0 value to test
0000120A                           334  
0000120A  4EB9 00001270            335              JSR     GETOPCODE           *decode instruction
00001210  14BC 0000                336  print_b     MOVE.B  #00,(A2)            *null terminator
00001214  103C 000D                337              MOVE.B  #task13,D0
00001218  4E4F                     338              TRAP    #15 
0000121A                           339              
0000121A                           340              *CMPI.B  #%0, D5
0000121A                           341              *BNE     decodeCont 
0000121A                           342              *ADDI    #1, badInstCount
0000121A  1A3C 0000                343  decodeCont  MOVE.B  #0, D5
0000121E                           344              *ADDQ.W      #2, A0
0000121E                           345              
0000121E  4E75                     346  endDECODE   RTS
00001220                           347  *===========================================================                       
00001220                           348  
00001220                           349  ************************************************************
00001220                           350  *ADDRESS
00001220                           351  *Description: Fills the buffer with the current address
00001220                           352  ************************************************************
00001220                           353  ADDRESS:    
00001220  4283                     354              CLR.L   D3
00001222  4284                     355              CLR.L   D4
00001224  4287                     356              CLR.L   D7
00001226  14FC 0024                357              MOVE.B  #$24, (A2)+     *'$' to buffer
0000122A  14FC 0030                358              MOVE.B  #$30, (A2)+     *'0' to buffer
0000122E  14FC 0078                359              MOVE.B  #$78, (A2)+     *'x' to buffer       
00001232  7600                     360              MOVE.L  #$00000000, D3
00001234  2E08                     361              MOVE.L  A0, D7
00001236  D647                     362              ADD.W   D7, D3
00001238  4EB9 00001248            363              JSR     addrFill   
0000123E  14FC 0009                364              MOVE.B  #$09,(A2)+   *tab
00001242  4EF9 0000126C            365              JMP     endaddr
00001248                           366              
00001248  2403                     367  addrFill    MOVE.L      D3, D2            *move current word into D2 for rolling purposes
0000124A  183C 0008                368              MOVE.B      #8, D4              *load counter
0000124E                           369  
0000124E                           370  addrLoop                 
0000124E  B83C 0000                371              CMP.B       #$00, D4            *compare counter with 0
00001252  6700 0018                372              BEQ         endaddr      *if 0, return
00001256  E99A                     373              ROL.L       #4, D2              *
00001258  2602                     374              MOVE.L      D2, D3              *
0000125A  0283 0000000F            375              ANDI.L      #$000F, D3          *isolate
00001260  4EB9 00001F2A            376              JSR         HEX2ASCII           *to buffer           
00001266  5304                     377              SUBQ.B      #$1, D4             *subtract from counter
00001268  4EF8 124E                378              JMP         addrLoop                 *loop
0000126C                           379              
0000126C  2607                     380  endaddr     MOVE.L      D7, D3              *load from utility                             
0000126E  4E75                     381  endbf       RTS
00001270                           382  *===========================================================
00001270                           383  
00001270                           384  ************************************************************ 
00001270                           385  *   ___  ____   ____ ___  ____  _____ ____  
00001270                           386  *  / _ \|  _ \ / ___/ _ \|  _ \| ____/ ___| 
00001270                           387  * | | | | |_) | |  | | | | | | |  _| \___ \ 
00001270                           388  * | |_| |  __/| |__| |_| | |_| | |___ ___) |
00001270                           389  *  \___/|_|    \____\___/|____/|_____|____/ 
00001270                           390  * 
00001270                           391  *GETOPCODE:
00001270                           392  *Description: Gets the first four bits of instruction to decode 
00001270                           393  *  
00001270                           394  *Naming conventions for opcode subroutines
00001270                           395  *opcode####
00001270                           396  *op[opmode][operation]
00001270                           397  *endop####
00001270                           398  *                              
00001270                           399  *Registers Used:
00001270                           400  *For consistency, please utilize registers in the following way.
00001270                           401  *
00001270                           402  *D1 - utility register
00001270                           403  *D3 - utility register
00001270                           404  *D7 - copy of working address
00001270                           405  *
00001270                           406  *A2 - buffer address of decoded instruction
00001270                           407  *A6 - jump table               
00001270                           408  ************************************************************
00001270                           409  GETOPCODE:   
00001270  1A3C 0001                410              MOVE.B  #%01, D5
00001274  3607                     411              MOVE.W  D7, D3              *move to utility
00001276  123C 000C                412              MOVE.B  #12, D1             *
0000127A  E26B                     413              LSR.W   D1, D3              *shift
0000127C  C6FC 0006                414              MULU    #6, D3              *offset          
00001280  4DF9 0000128E            415              LEA     OP_TABLE, A6        *                                                                                  
00001286  4EB6 3000                416              JSR     00(A6,D3)           *jump indirect with index (00 indicates word movement)
0000128A  260A                     417              MOVE.L  A2, D3
0000128C                           418              *MOVE.L  D3, bufferend   
0000128C  4E75                     419  endgop      RTS                         *return
0000128E                           420  *===========================================================
0000128E                           421  
0000128E                           422  ************************************************************
0000128E                           423  *OPCODE Table
0000128E                           424  *Description: Table of OPCODES
0000128E                           425  ************************************************************ 
0000128E                           426  OP_TABLE
0000128E  4EF9 000012EE            427              JMP         opcode0000      *ADDI*/ANDI*/CMPI*/EORI*/ORI*/SUBI*
00001294  4EF9 000013A6            428              JMP         opcode0001      *MOVE.B 
0000129A  4EF9 000013E6            429              JMP         opcode0010      *MOVE/A.L 
000012A0  4EF9 0000143A            430              JMP         opcode0011      *MOVE/A.W 
000012A6  4EF9 0000148E            431              JMP         opcode0100      *CLR,LEA,JMP,JSR,MOVEM,NEG*,NOP*,NOT*,RTS *testing*
000012AC  4EF9 00001864            432              JMP         opcode0101      *BADINST
000012B2  4EF9 0000186C            433              JMP         opcode0110      *Bcc
000012B8  4EF9 00001962            434              JMP         opcode0111      *BADINST
000012BE  4EF9 0000196A            435              JMP         opcode1000      *OR
000012C4  4EF9 000019D8            436              JMP         opcode1001      *SUB,SUBA
000012CA  4EF9 00001A86            437              JMP         opcode1010      *BADINST
000012D0  4EF9 00001A8E            438              JMP         opcode1011      *CMP,CMPA
000012D6  4EF9 00001B2A            439              JMP         opcode1100      *AND
000012DC  4EF9 00001BB6            440              JMP         opcode1101      *ADD,ADDA
000012E2  4EF9 00001C6C            441              JMP         opcode1110      *ASR/LSL **incomplete**
000012E8  4EF9 00001D74            442              JMP         opcode1111      *BADINST
000012EE                           443              
000012EE                           444  ************************************************************
000012EE                           445  *OPCODES
000012EE                           446  *Description: OPCODE subroutines used to decode instructions
000012EE                           447  *
000012EE                           448  ************************************************************  
000012EE                           449  *OPCODE: 0000
000012EE                           450  *ORI,ANDI,SUBI,ADDI,EORI,CMPI
000012EE                           451  opcode0000: 
000012EE  1607                     452              MOVE.B  D7, D3
000012F0  0243 0F00                453              ANDI.W  #$0F00, D3
000012F4  E08B                     454              LSR.L   #8, D3
000012F6  B63C 0000                455              CMP.B   #$0, D3         *ORI?
000012FA  6700 003C                456              BEQ     opORI           *
000012FE  B63C 0002                457              CMP.B   #$2, D3         *ANDI?
00001302  6700 0042                458              BEQ     opANDI          *
00001306  B63C 0004                459              CMP.B   #$4, D3         *SUBI?
0000130A  6700 004C                460              BEQ     opSUBI          *
0000130E  B63C 0006                461              CMP.B   #$6, D3         *ADDI?
00001312  6700 004A                462              BEQ     opADDI          *
00001316  B63C 000A                463              CMP.B   #$A, D3         *EORI?
0000131A  6700 0054                464              BEQ     opEORI          *
0000131E  B63C 000C                465              CMP.B   #$C, D3         *CMPI?
00001322  6600 0D4C                466              BNE     BADINST         *BADINST  
00001326                           467  
00001326                           468  **CMP Immediate Data****************************************          
00001326  14FC 0043                469  opCMPI      MOVE.B  #$43, (A2)+     *'C' to buffer
0000132A  14FC 004D                470              MOVE.B  #$4D, (A2)+     *'M' to buffer
0000132E  14FC 0050                471              MOVE.B  #$50, (A2)+     *'P' to buffer
00001332  4EF9 00001382            472  endopCMPI   JMP     op0000cont
00001338                           473  
00001338                           474  **OR Immediate Data*****************************************          
00001338  14FC 004F                475  opORI       MOVE.B  #$4F, (A2)+     *'O' to buffer
0000133C  14FC 0052                476              MOVE.B  #$52, (A2)+     *'R' to buffer
00001340  4EF9 00001382            477  endopORI    JMP     op0000cont
00001346                           478  **AND Immediate Data****************************************
00001346  14FC 0041                479  opANDI      MOVE.B  #$41, (A2)+     *'A' to buffer
0000134A  14FC 004E                480              MOVE.B  #$4E, (A2)+     *'N' to buffer
0000134E  14FC 0044                481              MOVE.B  #$44, (A2)+     *'D' to buffer
00001352  4EF9 00001382            482  endopANDI   JMP     op0000cont
00001358                           483  **SUB Immediate Data****************************************
00001358                           484  opSUBI
00001358  4EF9 00001382            485  endopSUBI   JMP     op0000cont
0000135E                           486  **ADD Immediate Data****************************************
0000135E  14FC 0041                487  opADDI      MOVE.B  #$41, (A2)+     *'A' to buffer
00001362  14FC 0044                488              MOVE.B  #$44, (A2)+     *'D' to buffer
00001366  14FC 0044                489              MOVE.B  #$44, (A2)+     *'D' to buffer
0000136A  4EF9 00001382            490  endopADDI   JMP     op0000cont
00001370                           491  **EOR Immediate Data****************************************
00001370  14FC 0045                492  opEORI      MOVE.B  #$45, (A2)+     *'E' to buffer
00001374  14FC 004F                493              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001378  14FC 0052                494              MOVE.B  #$52, (A2)+     *'R' to buffer
0000137C  4EF9 00001382            495  endopEORI   JMP     op0000cont
00001382                           496  **Fill in the rest******************************************
00001382  14FC 0049                497  op0000cont  MOVE.B  #$49, (A2)+     *'I' to buffer
00001386  14FC 002E                498              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000138A  4EB9 00001F54            499              JSR     SIZE2BUFFER
00001390  14FC 0009                500              MOVE.B  #$9, (A2)+      *tab to buffer
00001394                           501              *MOVE.B  #$20, (A2)+     *' ' to buffer
00001394  4EB9 00002038            502              JSR     ADDR2BUFFER
0000139A  14FC 002C                503              MOVE.B  #$2C, (A2)+     *',' to buffer
0000139E  4EB9 00001D7C            504              JSR     GETEA
000013A4  4E75                     505  endop0000   RTS
000013A6                           506  *===========================================================
000013A6                           507  
000013A6                           508  
000013A6                           509  ************************************************************  
000013A6                           510  *OPCODE: 0001
000013A6                           511  *MOVE.B
000013A6                           512  opcode0001:
000013A6  14FC 004D                513              MOVE.B  #$4D, (A2)+     *'M' to buffer
000013AA  14FC 004F                514              MOVE.B  #$4F, (A2)+     *'O' to buffer
000013AE  14FC 0056                515              MOVE.B  #$56, (A2)+     *'V' to buffer
000013B2  14FC 0045                516              MOVE.B  #$45, (A2)+     *'E' to buffer
000013B6  14FC 002E                517              MOVE.B  #$2E, (A2)+     *'.' to buffer
000013BA  14FC 0042                518              MOVE.B  #$42, (A2)+     *'B' to buffer
000013BE  14FC 0020                519              MOVE.B  #$20, (A2)+     *' ' to buffer
000013C2  14FC 0020                520              MOVE.B  #$20, (A2)+     *' ' to buffer
000013C6  4EB9 00001D7C            521              JSR     GETEA
000013CC  0C05 0000                522              CMPI.B  #%0, D5
000013D0  6700 0012                523              BEQ     endop0001   
000013D4  14FC 002C                524              MOVE.B  #$2C, (A2)+     *',' to buffer
000013D8  4EB9 00001ECE            525              JSR     SWAPREG         *swap destination and source regs
000013DE  4EB9 00001D7C            526              JSR     GETEA  
000013E4  4E75                     527  endop0001   RTS                     *return
000013E6                           528  
000013E6                           529  *===========================================================
000013E6                           530  
000013E6                           531  ************************************************************  
000013E6                           532  *OPCODE: 0010
000013E6                           533  *MOVE.L, MOVEA.L
000013E6                           534  opcode0010:
000013E6  14FC 004D                535              MOVE.B  #$4D, (A2)+     *'M' to buffer
000013EA  14FC 004F                536              MOVE.B  #$4F, (A2)+     *'O' to buffer
000013EE  14FC 0056                537              MOVE.B  #$56, (A2)+     *'V' to buffer
000013F2  14FC 0045                538              MOVE.B  #$45, (A2)+     *'E' to buffer
000013F6  3607                     539              MOVE.W   D7, D3         *Check the destination mode to see if addressing*
000013F8  C6BC 000001C0            540              AND.L    #$01C0, D3 
000013FE  0C83 00000040            541              CMPI.L   #$0040, D3     *compares to see if addressing mode
00001404  6604                     542              BNE.S    code0010_cont  *branches if destination mode is not addressing register
00001406  14FC 0041                543              MOVE.B  #$41, (A2)+     *'A' to buffer               
0000140A                           544  code0010_cont  
0000140A  14FC 002E                545              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000140E  14FC 004C                546              MOVE.B  #$4C, (A2)+     *'L' to buffer 
00001412                           547                 
00001412                           548  code0010_cont2  
00001412  14FC 0020                549              MOVE.B  #$20, (A2)+     *' ' to buffer
00001416  14FC 0020                550              MOVE.B  #$20, (A2)+     *' ' to buffer    
0000141A  4EB9 00001D7C            551              JSR     GETEA
00001420  0C05 0000                552              CMPI.B  #%0, D5         *check if bad ea
00001424  6700 0012                553              BEQ     endop0010   
00001428  14FC 002C                554              MOVE.B  #$2C, (A2)+     *',' to buffer
0000142C  4EB9 00001ECE            555              JSR     SWAPREG         *swap destination and source regs
00001432  4EB9 00001D7C            556              JSR     GETEA 
00001438                           557  
00001438  4E75                     558  endop0010   RTS
0000143A                           559  *===========================================================
0000143A                           560  
0000143A                           561  ************************************************************  
0000143A                           562  *OPCODE: 0011
0000143A                           563  *MOVE.W,MOVEA.W
0000143A                           564  opcode0011:
0000143A  14FC 004D                565              MOVE.B  #$4D, (A2)+     *'M' to buffer
0000143E  14FC 004F                566              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001442  14FC 0056                567              MOVE.B  #$56, (A2)+     *'V' to buffer
00001446  14FC 0045                568              MOVE.B  #$45, (A2)+     *'E' to buffer
0000144A  3607                     569              MOVE.W   D7, D3         *Check the destination mode to see if addressing*
0000144C  C6BC 000001C0            570              AND.L    #$01C0, D3 
00001452  0C83 00000040            571              CMPI.L   #$0040, D3     *compares to see if addressing mode
00001458  6604                     572              BNE.S    code0011_cont  *branches if destination mode is not addressing register
0000145A  14FC 0041                573              MOVE.B  #$41, (A2)+     *'A' to buffer
0000145E                           574  code0011_cont  
0000145E  14FC 002E                575              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001462  14FC 0057                576              MOVE.B  #$57, (A2)+     *'W' to buffer
00001466                           577              
00001466                           578  code0011_cont2 
00001466  14FC 0020                579              MOVE.B  #$20, (A2)+     *' ' to buffer
0000146A  14FC 0020                580              MOVE.B  #$20, (A2)+     *' ' to buffer
0000146E  4EB9 00001D7C            581              JSR      GETEA
00001474  0C05 0000                582              CMPI.B  #%0, D5         *check if bad ea
00001478  6700 0012                583              BEQ     endop0011   
0000147C  14FC 002C                584              MOVE.B   #$2C, (A2)+     *',' to buffer
00001480  4EB9 00001ECE            585              JSR      SWAPREG         *swap destination and source regs
00001486  4EB9 00001D7C            586              JSR      GETEA 
0000148C  4E75                     587  endop0011   RTS
0000148E                           588  *===========================================================
0000148E                           589  
0000148E                           590  ************************************************************  
0000148E                           591  *OPCODE: 0100
0000148E                           592  *CLR,LEA,JMP,JSR,MOVEM,NEG*,NOP*,NOT*,RTS
0000148E                           593  * '*' - instructions, not required but included 
0000148E                           594  opcode0100: 
0000148E                           595  **MOVEM Check***********************************************
0000148E  2607                     596              MOVE.L  D7, D3
00001490  C67C 0200                597              AND.W   #%0000001000000000, D3 *isolate bit 9
00001494  EC43                     598              ASR.W   #$6, D3 
00001496  0C03 0000                599              CMPI.B  #%0, D3
0000149A  6600 001C                600              BNE     notMOVEM         *check JSR bit 
0000149E  2607                     601              MOVE.L  D7, D3
000014A0  C67C 0E00                602              AND.W   #%0000111000000000, D3 *isolate bits 11 - 9
000014A4  EC43                     603              ASR.W   #$6, D3
000014A6  E843                     604              ASR.W   #$4, D3
000014A8  0C43 0003                605              CMPI.W  #%011, D3
000014AC  6700 005C                606              BEQ     op0100MOVEM     
000014B0  0C43 0002                607              CMPI.W  #%010, D3       *
000014B4  6700 0054                608              BEQ     op0100MOVEM     *
000014B8                           609                                      
000014B8  2607                     610  notMOVEM    MOVE.L  D7, D3
000014BA  0243 0100                611              ANDI.W  #$0100,D3       *
000014BE  B67C 0100                612              CMP.W   #$0100,D3       *LEA?
000014C2  6700 0020                613              BEQ     opLEA           *
000014C6  3607                     614              MOVE.W  D7,D3           *move to utility
000014C8  E04B                     615              LSR.W   #8,D3           *shift
000014CA  0243 000F                616              ANDI.W  #$000F,D3       *isolate
000014CE  C6FC 0006                617              MULU    #6,D3           *offset for jump table
000014D2  4DF9 000016BC            618              LEA     op0100table,A6  *
000014D8  4EB6 3000                619              JSR     00(A6,D3)       *jump
000014DC  4EF9 000014E2            620              JMP     endop0100       *
000014E2  4E75                     621  endop0100   RTS         
000014E4                           622  **LEA******************************************************* 
000014E4  14FC 004C                623  opLEA       MOVE.B  #$4C, (A2)+     *'L' to buffer
000014E8  14FC 0045                624              MOVE.B  #$45, (A2)+     *'E' to buffer
000014EC  14FC 0041                625              MOVE.B  #$41, (A2)+     *'A' to buffer
000014F0  14FC 0009                626              MOVE.B  #$9, (A2)+      *tab to buffer
000014F4                           627              *MOVE.B  #$20, (A2)+     *' ' to buffer
000014F4  4EB9 00001D7C            628              JSR     GETEA
000014FA  14FC 002C                629              MOVE.B  #$2C,(A2)+      *',' to buffer
000014FE  14FC 0041                630              MOVE.B  #$41,(A2)+      *'A' to buffer
00001502  4EB9 00001F42            631              JSR     REG2BUFFER
00001508  4E75                     632  endopLEA    RTS                     *return   
0000150A                           633  **0100 MOVEM***********************************************
0000150A                           634  op0100MOVEM     
0000150A  4242                     635              CLR D2
0000150C  4243                     636              CLR D3
0000150E  3607                     637              MOVE.W D7, D3
00001510  3603                     638              MOVE.W D3, D3
00001512  14FC 004D                639              MOVE.B  #$4D, (A2)+     *'M' to buffer
00001516  14FC 004F                640              MOVE.B  #$4F, (A2)+     *'O' to buffer
0000151A  14FC 0056                641              MOVE.B  #$56, (A2)+     *'V' to buffer
0000151E  14FC 0045                642              MOVE.B  #$45, (A2)+     *'E' to buffer
00001522  14FC 004D                643              MOVE.B  #$4D, (A2)+     *'M' to buffer
00001526  14FC 002E                644              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000152A                           645              
0000152A  C67C 0040                646              AND.W #%0000000001000000, D3   *isolate 6 bit
0000152E  EC43                     647              ASR.W #$6, D3
00001530  4EB9 00001558            648              JSR    MOVEMSIZE2BUFFER
00001536  14FC 0020                649              MOVE.B  #$20, (A2)+     *' ' to buffer
0000153A  14FC 0020                650              MOVE.B  #$20, (A2)+     *' ' to buffer
0000153E  3607                     651              MOVE D7, D3
00001540  C67C 0400                652              AND.W #%0000010000000000, D3 *Checks the direction
00001544  E043                     653              ASR.W #$8, D3
00001546  E443                     654              ASR.W #$2, D3
00001548  C6FC 0006                655              MULU #$6, D3
0000154C  4DF9 00001584            656              LEA MOVEmem_table, A6
00001552  4EB6 3000                657              JSR 0(A6, D3)           *memory direction jump table
00001556                           658              *JMP     print_b         *RTS is broken
00001556  4E75                     659              RTS
00001558                           660              
00001558                           661  ************************************************************
00001558                           662  *MOVEMSIZE2BUFFER
00001558                           663  *Description: Isolates and converts the instruction size for MOVEM 
00001558                           664  *             and sends it to the output buffer. bit 6
00001558                           665  *Registers Used:
00001558                           666  *D3 - size bit
00001558                           667  *A2 - buffer address of decoded instruction
00001558                           668  ************************************************************
00001558                           669  MOVEMSIZE2BUFFER:
00001558                           670              
00001558  B63C 0000                671              CMP.B   #%00, D3        *word
0000155C  6700 0016                672              BEQ     ms2bW            *
00001560  B63C 0001                673              CMP.B   #%01, D3        *long
00001564  6700 0018                674              BEQ     ms2bL           *
00001568  4EF9 00002070            675              JMP     BADINST         *bad instruction
0000156E  4EF9 00001582            676              JMP     endms2b          *
00001574                           677                                      *
00001574  14FC 0057                678  ms2bW       MOVE.B  #$57,(A2)+      *'W' to buffer
00001578  4EF9 00001582            679              JMP     endms2b          *
0000157E  14FC 004C                680  ms2bL       MOVE.B  #$4C,(A2)+      *'L' to buffer
00001582  4E75                     681  endms2b     RTS                     *return
00001584                           682   
00001584                           683  **MOVEM Direction Table************************************ 
00001584                           684  MOVEmem_table  
00001584  4EF9 00001592            685                  JMP Reg2Mem
0000158A  4EF9 000015B8            686                  JMP Mem2Reg
00001590  4E75                     687                  RTS   
00001592                           688  **MOVEM Register to Memory*********************************
00001592                           689  Reg2Mem
00001592                           690                 *MOVE.W D1, D0             
00001592  4EB9 000016B8            691                 JSR GETMWORD             *loads next word (A0) to D1
00001598  4EB9 000015E0            692                 JSR Get_PRE_DReg_List    *get bits 7 - 0
0000159E  4EB9 00001612            693                 JSR Get_PRE_AReg_List    *get bits 15 - 8
000015A4                           694                 
000015A4  153C 00FF                695                 MOVE.B #$FF, -(A2)
000015A8  14FC 002C                696                 MOVE.B #$2C, (A2)+
000015AC  14FC 0020                697                 MOVE.B #$20, (A2)+
000015B0                           698                 
000015B0  4EB9 00001D7C            699                 JSR      GETEA
000015B6  4E75                     700  endReg2Mem     RTS
000015B8                           701  **MOVEM Memory to Register********************************* 
000015B8                           702  Mem2Reg
000015B8  4EB9 00001D7C            703                 JSR      GETEA
000015BE  14FC 002C                704                 MOVE.B #$2C, (A2)+ *',' to buffer
000015C2  14FC 0020                705                 MOVE.B #$20, (A2)+   *' ' to buffer
000015C6                           706                 
000015C6  4EB9 000016B8            707                 JSR GETMWORD
000015CC  3001                     708                 MOVE.W D1, D0        *D1 mask, D0 copy of mask
000015CE                           709        
000015CE  4EB9 0000164A            710                 JSR Get_POST_AReg_List
000015D4                           711                 *MOVE.W D0, D1
000015D4  4EB9 00001684            712                 JSR Get_POST_DReg_List
000015DA  153C 00FF                713                 MOVE.B #$FF, -(A2)
000015DE  4E75                     714                 RTS    
000015E0                           715  **Predec Register*****************************************
000015E0                           716  Get_PRE_DReg_List
000015E0  3001                     717                 MOVE.W D1, D0
000015E2  E048                     718                 LSR #$8, D0 ** Data Register mask **
000015E4  143C 0000                719                 MOVE.B #$00, D2 ** Preps D2
000015E8  183C 0009                720                 MOVE.B #$09, D4 ** Sets the counter **
000015EC                           721                 
000015EC                           722  loopPRE_Dlist     
000015EC  5304                     723                 SUB.B #$1, D4    *sub from counter
000015EE  B83C 0000                724                 CMP.B #$00, D4   *end?
000015F2  6700 00C2                725                 BEQ end_loop
000015F6  E308                     726                 LSL.B #1, D0
000015F8  6500 0006                727                 BCS printPRE_DReg_List
000015FC  60EE                     728                 BRA loopPRE_Dlist
000015FE  4E75                     729                 RTS
00001600                           730  
00001600                           731  printPRE_DReg_List
00001600  143C 0038                732                 MOVE.B #$38, D2
00001604  9404                     733                 SUB.B D4, D2         
00001606  14FC 0044                734                 MOVE.B #$44, (A2)+
0000160A  14C2                     735                 MOVE.B D2, (A2)+
0000160C  14FC 002F                736                 MOVE.B #$2F, (A2)+
00001610  60DA                     737                 BRA loopPRE_Dlist
00001612                           738  *Predec Address*********************************************               
00001612                           739  Get_PRE_AReg_List
00001612  1001                     740                 MOVE.B D1, D0     ***Moves the address list mask to d4 ***
00001614  143C 0000                741                 MOVE.B #$00, D2  ** Preps D5
00001618  183C 0009                742                 MOVE.B #9, D4    ** Sets the counter to 8 
0000161C                           743                 **ASR #8, D4      ** Shifts the mask for Address Registers **
0000161C                           744  loopPRE_Alist
0000161C  5304                     745                 SUB.B #$01, D4  ** Decrements the counter **
0000161E  B03C 0000                746                 CMP.B #$00, D0
00001622  6700 0092                747                 BEQ end_loop
00001626  B83C 0000                748                 CMP.B #$00, D4  ** Checks the counter **
0000162A  6700 008A                749                 BEQ end_loop   ** Ends the loop when counter is = 0 **
0000162E  E308                     750                 LSL.B #1, D0  ** Shifts mask to the left by one **
00001630  6500 0006                751                 BCS printPRE_AReg_List ** Checks the carry Set bit **
00001634  60E6                     752                 BRA loopPRE_Alist
00001636  4E75                     753                 RTS
00001638                           754  
00001638                           755  printPRE_AReg_List
00001638  143C 0038                756                 MOVE.B #$38, D2
0000163C  9404                     757                 SUB.B D4, D2
0000163E  14FC 0041                758                 MOVE.B #$41, (A2)+
00001642  14C2                     759                 MOVE.B D2, (A2)+
00001644  14FC 002F                760                 MOVE.B #$2F, (A2)+
00001648  60D2                     761                 BRA loopPRE_Alist
0000164A                           762  **Post Address*********************************************
0000164A                           763  Get_POST_AReg_List
0000164A                           764                 
0000164A  E040                     765                 ASR #8, D0
0000164C  143C 0000                766                 MOVE.B #$00, D2  *Preps D2
00001650  183C 0009                767                 MOVE.B #9, D4    *Sets the counter to 8 
00001654                           768  loopPOST_Alist
00001654  5304                     769                 SUB.B #$01, D4   *Decrements the counter
00001656  B03C 0000                770                 CMP.B #$00, D0
0000165A  6700 005A                771                 BEQ end_loop
0000165E  B83C 0000                772                 CMP.B #$00, D4   *Checks the counter
00001662  6700 0052                773                 BEQ end_loop     *Ends the loop when counter is = 0
00001666  E308                     774                 LSL.B #1, D0     *Shifts mask to the left by one
00001668  6500 0006                775                 BCS printPOST_AReg_List ** Checks the carry Set bit
0000166C  60E6                     776                 BRA loopPOST_Alist
0000166E  4E75                     777                 RTS      
00001670                           778                 
00001670                           779  printPOST_AReg_List
00001670  143C 0030                780                 MOVE.B #$30, D2
00001674  D404                     781                 ADD.B D4, D2
00001676  5302                     782                 SUB.B #$1, D2
00001678  14FC 0041                783                 MOVE.B #$41, (A2)+
0000167C  14C2                     784                 MOVE.B D2, (A2)+
0000167E  14FC 002F                785                 MOVE.B #$2F, (A2)+
00001682  60D0                     786                 BRA loopPOST_Alist
00001684                           787  *Post Register*********************************************
00001684                           788  Get_POST_DReg_List
00001684                           789                  
00001684  1001                     790                 MOVE.B D1, D0
00001686  143C 0000                791                 MOVE.B #$00, D2 ** Preps D2
0000168A  183C 0009                792                 MOVE.B #$09, D4 ** Sets the counter **
0000168E                           793                 
0000168E                           794  loopPOST_Dlist     
0000168E  5304                     795                 SUB.B #$1, D4
00001690  B03C 0000                796                 CMP.B #$00, D0
00001694  6700 0020                797                 BEQ end_loop
00001698  E308                     798                 LSL.B #1, D0
0000169A  6500 0006                799                 BCS printPOST_DReg_List
0000169E  60EE                     800                 BRA loopPOST_Dlist
000016A0  4E75                     801                 RTS
000016A2                           802  
000016A2                           803                 
000016A2                           804  printPOST_DReg_List
000016A2  143C 0030                805                 MOVE.B #$30, D2
000016A6  D404                     806                 ADD.B D4, D2
000016A8  5302                     807                 SUB.B #$1, D2
000016AA  14FC 0044                808                 MOVE.B #$44, (A2)+
000016AE  14C2                     809                 MOVE.B D2, (A2)+
000016B0  14FC 002F                810                 MOVE.B #$2F, (A2)+
000016B4  60D8                     811                 BRA loopPOST_Dlist
000016B6                           812  
000016B6  4E75                     813  end_loop        RTS              
000016B8                           814  ***********************************************************
000016B8                           815  *GETMWORD
000016B8                           816  *Description: Get the next word in memory for MOVEM Mask             
000016B8                           817  GETMWORD
000016B8  3218                     818              MOVE.W (A0)+, D1
000016BA  4E75                     819  endGETMWORD RTS
000016BC                           820                  
000016BC                           821  *==========================================================
000016BC                           822  *  ___ _____ _   ___ _____   _____ _   ___ _    ___ 
000016BC                           823  * / __|_   _/_\ | _ \_   _| |_   _/_\ | _ ) |  | __|
000016BC                           824  * \__ \ | |/ _ \|   / | |     | |/ _ \| _ \ |__| _| 
000016BC                           825  * |___/ |_/_/ \_\_|_\ |_|     |_/_/ \_\___/____|___|
000016BC                           826  *                                                  
000016BC                           827  *0100 SECOND LAYER OPCODE TABLE SUBROUTINES 
000016BC                           828  op0100table
000016BC  4EF9 0000171E            829              JMP     op0100_0000   *BADINST          
000016C2  4EF9 00001726            830              JMP     op0100_0001   *BADINST           
000016C8  4EF9 0000172E            831              JMP     op0100_0010   *CLR
000016CE  4EF9 00001754            832              JMP     op0100_0011   *BADINST
000016D4  4EF9 0000175C            833              JMP     op0100_0100   *NEG*
000016DA  4EF9 00001782            834              JMP     op0100_0101   *BADINST
000016E0  4EF9 0000178A            835              JMP     op0100_0110   *NOT*
000016E6  4EF9 000017B0            836              JMP     op0100_0111   *BADINST
000016EC  4EF9 000017B8            837              JMP     op0100_1000   *SWAP*
000016F2  4EF9 000017C0            838              JMP     op0100_1001   *BADINST
000016F8  4EF9 000017C8            839              JMP     op0100_1010   *BADINST
000016FE  4EF9 000017D0            840              JMP     op0100_1011   *BADINST
00001704  4EF9 000017D8            841              JMP     op0100_1100   *BADINST
0000170A  4EF9 000017E0            842              JMP     op0100_1101   *BADINST
00001710  4EF9 000017E8            843              JMP     op0100_1110   *NOP*,JMP,JSR,RTS
00001716  4EF9 0000185C            844              JMP     op0100_1111   *BADINST
0000171C                           845  endop0100table   
0000171C  4E75                     846              RTS                   *return
0000171E                           847  **0000 BADINST**********************************************
0000171E  4EB9 00002070            848  op0100_0000 JSR     BADINST
00001724                           849  endop0100_0000
00001724  4E75                     850              RTS
00001726                           851  **0001 BADINST**********************************************          
00001726  4EB9 00002070            852  op0100_0001 JSR     BADINST          
0000172C                           853  endop0100_0001
0000172C  4E75                     854              RTS            
0000172E                           855  **0010 CLR************************************************** 
0000172E  14FC 0043                856  op0100_0010 MOVE.B  #$43, (A2)+     *'C' to buffer
00001732  14FC 004C                857              MOVE.B  #$4C, (A2)+     *'L' to buffer
00001736  14FC 0052                858              MOVE.B  #$52, (A2)+     *'R' to buffer
0000173A  14FC 002E                859              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000173E  4EB9 00001F54            860              JSR     SIZE2BUFFER
00001744  14FC 0020                861              MOVE.B  #$20, (A2)+     *' ' to buffer
00001748  14FC 0020                862              MOVE.B  #$20, (A2)+     *' ' to buffer
0000174C  4EB9 00001D7C            863              JSR     GETEA
00001752                           864  endop0100_0010    
00001752  4E75                     865              RTS                     *return
00001754                           866  **0011 BADINST**********************************************          
00001754  4EB9 00002070            867  op0100_0011 JSR     BADINST          
0000175A                           868  endop0100_0011
0000175A  4E75                     869              RTS  
0000175C                           870  **0100 NEG************************************************** 
0000175C  14FC 004E                871  op0100_0100 MOVE.B  #$4E, (A2)+     *'N' to buffer
00001760  14FC 0045                872              MOVE.B  #$45, (A2)+     *'E' to buffer
00001764  14FC 0047                873              MOVE.B  #$47, (A2)+     *'G' to buffer
00001768  14FC 002E                874              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000176C  4EB9 00001F54            875              JSR     SIZE2BUFFER
00001772  14FC 0020                876              MOVE.B  #$20, (A2)+     *' ' to buffer
00001776  14FC 0020                877              MOVE.B  #$20, (A2)+     *' ' to buffer
0000177A  4EB9 00001D7C            878              JSR     GETEA
00001780                           879  endop0100_0100   
00001780  4E75                     880              RTS                     *return
00001782                           881  **0101 BADINST**********************************************          
00001782  4EB9 00002070            882  op0100_0101 JSR     BADINST          
00001788                           883  endop0100_0101
00001788  4E75                     884              RTS  
0000178A                           885  **0110 NOT************************************************** 
0000178A                           886  op0100_0110 
0000178A  14FC 004E                887              MOVE.B  #$4E, (A2)+     *'N' to buffer
0000178E  14FC 004F                888              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001792  14FC 0054                889              MOVE.B  #$54, (A2)+     *'T' to buffer
00001796  14FC 002E                890              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000179A  4EB9 00001F54            891              JSR     SIZE2BUFFER
000017A0  14FC 0020                892              MOVE.B  #$20, (A2)+     *' ' to buffer
000017A4  14FC 0020                893              MOVE.B  #$20, (A2)+     *' ' to buffer
000017A8  4EB9 00001D7C            894              JSR     GETEA
000017AE                           895  endop0100_0110
000017AE  4E75                     896              RTS                     *return
000017B0                           897  **0111 BADINST**********************************************          
000017B0  4EB9 00002070            898  op0100_0111 JSR     BADINST          
000017B6                           899  endop0100_0111
000017B6  4E75                     900              RTS 
000017B8                           901  **1000 SWAP*************************************************          
000017B8  4EB9 00002070            902  op0100_1000 JSR     BADINST     *SWAP not supported     
000017BE                           903  endop0100_1000
000017BE  4E75                     904              RTS  
000017C0                           905  **1001 BADINST**********************************************           
000017C0  4EB9 00002070            906  op0100_1001 JSR     BADINST          
000017C6                           907  endop0100_1001
000017C6  4E75                     908              RTS 
000017C8                           909  **1010 BADINST**********************************************           
000017C8  4EB9 00002070            910  op0100_1010 JSR     BADINST          
000017CE                           911  endop0100_1010
000017CE  4E75                     912              RTS 
000017D0                           913  **1011 BADINST**********************************************           
000017D0  4EB9 00002070            914  op0100_1011 JSR     BADINST          
000017D6                           915  endop0100_1011
000017D6  4E75                     916              RTS 
000017D8                           917  **1100 BADINST**********************************************           
000017D8  4EB9 00002070            918  op0100_1100 JSR     BADINST          
000017DE                           919  endop0100_1100
000017DE  4E75                     920              RTS 
000017E0                           921  **1101 BADINST**********************************************           
000017E0  4EB9 00002070            922  op0100_1101 JSR     BADINST          
000017E6                           923  endop0100_1101
000017E6  4E75                     924              RTS 
000017E8                           925  ***1110 NOP*,RTS,JSR,JMP************************************
000017E8                           926  op0100_1110:                       
000017E8  4EB9 00001E80            927              JSR     GETSIZE
000017EE  0C03 0002                928              CMPI.B  #%10, D3
000017F2  6700 0036                929              BEQ     opJSR
000017F6  0C03 0003                930              CMPI.B  #%11, D3
000017FA  6700 0046                931              BEQ     opJMP
000017FE  BE7C 4E75                932              CMP.W   #$4E75, D7      *absolute binary value
00001802  6700 0018                933              BEQ     opRTS           * 0100 1110 0111 0101
00001806  BE7C 4E71                934              CMP.W   #$4E71, D7      *absolute binary value
0000180A  6600 0864                935              BNE     BADINST         * 0100 1110 0111 0001
0000180E                           936  **NOP*******************************************************            
0000180E  14FC 004E                937  opNOP       MOVE.B  #$4E, (A2)+     *'N' to buffer
00001812  14FC 004F                938              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001816  14FC 0050                939              MOVE.B  #$50, (A2)+     *'P' to buffer
0000181A  4E75                     940  endopNOP    RTS                     *return
0000181C                           941  **RTS*******************************************************
0000181C  14FC 0052                942  opRTS       MOVE.B  #$52, (A2)+     *'R' to buffer
00001820  14FC 0054                943              MOVE.B  #$54, (A2)+     *'T' to buffer
00001824  14FC 0053                944              MOVE.B  #$53, (A2)+     *'S' to buffer
00001828  4E75                     945  endopRTS    RTS                     *return
0000182A                           946  **JSR*******************************************************           
0000182A  14FC 004A                947  opJSR       MOVE.B  #$4A, (A2)+     *'J' to buffer
0000182E  14FC 0053                948              MOVE.B  #$53, (A2)+     *'S' to buffer
00001832  14FC 0052                949              MOVE.B  #$52, (A2)+     *'R' to buffer
00001836  14FC 0009                950              MOVE.B  #$9, (A2)+      *tab to buffer
0000183A  4EB9 00001D7C            951              JSR     GETEA
00001840  4E75                     952  endopJSR    RTS                     *return
00001842                           953  **JMP*******************************************************
00001842  14FC 004A                954  opJMP       MOVE.B  #$4A, (A2)+     *'J' to buffer
00001846  14FC 004D                955              MOVE.B  #$4D, (A2)+     *'M' to buffer
0000184A  14FC 0050                956              MOVE.B  #$50, (A2)+     *'P' to buffer
0000184E  14FC 0020                957              MOVE.B  #$20, (A2)+     *' ' to buffer
00001852  4EB9 00001D7C            958              JSR     GETEA
00001858  4E75                     959  endopJMP    RTS                     *return                                 
0000185A                           960  endop0100_1110          
0000185A  4E75                     961              RTS                     *return           
0000185C                           962  **1111 BADINST*********************************************          
0000185C  4EB9 00002070            963  op0100_1111 JSR     BADINST          
00001862                           964  endop0100_1111
00001862  4E75                     965              RTS 
00001864                           966  ***********************************************************
00001864                           967  *  ___ _  _ ___    _____ _   ___ _    ___ 
00001864                           968  * | __| \| |   \  |_   _/_\ | _ ) |  | __|
00001864                           969  * | _|| .` | |) |   | |/ _ \| _ \ |__| _| 
00001864                           970  * |___|_|\_|___/    |_/_/ \_\___/____|___|
00001864                           971  *                                                 
00001864                           972  ************************************************************  
00001864                           973  *OPCODE: 0101
00001864                           974  *BAD INSTRUCTION
00001864  4EF9 00002070            975  opcode0101: JMP     BADINST
0000186A  4E75                     976  endop0101   RTS
0000186C                           977  *===========================================================
0000186C                           978  
0000186C                           979  ************************************************************  
0000186C                           980  *OPCODE: 0110
0000186C                           981  *BCC,BGT,BLE
0000186C                           982  opcode0110: 
0000186C  3607                     983              MOVE.W  D7, D3          *move to utility
0000186E  C67C 0F00                984              AND.W   #%0000111100000000, D3  *isoltate condition, bits 11 - 8
00001872  E043                     985              ASR     #$8, D3         *shifts
00001874  B67C 0004                986              CMP     #$4, D3         *BCC?
00001878  6700 0012                987              BEQ     opBCC
0000187C  B67C 000E                988              CMP     #$E, D3         *BGT?
00001880  6700 0038                989              BEQ     opBGT
00001884  B67C 000F                990              CMP     #$F, D3         *BLE?
00001888  6700 005E                991              BEQ     opBLE
0000188C                           992  
0000188C                           993  **BCC*******************************************************
0000188C  14FC 0042                994  opBCC       MOVE.B #$42, (A2)+
00001890  14FC 0043                995              MOVE.B #$43, (A2)+
00001894  14FC 0043                996              MOVE.B #$43, (A2)+
00001898  14FC 0009                997              MOVE.B #$09, (A2)+
0000189C                           998                
0000189C  4243                     999              CLR D3
0000189E  3607                    1000              MOVE.W D7, D3
000018A0  C67C 00FF               1001              AND.W #%0000000011111111, D3
000018A4  2808                    1002              MOVE.L A0, D4
000018A6  B67C 0000               1003              CMP #$00, D3
000018AA  6700 008C               1004              BEQ DISP16
000018AE  B67C 00FF               1005              CMP #$FF, D3
000018B2  6700 0062               1006              BEQ DISP32
000018B6  6D00 0096               1007              BLT DISP8
000018BA                          1008  **BGT*******************************************************  
000018BA  14FC 0042               1009  opBGT       MOVE.B #$42, (A2)+
000018BE  14FC 0047               1010              MOVE.B #$47, (A2)+
000018C2  14FC 0054               1011              MOVE.B #$54, (A2)+
000018C6  14FC 0009               1012              MOVE.B #$09, (A2)+
000018CA                          1013                
000018CA  4243                    1014              CLR D3
000018CC  3607                    1015              MOVE.W D7, D3
000018CE  C67C 00FF               1016              AND.W #%0000000011111111, D3
000018D2  2808                    1017              MOVE.L A0, D4
000018D4  B67C 0000               1018              CMP #$00, D3
000018D8  6700 005E               1019              BEQ DISP16
000018DC  B67C 00FF               1020              CMP #$FF, D3
000018E0  6700 0034               1021              BEQ DISP32
000018E4  6D00 0068               1022              BLT DISP8
000018E8                          1023  **BLE******************************************************* 
000018E8  14FC 0042               1024  opBLE       MOVE.B #$42, (A2)+
000018EC  14FC 004C               1025              MOVE.B #$4C, (A2)+
000018F0  14FC 0045               1026              MOVE.B #$45, (A2)+
000018F4  14FC 0009               1027              MOVE.B #$09, (A2)+
000018F8                          1028                
000018F8  4243                    1029              CLR D3
000018FA  3607                    1030              MOVE.W D7, D3
000018FC  C67C 00FF               1031              AND.W #%0000000011111111, D3
00001900  2808                    1032              MOVE.L A0, D4
00001902  B67C 0000               1033              CMP #$00, D3
00001906  6700 0030               1034              BEQ DISP16
0000190A  B67C 00FF               1035              CMP #$FF, D3
0000190E  6700 0006               1036              BEQ DISP32
00001912  6D00 003A               1037              BLT DISP8
00001916                          1038  **Displacement 32 bits***************************************               
00001916  4EB8 16B8               1039  DISP32      JSR GETMWORD
0000191A  3001                    1040              MOVE.W D1, D0
0000191C  E180                    1041              ASL.L #$8, D0
0000191E  E180                    1042              ASL.L #$8, D0
00001920  4EB8 16B8               1043              JSR GETMWORD
00001924  D280                    1044              ADD.L D0, D1
00001926  D881                    1045              ADD.L D1, D4
00001928  2648                    1046              MOVEA.L   A0, A3  *store  A0
0000192A  3044                    1047              MOVEA.W   D4, A0
0000192C  4EB8 1220               1048              JSR       ADDRESS
00001930  204B                    1049              MOVEA.L   A3, A0
00001932                          1050  
00001932  4EF9 00001960           1051              JMP       endop0110
00001938                          1052  **Displacement 16 bits***************************************             
00001938  4EB8 16B8               1053  DISP16      JSR GETMWORD
0000193C  D841                    1054              ADD.W D1, D4
0000193E  2648                    1055              MOVEA.L   A0, A3  *store  A0
00001940  3044                    1056              MOVEA.W   D4, A0
00001942  4EB8 1220               1057              JSR       ADDRESS
00001946  204B                    1058              MOVEA.L   A3, A0
00001948  4EF9 00001960           1059              JMP       endop0110   
0000194E                          1060  **Displacement 8 bits**************************************** 
0000194E  9843                    1061  DISP8       SUB D3, D4
00001950  2648                    1062              MOVEA.L   A0, A3  *store  A0
00001952  3044                    1063              MOVEA.W   D4, A0
00001954  4EB8 1220               1064              JSR       ADDRESS
00001958  204B                    1065              MOVEA.L   A3, A0
0000195A                          1066  
0000195A  4EF9 00001960           1067              JMP       endop0110  
00001960                          1068  **END********************************************************               
00001960  4E75                    1069  endop0110   RTS
00001962                          1070  *===========================================================
00001962                          1071  
00001962                          1072  ************************************************************  
00001962                          1073  *OPCODE: 0111
00001962                          1074  *BAD INSTRUCTION
00001962  4EF9 00002070           1075  opcode0111: JMP     BADINST
00001968  4E75                    1076  endop0111   RTS
0000196A                          1077  *===========================================================
0000196A                          1078  
0000196A                          1079  ************************************************************  
0000196A                          1080  *OPCODE: 1000
0000196A                          1081  *OR 
0000196A                          1082  opcode1000: 
0000196A  2607                    1083              MOVE.L  D7, D3
0000196C  EC8B                    1084              LSR.L   #6, D3
0000196E  0243 0003               1085              ANDI.W  #$03, D3
00001972  B63C 0003               1086              CMP.B   #$3, D3
00001976  6600 0008               1087              BNE     opOR
0000197A  4EF9 00002070           1088              JMP     BADINST
00001980  14FC 004F               1089  opOR        MOVE.B  #$4F, (A2)+     *'O' to buffer
00001984  14FC 0052               1090              MOVE.B  #$52, (A2)+     *'R' to buffer
00001988  14FC 002E               1091              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000198C  4EB9 00001F54           1092              JSR     SIZE2BUFFER     *size to buffer
00001992  14FC 0020               1093              MOVE.B  #$20, (A2)+     *' ' to buffer
00001996  14FC 0020               1094              MOVE.B  #$20, (A2)+     *' ' to buffer
0000199A  4EB9 00001E8A           1095              JSR     GETDIRECTION    *direction bit 0 = EA; 1 = regs
000019A0  0C03 0000               1096              CMPI.B  #%0, D3         *EA first?
000019A4  6600 001C               1097              BNE     opOR01          
000019A8  4EB9 00001D7C           1098              JSR     GETEA
000019AE  14FC 002C               1099              MOVE.B  #$2C,(A2)+      *',' to buffer
000019B2  14FC 0044               1100              MOVE.B  #$44,(A2)+      *'D' to buffer
000019B6  4EB9 00001F42           1101              JSR     REG2BUFFER
000019BC  4EF9 000019D6           1102              JMP     endop1000
000019C2                          1103   
000019C2  14FC 0044               1104  opOR01      MOVE.B  #$44,(A2)+      *'D' to buffer
000019C6  4EB9 00001F42           1105              JSR     REG2BUFFER            
000019CC  14FC 002C               1106              MOVE.B  #$2C,(A2)+      *',' to buffer
000019D0  4EB9 00001D7C           1107              JSR     GETEA
000019D6  4E75                    1108  endop1000   RTS
000019D8                          1109  *===========================================================
000019D8                          1110  
000019D8                          1111  ************************************************************ 
000019D8                          1112  *OPCODE: 1001
000019D8                          1113  *SUB, SUBA
000019D8                          1114  opcode1001:
000019D8  14FC 0053               1115              MOVE.B  #$53, (A2)+     *'S' to buffer
000019DC  14FC 0055               1116              MOVE.B  #$55, (A2)+     *'U' to buffer
000019E0  14FC 0042               1117              MOVE.B  #$42, (A2)+     *'B' to buffer
000019E4  4EB9 00001E80           1118              JSR     GETSIZE         *get the instruction size (OPMODE)
000019EA  B63C 0003               1119              CMP.B   #%11, D3        *11 = SUBA  
000019EE  6600 004A               1120              BNE     opsubSub
000019F2  14FC 0041               1121              MOVE.B  #$41, (A2)+     *'A' to buffer
000019F6  14FC 002E               1122              MOVE.B  #$2E, (A2)+     *'.' to buffer
000019FA  3607                    1123              MOVE.W  D7, D3          *move to utility
000019FC  E08B                    1124              LSR.L   #8, D3          *shift
000019FE  0243 0001               1125              ANDI.W  #$0001, D3      *isolate
00001A02  B63C 0001               1126              CMP.B   #%1, D3         *long?
00001A06  6700 000C               1127              BEQ     opsubL          *
00001A0A  14FC 0057               1128              MOVE.B  #$57, (A2)+     *'W' to buffer
00001A0E  4EF9 00001A18           1129              JMP     opsubSuba
00001A14                          1130  **SUBA******************************************************            
00001A14  14FC 004C               1131  opsubL      MOVE.B  #$4C, (A2)+     *'L' to buffer
00001A18  14FC 0020               1132  opsubSuba   MOVE.B  #$20, (A2)+     *' ' to buffer    
00001A1C  14FC 0020               1133              MOVE.B  #$20, (A2)+     *' ' to buffer
00001A20  4EB9 00001D7C           1134              JSR     GETEA           *get effective address
00001A26  14FC 002C               1135              MOVE.B  #$2C,(A2)+      *',' to buffer
00001A2A  14FC 0041               1136              MOVE.B  #$41,(A2)+      *'A' to buffer
00001A2E  4EB9 00001F42           1137              JSR     REG2BUFFER      *get the register number
00001A34  4EF9 00001A84           1138              JMP     endop1001       *return
00001A3A                          1139  **SUB*EA>>Register****************************************** 
00001A3A  14FC 002E               1140  opsubSub    MOVE.B  #$2E, (A2)+     *'.' to buffer
00001A3E  4EB9 00001F54           1141              JSR     SIZE2BUFFER     *send size to buffer
00001A44  14FC 0009               1142              MOVE.B  #$09, (A2)+     *tab
00001A48  4EB9 00001E8A           1143              JSR     GETDIRECTION    *isolate
00001A4E  B63C 0000               1144              CMP.B   #%0, D3         *direction bit 0 = EA; 1 = regs
00001A52  6600 001C               1145              BNE     opsubSubR         
00001A56  4EB9 00001D7C           1146              JSR     GETEA           *get effective address
00001A5C  14FC 002C               1147              MOVE.B  #$2C,(A2)+      *',' to buffer   
00001A60  14FC 0044               1148              MOVE.B  #$44,(A2)+      *'D' to buffer
00001A64  4EB9 00001F42           1149              JSR     REG2BUFFER      *get the register number
00001A6A  4EF9 00001A84           1150              JMP     endop1001       *return
00001A70                          1151  **SUB*Register>>EA******************************************            
00001A70  14FC 0044               1152  opsubSubR   MOVE.B  #$44,(A2)+      *'D' to buffer
00001A74  4EB9 00001F42           1153              JSR     REG2BUFFER      *get the register number
00001A7A  14FC 002C               1154              MOVE.B  #$2C,(A2)+      *',' to buffer
00001A7E  4EB9 00001D7C           1155              JSR     GETEA           *get effective address
00001A84  4E75                    1156  endop1001   RTS                     *return
00001A86                          1157  *===========================================================
00001A86                          1158                                                         
00001A86                          1159  ************************************************************  
00001A86                          1160  *OPCODE: 1010
00001A86                          1161  *BAD INSTRUCTION
00001A86  4EF9 00002070           1162  opcode1010: JMP     BADINST
00001A8C  4E75                    1163  endop1010   RTS
00001A8E                          1164  *===========================================================
00001A8E                          1165  
00001A8E                          1166  ************************************************************  
00001A8E                          1167  *OPCODE: 1011
00001A8E                          1168  *CMP,CMPA
00001A8E                          1169  *EOR is not applicable to this assignment and will be 
00001A8E                          1170  *regarded as a bad instruction
00001A8E                          1171  opcode1011: 
00001A8E  4EB9 00001E80           1172              JSR     GETSIZE
00001A94  0C03 0003               1173              CMPI.B   #%11, D3
00001A98  6600 0040               1174              BNE     opcmp
00001A9C                          1175  **CMPA******************************************************             
00001A9C  14FC 0043               1176  opCMPA      MOVE.B  #$43, (A2)+     *'C' to buffer
00001AA0  14FC 004D               1177              MOVE.B  #$4D, (A2)+     *'M' to buffer
00001AA4  14FC 0050               1178              MOVE.B  #$50, (A2)+     *'P' to buffer
00001AA8  14FC 0041               1179              MOVE.B  #$41, (A2)+     *'A' to buffer
00001AAC  14FC 002E               1180              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001AB0  2607                    1181              MOVE.L  D7, D3
00001AB2  14FC 0020               1182              MOVE.B  #$20, (A2)+     *' ' to buffer
00001AB6  14FC 0020               1183              MOVE.B  #$20, (A2)+     *' ' to buffer
00001ABA                          1184              
00001ABA  4EB9 00001F54           1185              JSR     SIZE2BUFFER
00001AC0  4EB9 00001D7C           1186              JSR     GETEA
00001AC6  14FC 002C               1187              MOVE.B  #$2C, (A2)+     *',' to buffer
00001ACA  14FC 0041               1188              MOVE.B  #$41, (A2)+     *'A' to buffer
00001ACE  4EB9 00001F42           1189              JSR     REG2BUFFER
00001AD4  4EF9 00001B28           1190              JMP     endop1011
00001ADA                          1191  **CMP*******************************************************             
00001ADA  2607                    1192  opCMP       MOVE.L  D7, D3
00001ADC  4EB9 00001E8A           1193              JSR     GETDIRECTION
00001AE2  0C03 0000               1194              CMPI.B   #%0, D3
00001AE6  6600 003A               1195              BNE     opeor
00001AEA                          1196  
00001AEA  14FC 0043               1197              MOVE.B  #$43, (A2)+     *'C' to buffer
00001AEE  14FC 004D               1198              MOVE.B  #$4D, (A2)+     *'M' to buffer
00001AF2  14FC 0050               1199              MOVE.B  #$50, (A2)+     *'P' to buffer
00001AF6  14FC 002E               1200              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001AFA  4EB9 00001F54           1201              JSR     SIZE2BUFFER
00001B00  14FC 0020               1202              MOVE.B  #$20, (A2)+     *' ' to buffer
00001B04  14FC 0020               1203              MOVE.B  #$20, (A2)+     *' ' to buffer
00001B08  4EB9 00001D7C           1204              JSR     GETEA
00001B0E  14FC 002C               1205              MOVE.B  #$2C, (A2)+     *',' to buffer
00001B12  14FC 0044               1206              MOVE.B  #$44, (A2)+     *'D' to buffer
00001B16  4EB9 00001F42           1207              JSR     REG2BUFFER
00001B1C  4EF9 00001B28           1208              JMP     endop1011
00001B22                          1209  **EOR*******************************************************            
00001B22  4EF9 00002070           1210  opEOR       JMP     BADINST              
00001B28  4E75                    1211  endop1011   RTS
00001B2A                          1212  *===========================================================
00001B2A                          1213  
00001B2A                          1214  ************************************************************  
00001B2A                          1215  *OPCODE: 1100
00001B2A                          1216  *AND
00001B2A                          1217  *MULU, EXG are not applicable to this assignment and will be 
00001B2A                          1218  *regarded as a bad instruction
00001B2A                          1219  opcode1100:
00001B2A  3607                    1220              MOVE.W  D7, D3          *move to utility
00001B2C  EC8B                    1221              LSR.L   #6, D3          *shift
00001B2E  0243 0003               1222              ANDI.W  #$3, D3         *isolate
00001B32  B63C 0003               1223              CMP.B   #$3, D3         *MULU/MULS?
00001B36  6700 0538               1224              BEQ     BADINST         *instruction not supported
00001B3A  3607                    1225              MOVE.W  D7, D3          *move to utility
00001B3C  E68B                    1226              LSR.L   #3, D3          *shift
00001B3E  0203 001F               1227              ANDI.B  #$1F, D3        *isolate
00001B42  B63C 0008               1228              CMP.B   #$08, D3        *EXG?
00001B46  6700 0528               1229              BEQ     BADINST         *instruction not supported
00001B4A  B63C 0009               1230              CMP.B   #$09, D3        *EXG?
00001B4E  6700 0520               1231              BEQ     BADINST         *instruction not supported
00001B52  B63C 0011               1232              CMP.B   #$11, D3        *EXG?
00001B56  6700 0518               1233              BEQ     BADINST         *ok, phew made it to AND
00001B5A                          1234              
00001B5A  14FC 0041               1235              MOVE.B  #$41, (A2)+     *'A' to buffer
00001B5E  14FC 004E               1236              MOVE.B  #$4E, (A2)+     *'N' to buffer
00001B62  14FC 0044               1237              MOVE.B  #$44, (A2)+     *'D' to buffer
00001B66  14FC 002E               1238              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001B6A  4EB9 00001F54           1239              JSR     SIZE2BUFFER     *send size to buffer
00001B70  14FC 0020               1240              MOVE.B  #$20, (A2)+     *' ' to buffer
00001B74  14FC 0020               1241              MOVE.B  #$20, (A2)+     *' ' to buffer
00001B78  4EB9 00001E8A           1242              JSR     GETDIRECTION    *isolate bit for direction
00001B7E  0C03 0000               1243              CMPI.B  #%0, D3         *direction bit 0 = EA; 1 = regs
00001B82  6600 001C               1244              BNE     opAND01         *
00001B86  4EB9 00001D7C           1245              JSR     GETEA           *get effective address
00001B8C  14FC 002C               1246              MOVE.B  #$2C, (A2)+     *',' to buffer
00001B90  14FC 0044               1247              MOVE.B  #$44, (A2)+     *'D' to buffer
00001B94  4EB9 00001F42           1248              JSR     REG2BUFFER      *get the register number
00001B9A  4EF9 00001BB4           1249              JMP     endop1100     
00001BA0                          1250           
00001BA0  14FC 0044               1251  opAND01     MOVE.B  #$44, (A2)+     *'D' to buffer
00001BA4  4EB9 00001F42           1252              JSR     REG2BUFFER      *get the register number
00001BAA  14FC 002C               1253              MOVE.B  #$2C, (A2)+     *',' to buffer
00001BAE  4EB9 00001D7C           1254              JSR     GETEA           *get effective address 
00001BB4  4E75                    1255  endop1100   RTS                     *return
00001BB6                          1256  *===========================================================
00001BB6                          1257  
00001BB6                          1258  ************************************************************  
00001BB6                          1259  *OPCODE: 1101
00001BB6                          1260  *ADD,ADDA
00001BB6                          1261  opcode1101: 
00001BB6  14FC 0041               1262              MOVE.B  #$41, (A2)+     *'A' to buffer
00001BBA  14FC 0044               1263              MOVE.B  #$44, (A2)+     *'D' to buffer
00001BBE  14FC 0044               1264              MOVE.B  #$44, (A2)+     *'D' to buffer
00001BC2  4EB9 00001E80           1265              JSR     GETSIZE         *
00001BC8  0C03 0003               1266              CMPI.B  #%11, D3        *11?
00001BCC  6600 004E               1267              BNE     opadd           *
00001BD0  14FC 0041               1268              MOVE.B  #$41, (A2)+     *'A' to buffer
00001BD4  14FC 002E               1269              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001BD8  3607                    1270              MOVE.W  D7, D3          *move to utility
00001BDA  E08B                    1271              LSR.L   #8, D3          *shift
00001BDC  0243 0001               1272              ANDI.W  #$0001, D3      *isolate
00001BE0  0C03 0001               1273              CMPI.B  #%1, D3         *long?
00001BE4  6700 000C               1274              BEQ     opaddL          *
00001BE8  14FC 0057               1275              MOVE.B  #$57,(A2)+      *'W' to buffer
00001BEC  4EF9 00001BF6           1276              JMP     opadda  
00001BF2                          1277  **ADD.L*****************************************************
00001BF2  14FC 004C               1278  opADDL      MOVE.B  #$4C,(A2)+      *'L' to buffer
00001BF6                          1279  *ADDA*******************************************************
00001BF6  14FC 0020               1280  opADDA      MOVE.B  #$20, (A2)+     *' ' to buffer
00001BFA  14FC 0020               1281              MOVE.B  #$20, (A2)+     *' ' to buffer
00001BFE  14FC 0020               1282              MOVE.B  #$20, (A2)+     *' ' to buffer
00001C02  4EB9 00001D7C           1283              JSR     GETEA           *get effective address 
00001C08  14FC 002C               1284              MOVE.B  #$2C, (A2)+     *',' to buffer
00001C0C  14FC 0041               1285              MOVE.B  #$41, (A2)+     *'A' to buffer
00001C10  4EB9 00001F42           1286              JSR     REG2BUFFER      *get the register number
00001C16  4EF9 00001C6A           1287              JMP     endop1101
00001C1C                          1288  **ADD*******************************************************
00001C1C  14FC 002E               1289  opADD       MOVE.B  #$2E, (A2)+     *'.' to buffer  
00001C20  4EB9 00001F54           1290              JSR     SIZE2BUFFER     *send size to buffer
00001C26  14FC 0020               1291              MOVE.B  #$20, (A2)+     *' ' to buffer
00001C2A  14FC 0020               1292              MOVE.B  #$20, (A2)+     *' ' to buffer
00001C2E  4EB9 00001E8A           1293              JSR     GETDIRECTION    *isolate bit for direction
00001C34  0C03 0000               1294              CMPI.B   #%0, D3        *direction bit 0 = EA; 1 = regs
00001C38  6600 001C               1295              BNE     opADD01         *
00001C3C  4EB9 00001D7C           1296              JSR     GETEA           *get effective address
00001C42  14FC 002C               1297              MOVE.B  #$2C, (A2)+     *',' to buffer
00001C46  14FC 0044               1298              MOVE.B  #$44, (A2)+     *'D' to buffer
00001C4A  4EB9 00001F42           1299              JSR     REG2BUFFER      *get the register number
00001C50  4EF9 00001C6A           1300              JMP     endop1101   
00001C56                          1301  **EA first************************************************** 
00001C56  14FC 0044               1302  opADD01    MOVE.B  #$44, (A2)+     *'D' to buffer
00001C5A  4EB9 00001F42           1303              JSR     REG2BUFFER      *get the register number
00001C60  14FC 002C               1304              MOVE.B  #$2C, (A2)+     *',' to buffer
00001C64  4EB9 00001D7C           1305              JSR     GETEA           *get effective address
00001C6A  4E75                    1306  endop1101   RTS                     *return           
00001C6C                          1307  *===========================================================
00001C6C                          1308  
00001C6C                          1309  ************************************************************  
00001C6C                          1310  *OPCODE: 1110
00001C6C                          1311  *AS(L/R), LS(L/R), RO(L/R)
00001C6C                          1312  opcode1110:
00001C6C  4EB9 00001E80           1313              JSR     GETSIZE
00001C72  0C03 0003               1314              CMPI.B  #%11, D3        *memory?
00001C76  6700 005E               1315              BEQ     opSMEM
00001C7A                          1316              
00001C7A                          1317  **Register shift********************************************
00001C7A  3607                    1318  opSREG      MOVE.W  D7, D3          *move to utility
00001C7C  E60B                    1319              LSR.B   #3, D3          *isolate 3-4
00001C7E  0203 0003               1320              ANDI.B  #$03, D3
00001C82  0C03 0000               1321              CMPI.B  #%00, D3        *AS(L/R)?
00001C86  6700 003A               1322              BEQ     opASD
00001C8A  0C03 0001               1323              CMPI.B  #%01, D3        *LS(L/R)?
00001C8E  6700 001E               1324              BEQ     opLSD
00001C92  0C03 0003               1325              CMPI.B  #%11, D3        *RO(L/R)?
00001C96  6600 03D8               1326  endopSREG   BNE     BADINST
00001C9A                          1327  **Roll Shift Register**************************************
00001C9A  14FC 0052               1328  opROD       MOVE.B  #$52, (A2)+     *'R' to buffer
00001C9E  14FC 004F               1329              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001CA2  4EB9 00001D34           1330              JSR     op1110DS
00001CA8  4EF9 00001D72           1331  endopROD    JMP     endop1110   
00001CAE                          1332  **Left Shift Register**************************************
00001CAE  14FC 004C               1333  opLSD       MOVE.B  #$4C, (A2)+     *'L' to buffer
00001CB2  14FC 0053               1334              MOVE.B  #$53, (A2)+     *'S' to buffer
00001CB6  4EB9 00001D34           1335              JSR     op1110DS        *Direction and size to buffer
00001CBC  4EF9 00001D72           1336  endopLSD    JMP     endop1110 
00001CC2                          1337  **Right Shift Register*************************************
00001CC2  14FC 0041               1338  opASD       MOVE.B  #$41, (A2)+     *'A' to buffer
00001CC6  14FC 0053               1339              MOVE.B  #$53, (A2)+     *'S' to buffer
00001CCA  4EB9 00001D34           1340              JSR     op1110DS        *Direction and size to buffer
00001CD0                          1341              
00001CD0  4EF9 00001D72           1342  endopASD    JMP     endop1110 
00001CD6                          1343  **Memory shift**********************************************      
00001CD6  3607                    1344  opSMEM      MOVE.W  D7, D3          *move to utility
00001CD8  E08B                    1345              LSR.L   #8, D3          *isolate
00001CDA  E28B                    1346              LSR.L   #1, D3
00001CDC  0203 0007               1347              ANDI.B  #$0007, D3
00001CE0  0C03 0000               1348              CMPI.B  #%00, D3        *AS(L/R)?
00001CE4  6700 003A               1349              BEQ     opASM
00001CE8  0C03 0001               1350              CMPI.B  #%01, D3        *LS(L/R)?
00001CEC  6700 001E               1351              BEQ     opLSM
00001CF0  0C03 0003               1352              CMPI.B  #%11, D3        *RO(L/R)?
00001CF4  6600 037A               1353  endopSMEM   BNE     BADINST
00001CF8                          1354  **Roll Shift Memory***************************************
00001CF8  14FC 0052               1355  opROM       MOVE.B  #$52, (A2)+     *'R' to buffer
00001CFC  14FC 004F               1356              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001D00  4EB9 00001D54           1357              JSR     op1110MS
00001D06  4EF9 00001D72           1358  endopROM    JMP     endop1110 
00001D0C                          1359  **Left Shift Memory**************************************
00001D0C  14FC 004C               1360  opLSM       MOVE.B  #$4C, (A2)+     *'L' to buffer
00001D10  14FC 0053               1361              MOVE.B  #$53, (A2)+     *'S' to buffer
00001D14  4EB9 00001D54           1362              JSR     op1110MS            
00001D1A  4EF9 00001D72           1363  endopLSM    JMP     endop1110 
00001D20                          1364  **Right Shift Memory*************************************
00001D20  14FC 0041               1365  opASM       MOVE.B  #$41, (A2)+     *'A' to buffer
00001D24  14FC 0053               1366              MOVE.B  #$53, (A2)+     *'S' to buffer
00001D28  4EB9 00001D54           1367              JSR     op1110MS 
00001D2E  4EF9 00001D72           1368  endopASM    JMP     endop1110 
00001D34                          1369  
00001D34  4EB9 00002054           1370  op1110DS    JSR     DIR2BUFFER
00001D3A  14FC 002E               1371              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001D3E  4EB9 00001F54           1372              JSR     SIZE2BUFFER
00001D44  14FC 0020               1373              MOVE.B  #$20, (A2)+     *' ' to buffer
00001D48  14FC 0020               1374              MOVE.B  #$20, (A2)+     *' ' to buffer
00001D4C  4EB9 00001E94           1375              JSR     GETIRCOUNTER
00001D52  4E75                    1376              RTS
00001D54                          1377              
00001D54  4EB9 00002054           1378  op1110MS    JSR     DIR2BUFFER
00001D5A  14FC 002E               1379              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001D5E  14FC 0057               1380              MOVE.B  #$57, (A2)+     *'W' to buffer
00001D62  14FC 0020               1381              MOVE.B  #$20, (A2)+     *' ' to buffer
00001D66  14FC 0020               1382              MOVE.B  #$20, (A2)+     *' ' to buffer
00001D6A  4EB9 00001D7C           1383              JSR     GETEA
00001D70  4E75                    1384              RTS
00001D72                          1385  
00001D72  4E75                    1386  endop1110   RTS
00001D74                          1387  *===========================================================
00001D74                          1388  
00001D74                          1389  ************************************************************  
00001D74                          1390  *OPCODE: 1111
00001D74                          1391  *BAD INSTRUCTION
00001D74  4EF9 00002070           1392  opcode1111: JMP     BADINST
00001D7A  4E75                    1393  endop111    RTS
00001D7C                          1394   *===========================================================             
00001D7C                          1395  
00001D7C                          1396  ************************************************************
00001D7C                          1397  *  _____ _____ _____ _____ ____ _____ _____     _______      _    ____  ____  ____  _____ ____ ____  
00001D7C                          1398  * | ____|  ___|  ___| ____/ ___|_   _|_ _\ \   / / ____|    / \  |  _ \|  _ \|  _ \| ____/ ___/ ___| 
00001D7C                          1399  * |  _| | |_  | |_  |  _|| |     | |  | | \ \ / /|  _|     / _ \ | | | | | | | |_) |  _| \___ \___ \ 
00001D7C                          1400  * | |___|  _| |  _| | |__| |___  | |  | |  \ V / | |___   / ___ \| |_| | |_| |  _ <| |___ ___) |__) |
00001D7C                          1401  * |_____|_|   |_|   |_____\____| |_| |___|  \_/  |_____| /_/   \_\____/|____/|_| \_\_____|____/____/ 
00001D7C                          1402  *                                                                                                   
00001D7C                          1403  *GETEA
00001D7C                          1404  *Description: Converts the opcode instruction EA
00001D7C                          1405  * 1001 0110 0100 0001
00001D7C                          1406  *             ^-----^
00001D7C                          1407  *Registers Used:
00001D7C                          1408  *For consistency, please utilize registers in the following way.
00001D7C                          1409  *
00001D7C                          1410  *D1 - utility register
00001D7C                          1411  *D3 - utility register
00001D7C                          1412  *D7 - copy of working address
00001D7C                          1413  *A2 - buffer address of decoded instruction
00001D7C                          1414  *A6 - jump table
00001D7C                          1415  ************************************************************
00001D7C                          1416  GETEA:
00001D7C  4DF9 00001D9A           1417              LEA     EA_TABLE, A6
00001D82  4283                    1418              CLR.L   D3
00001D84  3607                    1419              MOVE.W  D7, D3
00001D86  0243 003F               1420              ANDI.W  #$003F, D3
00001D8A  123C 0003               1421              MOVE.B  #3, D1
00001D8E  E26B                    1422              LSR.W   D1, D3
00001D90  C6FC 0006               1423              MULU    #6, D3
00001D94  4EB6 3000               1424              JSR     0(A6, D3)
00001D98  4E75                    1425              RTS                     *return
00001D9A                          1426  *===========================================================
00001D9A                          1427  
00001D9A                          1428  ************************************************************
00001D9A                          1429  *GET_TABLE
00001D9A                          1430  *Description: Jump table of Effective Address Modes
00001D9A                          1431  ************************************************************
00001D9A                          1432  EA_TABLE:       
00001D9A  4EF9 00001DCA           1433              JMP     eacode000
00001DA0  4EF9 00001DDC           1434              JMP     eacode001
00001DA6  4EF9 00001DEE           1435              JMP     eacode010
00001DAC  4EF9 00001E08           1436              JMP     eacode011
00001DB2  4EF9 00001E26           1437              JMP     eacode100
00001DB8  4EF9 00001E44           1438              JMP     eacode101
00001DBE  4EF9 00001E4A           1439              JMP     eacode110
00001DC4  4EF9 00001E50           1440              JMP     eacode111
00001DCA                          1441  *===========================================================
00001DCA                          1442  
00001DCA                          1443  ************************************************************
00001DCA                          1444  *EA CODES
00001DCA                          1445  *Description: Lsit of Effective Address Subrotines
00001DCA                          1446  *000,001,010,011,100,[101],[110],111
00001DCA                          1447  *Registers Used:
00001DCA                          1448  *TODO
00001DCA                          1449  *
00001DCA                          1450  *Data Register**********************************************
00001DCA  3607                    1451  eacode000   MOVE.W      D7, D3          *move to utility
00001DCC  0243 0007               1452              ANDI.W      #$7, D3         *isolate
00001DD0  14FC 0044               1453              MOVE.B      #$44,(A2)+      *'D' to buffer
00001DD4  0603 0030               1454              ADD.B       #$30, D3        *convert register number to ascii
00001DD8  14C3                    1455              MOVE.B      D3,(A2)+        *to buffer                  
00001DDA  4E75                    1456  endea000    RTS                         *return
00001DDC                          1457  *Address Register*******************************************
00001DDC  3607                    1458  eacode001   MOVE.W      D7, D3          *move to utility
00001DDE  0243 0007               1459              ANDI.W      #$7, D3         *isolate
00001DE2  14FC 0041               1460              MOVE.B      #$41, (A2)+     *'A' to buffer
00001DE6  0603 0030               1461              ADD.B       #$30, D3        *convert register number to ascii
00001DEA  14C3                    1462              MOVE.B      D3,(A2)+        *to buffer  
00001DEC  4E75                    1463  endea001    RTS                         *return
00001DEE                          1464  *Address
00001DEE  3607                    1465  eacode010   MOVE.W      D7, D3          *move to utility
00001DF0  0243 0007               1466              ANDI.W      #$7, D3         *isolate
00001DF4  14FC 0028               1467              MOVE.B      #$28,(A2)+      *'(' to buffer            
00001DF8  14FC 0041               1468              MOVE.B      #$41,(A2)+      *'A' to buffer
00001DFC  0603 0030               1469              ADD.B       #$30, D3        *convert register number to ascii
00001E00  14C3                    1470              MOVE.B      D3,(A2)+        *to buffer  
00001E02  14FC 0029               1471              MOVE.B      #$29,(A2)+      *')' to buffe
00001E06  4E75                    1472  endea010    RTS                         *return
00001E08                          1473  *Address with Postincrement*********************************
00001E08  3607                    1474  eacode011   MOVE.W      D7, D3          *move to utility
00001E0A  0243 0007               1475              ANDI.W      #$7, D3         *isolate
00001E0E  14FC 0028               1476              MOVE.B      #$28,(A2)+      *'(' to buffer            
00001E12  14FC 0041               1477              MOVE.B      #$41,(A2)+      *'A' to buffer
00001E16  0603 0030               1478              ADD.B       #$30, D3        *convert register number to ascii
00001E1A  14C3                    1479              MOVE.B      D3,(A2)+        *to buffer  
00001E1C  14FC 0029               1480              MOVE.B      #$29,(A2)+      *')' to buffer
00001E20  14FC 002B               1481              MOVE.B      #$2B, (A2)+     *'+' to buffer
00001E24  4E75                    1482  endea011    RTS                         *return
00001E26                          1483  *Address with Predecrement**********************************
00001E26  3607                    1484  eacode100   MOVE.W      D7, D3          *move to utility
00001E28  0243 0007               1485              ANDI.W      #$7, D3         *isolate
00001E2C  14FC 002D               1486              MOVE.B      #$2D,(A2)+      *'-' to buffer 
00001E30  14FC 0028               1487              MOVE.B      #$28,(A2)+      *'(' to buffer            
00001E34  14FC 0041               1488              MOVE.B      #$41,(A2)+      *'A' to buffer
00001E38  0603 0030               1489              ADD.B       #$30, D3        *convert register number to ascii
00001E3C  14C3                    1490              MOVE.B      D3,(A2)+        *to buffer  
00001E3E  14FC 0029               1491              MOVE.B      #$29,(A2)+      *')' to buffe
00001E42  4E75                    1492  endea100    RTS                         *return
00001E44                          1493  *Bad Instruction********************************************
00001E44  4EF9 00002070           1494  eacode101   JMP         BADINST
00001E4A                          1495  *Bad Instruction********************************************
00001E4A  4EF9 00002070           1496  eacode110   JMP         BADINST
00001E50                          1497  *Immediate*Absolute*****************************************
00001E50  4EB9 00001E78           1498  eacode111   JSR         GETREGISTER     *isolate register bit
00001E56  0C03 0000               1499              CMPI.B      #$0, D3         *word?
00001E5A  6700 0166               1500              BEQ         WORD2BUFFER
00001E5E  0C03 0001               1501              CMPI.B      #$1, D3         *long?
00001E62  6700 018A               1502              BEQ         LONG2BUFFER
00001E66  0C03 0004               1503              CMPI.B      #$4, D3         *Immediate Data?
00001E6A  6700 01AE               1504              BEQ         IMM2BUFER
00001E6E  0C03 0002               1505              CMPI.B      #$2, D3         *PC?
00001E72  6700 01FC               1506              BEQ         BADINST
00001E76  4E75                    1507  endea111    RTS                         *return
00001E78                          1508  *===========================================================
00001E78                          1509  
00001E78                          1510  ************************************************************
00001E78                          1511  *GETREGISTER
00001E78                          1512  *Description: Converts register bit and stores in D3
00001E78                          1513  ************************************************************ 
00001E78                          1514  GETREGISTER:
00001E78  3607                    1515              MOVE.W  D7, D3
00001E7A  0243 0007               1516              ANDI.W  #$07, D3
00001E7E  4E75                    1517  endrb       RTS
00001E80                          1518  *===========================================================
00001E80                          1519  
00001E80                          1520  ************************************************************
00001E80                          1521  *GETSIZE
00001E80                          1522  *Description: Returns the size of the bit in 6-7 (.B, .W, .L)
00001E80                          1523  * 1001 0110 0100 0001
00001E80                          1524  *       ^^--------->|
00001E80                          1525  *Registers Used:
00001E80                          1526  *D3 - size bit
00001E80                          1527  *D7 - copy of instruction
00001E80                          1528  ************************************************************
00001E80                          1529  GETSIZE:
00001E80  3607                    1530              MOVE.W  D7, D3          *move to utility
00001E82  EC4B                    1531              LSR.W   #6, D3          *shift
00001E84  0243 0003               1532              ANDI.W  #$0003, D3      *isolate
00001E88  4E75                    1533  endGS       RTS                     *return
00001E8A                          1534  *===========================================================
00001E8A                          1535  
00001E8A                          1536  ************************************************************
00001E8A                          1537  *GETDIRECTION
00001E8A                          1538  *Description: Finds direction of the instruction and sets it to the utility register
00001E8A                          1539  * 1001 0110 0100 0001
00001E8A                          1540  *         ^-------->|
00001E8A                          1541  *Registers Used:
00001E8A                          1542  *D3 - size bit
00001E8A                          1543  *D7 - copy of instruction 
00001E8A                          1544  ************************************************************
00001E8A                          1545  GETDIRECTION:
00001E8A  3607                    1546              MOVE.W  D7, D3          *move to utility
00001E8C  E08B                    1547              LSR.L   #8, D3          *shift 8
00001E8E  0203 0001               1548              ANDI.B  #01, D3         *isolate 8th bit
00001E92  4E75                    1549  endgd       RTS                     *return
00001E94                          1550  *===========================================================
00001E94                          1551  
00001E94                          1552  ************************************************************
00001E94                          1553  *GETIRCOUNTER
00001E94                          1554  *Description: Finds i/r field of the instruction and sets it
00001E94                          1555  *             to the utility register.
00001E94                          1556  * 1001 0110 0100 0001
00001E94                          1557  *              ^
00001E94                          1558  *Registers Used:
00001E94                          1559  *D3 - size bit
00001E94                          1560  *D7 - copy of instruction 
00001E94                          1561  ************************************************************
00001E94                          1562  GETIRCOUNTER:
00001E94  3607                    1563              MOVE.W  D7, D3          *move to utility
00001E96  EA8B                    1564              LSR.L   #5, D3          *shift
00001E98  0243 0001               1565              ANDI.W  #$0001, D3      *isolate
00001E9C  0C03 0000               1566              CMPI.B  #%0, D3         *
00001EA0  6700 000C               1567              BEQ     IRCOUNT
00001EA4  14FC 0044               1568              MOVE.B  #$44, (A2)+     *'D' to buffer
00001EA8  4EF9 00001EB2           1569              JMP     IRSIZE
00001EAE  14FC 0023               1570  IRCOUNT     MOVE.B  #$23, (A2)+     *'#' to buffer
00001EB2  4EB9 00001F42           1571  IRSIZE      JSR     REG2BUFFER
00001EB8  14FC 002C               1572              MOVE.B  #$2C, (A2)+     *',' to buffer
00001EBC  14FC 0044               1573              MOVE.B  #$44, (A2)+     *'D' to buffer
00001EC0  3607                    1574              MOVE.W  D7, D3          *move to utility
00001EC2  0243 0007               1575              ANDI.W  #$0007, D3
00001EC6  0603 0030               1576              ADD.B   #$30, D3
00001ECA  14C3                    1577              MOVE.B  D3, (A2)+
00001ECC  4E75                    1578  endIRC      RTS                     *return
00001ECE                          1579  *===========================================================
00001ECE                          1580  
00001ECE                          1581  ************************************************************
00001ECE                          1582  *SWAPREG         
00001ECE                          1583  *Description: For double EA move instructions, swaps registers to use EA jump table
00001ECE                          1584  *Registers Used:
00001ECE                          1585  *D3 - size bit
00001ECE                          1586  *D4 - hold register for swap bits
00001ECE                          1587  *D7 - swapped EA mode 
00001ECE                          1588  SWAPREG:
00001ECE  4283                    1589              CLR.L   D3              *
00001ED0  3607                    1590              MOVE.W  D7,D3           *move to utility
00001ED2  E04B                    1591              LSR.W   #8,D3           *shift
00001ED4  E24B                    1592              LSR.W   #1,D3           *shift
00001ED6  0243 0007               1593              ANDI.W  #$0007,D3       *
00001EDA  8843                    1594              OR.W    D3,D4           *store bits for swap
00001EDC  3607                    1595              MOVE.W  D7,D3           *move to utility
00001EDE  E64B                    1596              LSR.W   #3,D3           *shift bits 6-8 to normal ea position
00001EE0  0243 0038               1597              ANDI.W  #$0038, D3
00001EE4  8843                    1598              OR.W    D3,D4           *
00001EE6  4EB9 00001EF0           1599              JSR     srSize          *get mode size
00001EEC  3E04                    1600              MOVE.W  D4,D7           *load swap register
00001EEE  4E75                    1601  endswap     RTS                     *return
00001EF0                          1602  
00001EF0  3607                    1603  srSize      MOVE.W  D7,D3           *move to utility
00001EF2  E04B                    1604              LSR.W   #8,D3           *shift
00001EF4  E84B                    1605              LSR.W   #4,D3           *
00001EF6  0243 0003               1606              ANDI.W  #$0003,D3       *isolate
00001EFA  B63C 0001               1607              CMP.B   #$1,D3          *byte?
00001EFE  6700 0020               1608              BEQ     endsr           *yes
00001F02  B63C 0002               1609              CMP.B   #$2,D3          *long?
00001F06  6700 0014               1610              BEQ     srL             *yes
00001F0A  B63C 0003               1611              CMP.B   #$3,D3          *word?
00001F0E  6600 0160               1612              BNE     BADINST         *No? bad instrustion        
00001F12  0044 0040               1613  srW         ORI.W   #$0040,D4       *add size
00001F16  4EF9 00001F20           1614              JMP     endsr           *
00001F1C  0044 0080               1615  srL         ORI.W   #$0080,D4       *add size
00001F20  4E75                    1616  endsr       RTS                     *return
00001F22                          1617  *===========================================================
00001F22                          1618  
00001F22                          1619  SHIFT:       
00001F22  E8AB                    1620              LSR.L   D4,D3               
00001F24  0243 000F               1621              ANDI.W  #$000F,D3
00001F28  4E75                    1622  endSHFIT    RTS
00001F2A                          1623  
00001F2A                          1624  ************************************************************
00001F2A                          1625  *  ____  _   _ _____ _____ _____ ____ 
00001F2A                          1626  * | __ )| | | |  ___|  ___| ____|  _ \ 
00001F2A                          1627  * |  _ \| | | | |_  | |_  |  _| | |_) | 
00001F2A                          1628  * | |_) | |_| |  _| |  _| | |___|  _ <  
00001F2A                          1629  * |____/ \___/|_|   |_|   |_____|_| \_\ 
00001F2A                          1630  *
00001F2A                          1631  *BUFFER SUBROUTINES                                                                                 
00001F2A                          1632  *Description: Puts word to print buffer
00001F2A                          1633  *D3 - Utility register
00001F2A                          1634  *D6 - Counter
00001F2A                          1635  *A0 - Utility address
00001F2A                          1636  *A2 - Address buffer
00001F2A                          1637  *NOTES:
00001F2A                          1638  *Adding chars to the buffer a byte at a time seems to work the best
00001F2A                          1639  *Adding words or longwords can sometimes land on odd memory address
00001F2A                          1640  *which do no allow memory to be written to.  To combat this, move
00001F2A                          1641  *chars as bytes.  Tideous, but effective.
00001F2A                          1642  *EXAMPLE:   MOVE.B  #$20, (A2)+     *' ' to buffer
00001F2A                          1643  *----------------------------------------------------------- 
00001F2A                          1644  
00001F2A                          1645  ************************************************************
00001F2A                          1646  *HEX2ASCII
00001F2A                          1647  *Description: Converts bit to ASCII and send to buffer
00001F2A                          1648  ************************************************************            
00001F2A                          1649  HEX2ASCII:  
00001F2A  B63C 000A               1650              CMP.B       #$A, D3     *hex char?
00001F2E  6C00 000A               1651              BGE         letter      *letter?
00001F32  0603 0030               1652  number      ADDI.B      #$30,D3     *convert to ASCII
00001F36  6000 0006               1653              BRA         W2B         *
00001F3A  0603 0037               1654  letter      ADDI.B      #$37,D3     *
00001F3E  14C3                    1655  W2B         MOVE.B      D3,(A2)+    *to buffer
00001F40  4E75                    1656  endH2A      RTS                     *return
00001F42                          1657  *===========================================================   
00001F42                          1658  
00001F42                          1659  ************************************************************
00001F42                          1660  *REG2BUFFER
00001F42                          1661  *Description: Finds the register size and sends it to the output buffer
00001F42                          1662  * 1001 0110 0100 0001
00001F42                          1663  *      ^-^--------->|
00001F42                          1664  *Registers Used:
00001F42                          1665  *D3 - size bit
00001F42                          1666  *D7 - copy of instruction
00001F42                          1667  *A2 - buffer address of decoded instruction          
00001F42                          1668  ************************************************************
00001F42                          1669  REG2BUFFER:
00001F42  3607                    1670              MOVE.W  D7,D3            *move to utility
00001F44  E08B                    1671              LSR.L   #8,D3            *shift
00001F46  E28B                    1672              LSR.L   #1,D3            *shift
00001F48  0203 0007               1673              ANDI.B  #$7,D3           *isolate
00001F4C  0603 0030               1674              ADD.B   #$30,D3          *convert to ascii
00001F50  14C3                    1675              MOVE.B  D3,(A2)+         *to buffer
00001F52  4E75                    1676  endR2B      RTS                      *return
00001F54                          1677  *===========================================================
00001F54                          1678  
00001F54                          1679  ************************************************************
00001F54                          1680  *SIZE2BUFFER
00001F54                          1681  *Description: Isolates and converts the instruction size and sends it to the output buffer
00001F54                          1682  *             Byte, word, long read word in memory for instructions that utilize immediate
00001F54                          1683  *             data.  At the end of the instruction, the working memory address is advanced.
00001F54                          1684  *Registers Used:
00001F54                          1685  *D3 - size bit
00001F54                          1686  *A2 - buffer address of decoded instruction
00001F54                          1687  ************************************************************
00001F54                          1688  SIZE2BUFFER:
00001F54  4EB8 1E80               1689              JSR     GETSIZE         *get the size of bit
00001F58  B63C 0000               1690              CMP.B   #%00, D3        *byte
00001F5C  6700 001E               1691              BEQ     s2bB            *
00001F60  B63C 0001               1692              CMP.B   #%01, D3        *word
00001F64  6700 0020               1693              BEQ     s2bW            *
00001F68  B63C 0002               1694              CMP.B   #%10, D3        *long
00001F6C  6700 0022               1695              BEQ     s2bL            *
00001F70  4EF9 00002070           1696              JMP     BADINST         *bad instruction
00001F76  4EF9 00001F94           1697              JMP     ends2b          *
00001F7C                          1698              
00001F7C  14FC 0042               1699  s2bB        MOVE.B  #$42,(A2)+      *'B' to buffer
00001F80  4EF9 00001F94           1700              JMP     ends2b          *
00001F86  14FC 0057               1701  s2bW        MOVE.B  #$57,(A2)+      *'W' to buffer
00001F8A  4EF9 00001F94           1702              JMP     ends2b          *
00001F90  14FC 004C               1703  s2bL        MOVE.B  #$4C,(A2)+      *'L' to buffer
00001F94  4E75                    1704  ends2b      RTS                     *return
00001F96                          1705  *===========================================================
00001F96                          1706  
00001F96                          1707  ************************************************************
00001F96                          1708  *BYTE2BUFFER
00001F96                          1709  *Description: Converts a byte in memory to ASCII and sends it
00001F96                          1710  *            to the buffer.
00001F96                          1711  *Buffer: $XX
00001F96                          1712  *Registers Used:
00001F96                          1713  *D2 - utility register
00001F96                          1714  *D3 - utility register
00001F96                          1715  *D4 - counter
00001F96                          1716  *A0 - working address
00001F96                          1717  *A2 - buffer address of decoded instruction
00001F96                          1718  ************************************************************
00001F96                          1719  BYTE2BUFFER:  
00001F96  14FC 0024               1720              MOVE.B  #$24, (A2)+     *'$' to buffer
00001F9A  4284                    1721              CLR.L       D4                  *clear counter
00001F9C                          1722              *ADDQ.W      #2, A0
00001F9C  3410                    1723              MOVE.W      (A0), D2
00001F9E  183C 0002               1724              MOVE.B      #2, D4              *load counter
00001FA2                          1725  **LOOP******************************************************
00001FA2                          1726  B2BLoop                 
00001FA2  B83C 0000               1727              CMP.B      #$0, D4            *end?
00001FA6  6700 0014               1728              BEQ         endB2B             *
00001FAA  E91A                    1729              ROL.B       #4, D2             *roll
00001FAC  3602                    1730              MOVE.W      D2, D3             *move to utility
00001FAE  0243 000F               1731              ANDI.W      #$000F, D3         *isolate  
00001FB2  4EB8 1F2A               1732              JSR         HEX2ASCII           *           
00001FB6  5304                    1733              SUBQ.B      #$1, D4             *subtract
00001FB8  4EF8 1FA2               1734              JMP         B2BLoop             *loop til 0
00001FBC                          1735              
00001FBC  3607                    1736  endB2B      MOVE.W      D7, D3              *load from utility            
00001FBE  5448                    1737              ADDQ.W      #2, A0              *advancing memory pointer by word  
00001FC0  4E75                    1738              RTS                             *return
00001FC2                          1739  *===========================================================
00001FC2                          1740  
00001FC2                          1741  ************************************************************
00001FC2                          1742  *WORD2BUFFER
00001FC2                          1743  *Description: Converts a word in memory to ASCII and sends it
00001FC2                          1744  *            to the buffer.
00001FC2                          1745  *Buffer: $XXXX
00001FC2                          1746  *Registers Used:
00001FC2                          1747  *D2 - utility register
00001FC2                          1748  *D3 - utility register
00001FC2                          1749  *D4 - counter
00001FC2                          1750  *A0 - working address
00001FC2                          1751  *A2 - buffer address of decoded instruction
00001FC2                          1752  ************************************************************
00001FC2                          1753  WORD2BUFFER: 
00001FC2  14FC 0024               1754              MOVE.B  #$24, (A2)+     *'$' to buffer
00001FC6  4284                    1755              CLR.L   D4
00001FC8                          1756              *ADDQ.W  #2, A0                  *clear counter
00001FC8  3410                    1757              MOVE.W  (A0), D2            
00001FCA  183C 0004               1758              MOVE.B  #4, D4              *load counter
00001FCE                          1759  **LOOP******************************************************
00001FCE                          1760  W2BLoop                 
00001FCE  B83C 0000               1761              CMP.B       #$00, D4            *end?
00001FD2  6700 0014               1762              BEQ         endW2B              *
00001FD6  E95A                    1763              ROL.W       #4, D2              *rol
00001FD8  3602                    1764              MOVE.W      D2, D3              *
00001FDA  0243 000F               1765              ANDI.W      #$000F, D3          *  
00001FDE  4EB8 1F2A               1766              JSR         HEX2ASCII           *char to buffer            
00001FE2  5304                    1767              SUBQ.B      #$1, D4             *
00001FE4  4EF8 1FCE               1768              JMP         W2BLoop             *loop til 0
00001FE8                          1769         
00001FE8  3607                    1770  endW2B      MOVE.W      D7, D3              *load from utility            
00001FEA  5448                    1771              ADDQ.W      #2, A0              *advancing memory pointer by word   
00001FEC  4E75                    1772              RTS                             *return
00001FEE                          1773  *===========================================================
00001FEE                          1774   
00001FEE                          1775  ************************************************************
00001FEE                          1776  *LONG2BUFFER
00001FEE                          1777  *Description: Converts a long word in memory to ASCII and sends
00001FEE                          1778  *            it to the buffer.
00001FEE                          1779  *Buffer: $XXXXXXXX
00001FEE                          1780  *Registers Used:
00001FEE                          1781  *D2 - utility register
00001FEE                          1782  *D3 - utility register
00001FEE                          1783  *D4 - counter
00001FEE                          1784  *A0 - working address
00001FEE                          1785  *A2 - buffer address of decoded instruction
00001FEE                          1786  ************************************************************           
00001FEE                          1787  LONG2BUFFER:
00001FEE  14FC 0024               1788              MOVE.B  #$24, (A2)+     *'$' to buffer
00001FF2  4284                    1789              CLR.L       D4          *clear counter
00001FF4                          1790              *ADDQ.W      #2, A0     *clear counter
00001FF4  2410                    1791              MOVE.L      (A0), D2 
00001FF6  183C 0008               1792              MOVE.B      #8, D4      *load counter
00001FFA                          1793  **LOOP******************************************************
00001FFA                          1794  L2BLoop                 
00001FFA  B83C 0000               1795              CMP.B       #$00, D4    *end?
00001FFE  6700 0014               1796              BEQ         endL2B      *
00002002  E99A                    1797              ROL.L       #4, D2      *
00002004  3602                    1798              MOVE.W      D2, D3      *
00002006  0243 000F               1799              ANDI.W      #$000F, D3  *isolate
0000200A  4EB8 1F2A               1800              JSR         HEX2ASCII   *to buffer           
0000200E  5304                    1801              SUBQ.B      #$1, D4     *subtract from counter
00002010  4EF8 1FFA               1802              JMP         L2BLoop     *loop
00002014                          1803              
00002014  3607                    1804  endL2B      MOVE.W      D7, D3      *load from utility           
00002016  5848                    1805              ADDQ.W      #4, A0      *advancing memory pointer by word  
00002018  4E75                    1806              RTS  
0000201A                          1807  *===========================================================
0000201A                          1808             
0000201A                          1809  ************************************************************
0000201A                          1810  *IMM2BUFER
0000201A                          1811  *Description: Converts immediate data and sends to buffer
0000201A                          1812  *Registers Used:
0000201A                          1813  *D3 - utility register
0000201A                          1814  *A2 - buffer address of decoded instruction
0000201A                          1815  ************************************************************ 
0000201A                          1816  IMM2BUFER:
0000201A  14FC 0023               1817              MOVE.B  #$23, (A2)+     *'#' to buffer
0000201E  4EB8 1EF0               1818              JSR     srSize          *get bit size
00002022  0C03 0001               1819              CMPI.B  #%01, D3        *byte?
00002026  6700 FF6E               1820              BEQ     BYTE2BUFFER     *
0000202A  0C03 0003               1821              CMPI.B  #%11, D3        *word?
0000202E  6792                    1822              BEQ     WORD2BUFFER     *
00002030  0C03 0002               1823              CMPI.B  #%10, D3        *long?
00002034  67B8                    1824              BEQ     LONG2BUFFER     *
00002036  4E75                    1825  endI2B      RTS                     *return
00002038                          1826  *===========================================================  
00002038                          1827  
00002038                          1828  ************************************************************
00002038                          1829  *ADDR2BUFFER
00002038                          1830  *Description: Converts immediate data and sends to buffer
00002038                          1831  *Registers Used:
00002038                          1832  *D3 - utility register
00002038                          1833  *A2 - buffer address of decoded instruction
00002038                          1834  ************************************************************ 
00002038                          1835  ADDR2BUFFER:
00002038  14FC 0023               1836              MOVE.B  #$23, (A2)+     *'#' to buffer
0000203C  0C03 0000               1837              CMPI.B  #%00, D3        *byte?
00002040  6700 FF54               1838              BEQ     BYTE2BUFFER     *
00002044  0C03 0001               1839              CMPI.B  #%01, D3        *word?
00002048  6700 FF78               1840              BEQ     WORD2BUFFER     *
0000204C  0C03 0003               1841              CMPI.B  #%11, D3        *long?
00002050  679C                    1842              BEQ     LONG2BUFFER     *
00002052  4E75                    1843  endA2B      RTS                     *return
00002054                          1844  *=========================================================== 
00002054                          1845  
00002054                          1846  ************************************************************
00002054                          1847  *DIR2BUFFER
00002054                          1848  *Description: Send direction to buffer
00002054                          1849  *Registers Used:
00002054                          1850  *D3 - utility register
00002054                          1851  *A2 - buffer address of decoded instruction
00002054                          1852  ************************************************************ 
00002054                          1853  DIR2BUFFER:
00002054  4EB8 1E8A               1854              JSR     GETDIRECTION
00002058  0C03 0000               1855              CMPI.B  #%0, D3
0000205C  6700 000C               1856              BEQ     D2DR
00002060  14FC 004C               1857              MOVE.B  #$4C, (A2)+     *'L' to buffer
00002064  4EF9 0000206E           1858              JMP     endD2B      
0000206A  14FC 0052               1859  D2DR        MOVE.B  #$52, (A2)+     *'R' to buffer
0000206E  4E75                    1860  endD2B      RTS                     *return
00002070                          1861  *===========================================================       
00002070                          1862  
00002070                          1863  ************************************************************
00002070                          1864  *BADINST
00002070                          1865  *Description: A bad instruction has been called, print to console
00002070                          1866  *Buffer: '$0x00000000   DATA    BadWord'
00002070                          1867  *Registers Used:
00002070                          1868  *D3 - utility register
00002070                          1869  *D5 - flag condition
00002070                          1870  *A2 - buffer address of decoded instruction
00002070                          1871  *A2 - working address
00002070                          1872  ************************************************************
00002070                          1873  BADINST:
00002070                          1874  **ADDRESS***************************************************
00002070  1A3C 0000               1875              MOVE.B  #0, D5          *set flag to bad for double EA check
00002074  45F9 00009000           1876              LEA     buf, A2         *reload buffer
0000207A  4EB8 1220               1877              JSR     ADDRESS         *address to buffer
0000207E                          1878  **DATA******************************************************        
0000207E  14FC 0044               1879              MOVE.B  #$44,(A2)+      *'D' to buffer
00002082  14FC 0041               1880              MOVE.B  #$41,(A2)+      *'A' to buffer
00002086  14FC 0054               1881              MOVE.B  #$54,(A2)+      *'T' to buffer
0000208A  14FC 0041               1882              MOVE.B  #$41,(A2)+      *'A' to buffer
0000208E  14FC 0009               1883              MOVE.B  #$9, (A2)+      *tab buffer
00002092  14FC 0024               1884              MOVE.B  #$24,(A2)+      *'$' to buffer
00002096                          1885  **BAD WORD**************************************************            
00002096  3610                    1886              MOVE.W  (A0), D3        *
00002098  183C 000C               1887              MOVE.B  #12, D4         *$1254
0000209C  4EB8 1F22               1888              JSR     SHIFT           * ^
000020A0  4EB8 1F2A               1889              JSR     Hex2ASCII       *to ASCII
000020A4  3610                    1890              MOVE.W  (A0), D3        *
000020A6  183C 0008               1891              MOVE.B  #8, D4          *$1254
000020AA  4EB8 1F22               1892              JSR     SHIFT           *  ^
000020AE  4EB8 1F2A               1893              JSR     Hex2ASCII       *to ASCII
000020B2  3610                    1894              MOVE.W  (A0), D3        *
000020B4  183C 0004               1895              MOVE.B  #4, D4          *$1254
000020B8  4EB8 1F22               1896              JSR     SHIFT           *   ^
000020BC  4EB8 1F2A               1897              JSR     Hex2ASCII       *to ASCII
000020C0  3610                    1898              MOVE.W  (A0), D3        *$1254
000020C2  0243 000F               1899              ANDI.W  #$000F, D3      *    ^
000020C6  4EB8 1F2A               1900              JSR     Hex2ASCII       *to ASCII
000020CA                          1901              
000020CA  5278 0900               1902              ADD     #1, badInstCount    
000020CE  4E75                    1903  endbadinst  RTS                     *return
000020D0                          1904  *===========================================================    
000020D0                          1905  
000020D0                          1906  ************************************************************
000020D0                          1907  *  _____ _   _ ____      ____ ___ __  __ 
000020D0                          1908  * | ____| \ | |  _ \    / ___|_ _|  \/  |
000020D0                          1909  * |  _| |  \| | | | |   \___ \| || |\/| |
000020D0                          1910  * | |___| |\  | |_| |    ___) | || |  | |
000020D0                          1911  * |_____|_| \_|____/    |____/___|_|  |_|
000020D0                          1912  *                                       
000020D0                          1913  *END
000020D0                          1914  *Description: Ends program
000020D0                          1915  ************************************************************          
000020D0                          1916  END:        
000020D0  103C 000E               1917              MOVE.B  #14, D0         *load bad instruction count
000020D4  43F9 00002BBF           1918              LEA     strBadInst, A1  
000020DA  4E4F                    1919              TRAP    #15
000020DC                          1920  
000020DC  1238 0900               1921              MOVE.B  badInstCount, D1 *display
000020E0  103C 0003               1922              MOVE.B  #3, D0
000020E4  4E4F                    1923              TRAP    #15
000020E6                          1924              
000020E6  4EB8 10B4               1925              JSR     dis_cr          *carriage return
000020EA                          1926              
000020EA  103C 000D               1927  therealend  MOVE.B  #13,D0          *load end string
000020EE  43F9 000027C2           1928              LEA     str_end,A1      *load string
000020F4  4E4F                    1929              TRAP    #15             *display
000020F6  FFFF FFFF               1930              SIMHALT              
000020FA                          1931  *===========================================================
000020FA                          1932           
000020FA                          1933  *-----------------------------------------------------------
000020FA                          1934  *variables
000020FA                          1935  *-----------------------------------------------------------
000020FA= 20 20 20 20 20 20 ...   1936  intro       dc.b '          66666666        888888888     KKKKKKKKK    KKKKKKK',CR,LF 
00002138= 20 20 20 20 20 20 ...   1937              dc.b '         6::::::6       88:::::::::88   K:::::::K    K:::::K',CR,LF
00002176= 20 20 20 20 20 20 ...   1938              dc.b '        6::::::6      88:::::::::::::88 K:::::::K    K:::::K',CR,LF
000021B4= 20 20 20 20 20 20 ...   1939              dc.b '       6::::::6      8::::::88888::::::8K:::::::K   K::::::K',CR,LF
000021F2= 20 20 20 20 20 20 ...   1940              dc.b '      6::::::6       8:::::8     8:::::8KK::::::K  K:::::KKK',CR,LF
00002230= 20 20 20 20 20 36 ...   1941              dc.b '     6::::::6        8:::::8     8:::::8  K:::::K K:::::K   ',CR,LF
0000226E= 20 20 20 20 36 3A ...   1942              dc.b '    6::::::6          8:::::88888:::::8   K::::::K:::::K    ',CR,LF
000022AC= 20 20 20 36 3A 3A ...   1943              dc.b '   6::::::::66666      8:::::::::::::8    K:::::::::::K     ',CR,LF
000022EA= 20 20 36 3A 3A 3A ...   1944              dc.b '  6::::::::::::::66   8:::::88888:::::8   K:::::::::::K     ',CR,LF
00002328= 20 20 36 3A 3A 3A ...   1945              dc.b '  6::::::66666:::::6 8:::::8     8:::::8  K::::::K:::::K    ',CR,LF
00002366= 20 20 36 3A 3A 3A ...   1946              dc.b '  6:::::6     6:::::68:::::8     8:::::8  K:::::K K:::::K   ',CR,LF    
000023A4= 20 20 36 3A 3A 3A ...   1947              dc.b '  6:::::6     6:::::68:::::8     8:::::8KK::::::K  K:::::KKK',CR,LF     
000023E2= 20 20 36 3A 3A 3A ...   1948              dc.b '  6::::::66666::::::68::::::88888::::::8K:::::::K   K::::::K',CR,LF     
00002420= 20 20 20 36 36 3A ...   1949              dc.b '   66:::::::::::::66  88:::::::::::::88 K:::::::K    K:::::K',CR,LF
0000245E= 20 20 20 20 20 36 ...   1950              dc.b '     66:::::::::66      88:::::::::88   K:::::::K    K:::::K',CR,LF
0000249C= 20 20 20 20 20 20 ...   1951              dc.b '       666666666          888888888     KKKKKKKKK    KKKKKKK',CR,LF
000024DA= 20 20 20 20 20 20 ...   1952              dc.b '                                                            ',CR,LF  
00002518= 20 20 20 20 20 20 ...   1953              dc.b '                                                            ',CR,LF  
00002556= 20 20 20 5F 5F 5F ...   1954              dc.b '   ___  ___________   ______________  ______  __   _______  ',CR,LF 
00002594= 20 20 2F 20 5F 20 ...   1955              dc.b '  / _ \/  _/ __/ _ | / __/ __/ __/  |/  / _ )/ /  / __/ _ \ ',CR,LF 
000025D2= 20 2F 20 2F 2F 20 ...   1956              dc.b ' / // // /_\ \/ __ |_\ \_\ \/ _// /|_/ / _  / /__/ _// , _/ ',CR,LF 
00002610= 2F 5F 5F 5F 5F 2F ...   1957              dc.b '/____/___/___/_/ |_/___/___/___/_/  /_/____/____/___/_/|_|  ',CR,LF 
0000264E= 20 20 20 20 20 20 ...   1958              dc.b '                                                            ',CR,LF                                        
0000268C= 20 20 20 20 20 20 ...   1959              dc.b '                                                            ',0,CR,LF 
000026CB                          1960              
000026CC= 05D2                    1961  i_length    dc.w    i_length-intro
000026CE                          1962  
000026CE= 45 6E 74 65 72 20 ...   1963  srt_addr    dc.b    'Enter starting address: $',0
000026E8= 001A                    1964  s_len       dc.w    s_len-srt_addr
000026EA                          1965  
000026EA= 45 6E 74 65 72 20 ...   1966  end_addr    dc.b    'Enter ending address: $',0
00002702= 0018                    1967  e_len       dc.w    e_len-end_addr
00002704                          1968  
00002704= 54 68 65 20 73 74 ...   1969  t_str_start dc.b    'The start address is: $',0
0000271C= 0018                    1970  t_start     dc.w    t_start-t_str_start
0000271E                          1971  
0000271E= 54 68 65 20 65 6E ...   1972  t_str_end   dc.b    'The end address is: $',0
00002734= 0016                    1973  t_end       dc.w    t_end-t_str_end
00002736                          1974  
00002736= 45 72 72 6F 72 3A ...   1975  str_error   dc.b    'Error: starting or ending address has error',0
00002762= 002C                    1976  err_len     dc.w    err_len-str_error 
00002764                          1977  
00002764= 50 72 65 73 73 20 ...   1978  str_cont    dc.b    'Press enter to continue.',0
0000277E= 001A                    1979  cont_len    dc.w    cont_len-str_cont
00002780                          1980  
00002780= 00                      1981  str_cr      dc.b    '',0
00002782= 0002                    1982  cr_len      dc.w    cr_len-str_cr
00002784                          1983  
00002784= 57 6F 75 6C 64 20 ...   1984  str_yncont  dc.b    'Would you like to enter a new decode more memory? Y?',0
000027B9                          1985  
000027B9= 01                      1986  bufferend   dc.b    1
000027BA                          1987  print_stack ds.b    8
000027C2                          1988  
000027C2= 20 20 20 20 20 20 ...   1989  str_end     dc.b '                                                                                   ',CR,LF  
00002817= 20 20 20 20 20 20 ...   1990              dc.b '                                                                                   ',CR,LF 
0000286C= 20 20 20 20 20 20 ...   1991              dc.b '                                                                                   ',CR,LF 
000028C1= 20 20 20 20 20 20 ...   1992              dc.b '                                                                                   ',CR,LF 
00002916= 20 20 2F 24 24 24 ...   1993              dc.b '  /$$$$$$   /$$$$$$  /$$      /$$ /$$$$$$$  /$$       /$$$$$$$$ /$$$$$$$$ /$$$$$$$$',CR,LF
0000296B= 20 2F 24 24 5F 5F ...   1994              dc.b ' /$$__  $$ /$$__  $$| $$$    /$$$| $$__  $$| $$      | $$_____/|__  $$__/| $$_____/',CR,LF
000029C0= 7C 20 24 24 20 20 ...   1995              dc.b '| $$  \__/| $$  \ $$| $$$$  /$$$$| $$  \ $$| $$      | $$         | $$   | $$      ',CR,LF
00002A15= 7C 20 24 24 20 20 ...   1996              dc.b '| $$      | $$  | $$| $$ $$/$$ $$| $$$$$$$/| $$      | $$$$$      | $$   | $$$$$   ',CR,LF
00002A6A= 7C 20 24 24 20 20 ...   1997              dc.b '| $$      | $$  | $$| $$  $$$| $$| $$____/ | $$      | $$__/      | $$   | $$__/   ',CR,LF
00002ABF= 7C 20 24 24 20 20 ...   1998              dc.b '| $$    $$| $$  | $$| $$\  $ | $$| $$      | $$      | $$         | $$   | $$      ',CR,LF
00002B14= 7C 20 20 24 24 24 ...   1999              dc.b '|  $$$$$$/|  $$$$$$/| $$ \/  | $$| $$      | $$$$$$$$| $$$$$$$$   | $$   | $$$$$$$$',CR,LF
00002B69= 20 5C 5F 5F 5F 5F ...   2000              dc.b ' \______/  \______/ |__/     |__/|__/      |________/|________/   |__/   |________/',0,CR,LF
00002BBF                          2001  
00002BBF= 20 20 20 20 20 20 ...   2002  strBadInst      dc.b    '                            ',CR,LF
00002BDD= 20 20 20 20 20 20 ...   2003                  dc.b    '                            ',CR,LF
00002BFB= 20 20 20 20 20 20 ...   2004                  dc.b    '                            ',CR,LF
00002C19= 4E 75 6D 62 65 72 ...   2005                  dc.b    'Number of bad instructions: ',0
00002C36                          2006  *badInstCount    ds.w    0
00002C36                          2007  *v_srt_add   ds.l    1               *store start address
00002C36                          2008  *v_end_add   ds.l    1               *store end address
00002C36                          2009  *v_test      ds.l    1               *start a temp value
00002C36                          2010  
00002C36                          2011  
00002C36                          2012      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDR2BUFFER         2038
ADDRESS             1220
ADDRFILL            1248
ADDRLOOP            124E
ASCII2HEX           115E
B2BLOOP             1FA2
BADFLAG             0
BADINST             2070
BADINSTCOUNT        900
BUF                 9000
BUFFEREND           27B9
BYTE2BUFFER         1F96
CLEAR               10E8
CODE0010_CONT       140A
CODE0010_CONT2      1412
CODE0011_CONT       145E
CODE0011_CONT2      1466
CONT_LEN            277E
CR                  D
CR_LEN              2782
D2DR                206A
DECODE              11FA
DECODECONT          121A
DIR2BUFFER          2054
DISP16              1938
DISP32              1916
DISP8               194E
DIS_BADINPUT        109A
DIS_CONT            10C8
DIS_CR              10B4
DIS_INTRO_MSG       1086
DIS_YNCONT          104C
EACODE000           1DCA
EACODE001           1DDC
EACODE010           1DEE
EACODE011           1E08
EACODE100           1E26
EACODE101           1E44
EACODE110           1E4A
EACODE111           1E50
EA_TABLE            1D9A
END                 20D0
ENDA2B              2052
ENDA2H              11EE
ENDADDR             126C
ENDB2B              1FBC
ENDBADINST          20CE
ENDBF               126E
ENDBI               10B0
ENDCLEAR            10F8
ENDD2B              206E
ENDDC               10E6
ENDDECODE           121E
ENDEA000            1DDA
ENDEA001            1DEC
ENDEA010            1E06
ENDEA011            1E24
ENDEA100            1E42
ENDEA111            1E76
ENDGD               1E92
ENDGETMWORD         16BA
ENDGOP              128C
ENDGS               1E88
ENDH2A              1F40
ENDI2B              2036
ENDINPUT            115C
ENDINTRO            1098
ENDIRC              1ECC
ENDL2B              2014
ENDMS2B             1582
ENDOP0000           13A4
ENDOP0001           13E4
ENDOP0010           1438
ENDOP0011           148C
ENDOP0100           14E2
ENDOP0100TABLE      171C
ENDOP0100_0000      1724
ENDOP0100_0001      172C
ENDOP0100_0010      1752
ENDOP0100_0011      175A
ENDOP0100_0100      1780
ENDOP0100_0101      1788
ENDOP0100_0110      17AE
ENDOP0100_0111      17B6
ENDOP0100_1000      17BE
ENDOP0100_1001      17C6
ENDOP0100_1010      17CE
ENDOP0100_1011      17D6
ENDOP0100_1100      17DE
ENDOP0100_1101      17E6
ENDOP0100_1110      185A
ENDOP0100_1111      1862
ENDOP0101           186A
ENDOP0110           1960
ENDOP0111           1968
ENDOP1000           19D6
ENDOP1001           1A84
ENDOP1010           1A8C
ENDOP1011           1B28
ENDOP1100           1BB4
ENDOP1101           1C6A
ENDOP111            1D7A
ENDOP1110           1D72
ENDOPADDI           136A
ENDOPANDI           1352
ENDOPASD            1CD0
ENDOPASM            1D2E
ENDOPCMPI           1332
ENDOPEORI           137C
ENDOPJMP            1858
ENDOPJSR            1840
ENDOPLEA            1508
ENDOPLSD            1CBC
ENDOPLSM            1D1A
ENDOPNOP            181A
ENDOPORI            1340
ENDOPROD            1CA8
ENDOPROM            1D06
ENDOPRTS            1828
ENDOPSMEM           1CF4
ENDOPSREG           1C96
ENDOPSUBI           1358
ENDR2B              1F52
ENDRB               1E7E
ENDREG2MEM          15B6
ENDS2B              1F94
ENDSHFIT            1F28
ENDSR               1F20
ENDSWAP             1EEE
ENDW2B              1FE8
END_ADDR            26EA
END_CR              10C6
END_LOOP            16B6
ERROR               11CC
ERR_LEN             2762
E_LEN               2702
GETDIRECTION        1E8A
GETEA               1D7C
GETIRCOUNTER        1E94
GETMWORD            16B8
GETOPCODE           1270
GETREGISTER         1E78
GETSIZE             1E80
GET_POST_AREG_LIST  164A
GET_POST_DREG_LIST  1684
GET_PRE_AREG_LIST   1612
GET_PRE_DREG_LIST   15E0
GOODFLAG            1
HEX2ASCII           1F2A
IMM2BUFER           201A
INTRO               20FA
IRCOUNT             1EAE
IRSIZE              1EB2
I_LENGTH            26CC
L2BLOOP             1FFA
LENGTH              0
LETTER              1F3A
LF                  A
LONG2BUFFER         1FEE
LOOP                116E
LOOPPOST_ALIST      1654
LOOPPOST_DLIST      168E
LOOPPRE_ALIST       161C
LOOPPRE_DLIST       15EC
LOWER2HEX           11C0
MAIN                1004
MAIN_CONT           1042
MAIN_END            1082
MAIN_INPUT          1016
MAIN_LOOP           1022
MAIN_NEXT           1034
MAXADD              FFFFFF
MEM2REG             15B8
MINADD              0
MOVEMEM_TABLE       1584
MOVEMSIZE2BUFFER    1558
MS2BL               157E
MS2BW               1574
NOTMOVEM            14B8
NUM2HEX             11A8
NUMBER              1F32
OP0000CONT          1382
OP0100MOVEM         150A
OP0100TABLE         16BC
OP0100_0000         171E
OP0100_0001         1726
OP0100_0010         172E
OP0100_0011         1754
OP0100_0100         175C
OP0100_0101         1782
OP0100_0110         178A
OP0100_0111         17B0
OP0100_1000         17B8
OP0100_1001         17C0
OP0100_1010         17C8
OP0100_1011         17D0
OP0100_1100         17D8
OP0100_1101         17E0
OP0100_1110         17E8
OP0100_1111         185C
OP1110DS            1D34
OP1110MS            1D54
OPADD               1C1C
OPADD01             1C56
OPADDA              1BF6
OPADDI              135E
OPADDL              1BF2
OPAND01             1BA0
OPANDI              1346
OPASD               1CC2
OPASM               1D20
OPBCC               188C
OPBGT               18BA
OPBLE               18E8
OPCMP               1ADA
OPCMPA              1A9C
OPCMPI              1326
OPCODE0000          12EE
OPCODE0001          13A6
OPCODE0010          13E6
OPCODE0011          143A
OPCODE0100          148E
OPCODE0101          1864
OPCODE0110          186C
OPCODE0111          1962
OPCODE1000          196A
OPCODE1001          19D8
OPCODE1010          1A86
OPCODE1011          1A8E
OPCODE1100          1B2A
OPCODE1101          1BB6
OPCODE1110          1C6C
OPCODE1111          1D74
OPEOR               1B22
OPEORI              1370
OPJMP               1842
OPJSR               182A
OPLEA               14E4
OPLSD               1CAE
OPLSM               1D0C
OPNOP               180E
OPOR                1980
OPOR01              19C2
OPORI               1338
OPROD               1C9A
OPROM               1CF8
OPRTS               181C
OPSMEM              1CD6
OPSREG              1C7A
OPSUBI              1358
OPSUBL              1A14
OPSUBSUB            1A3A
OPSUBSUBA           1A18
OPSUBSUBR           1A70
OP_TABLE            128E
PRINTCOUNT          A
PRINTPOST_AREG_LIST  1670
PRINTPOST_DREG_LIST  16A2
PRINTPRE_AREG_LIST  1638
PRINTPRE_DREG_LIST  1600
PRINT_B             1210
PRINT_STACK         27BA
REG2BUFFER          1F42
REG2MEM             1592
RESUME              11D6
S2BB                1F7C
S2BL                1F90
S2BW                1F86
SHIFT               1F22
SIZE2BUFFER         1F54
SRL                 1F1C
SRSIZE              1EF0
SRT_ADDR            26CE
SRW                 1F12
STACK               A000
START               1000
STRBADINST          2BBF
STR_CONT            2764
STR_CR              2780
STR_END             27C2
STR_ERROR           2736
STR_YNCONT          2784
SWAPREG             1ECE
S_LEN               26E8
TASK0               0
TASK1               1
TASK13              D
TASK14              E
TASK2               2
TASK3               3
THEREALEND          20EA
T_END               2734
T_START             271C
T_STR_END           271E
T_STR_START         2704
UPPER2HEX           11B4
U_INPUT             10FA
W2B                 1F3E
W2BLOOP             1FCE
WORD2BUFFER         1FC2
