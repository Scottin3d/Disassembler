00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 06/04/20 4:50:33 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Scott Shirley, Carl Howing
00000000                             4  * Date       : June 6, 2020
00000000                             5  * Description: 
00000000                             6  ************************************************************
00000000                             7  
00000000                             8  ************************************************************
00000000                             9  *  ____            _     _                
00000000                            10  * |  _ \ ___  __ _(_)___| |_ ___ _ __ ___ 
00000000                            11  * | |_) / _ \/ _` | / __| __/ _ \ '__/ __|
00000000                            12  * |  _ <  __/ (_| | \__ \ ||  __/ |  \__ \
00000000                            13  * |_| \_\___|\__, |_|___/\__\___|_|  |___/
00000000                            14  *            |___/                        
00000000                            15  *Register Use
00000000                            16  *For consistency, please utilize registers in the following way.
00000000                            17  *
00000000                            18  *D0 -
00000000                            19  *D1 -
00000000                            20  *D2 - 
00000000                            21  *D3 - utility register
00000000                            22  *D4 - 
00000000                            23  *D5 - flag condition
00000000                            24  *D6 - counter
00000000                            25  *D7 - copy of working address
00000000                            26  *
00000000                            27  *A0 - temp address holder
00000000                            28  *A1 - trap address
00000000                            29  *A2 - buffer address of decoded instruction
00000000                            30  *A3 -.
00000000                            31  *A4 - starting address
00000000                            32  *A5 - ending address
00000000                            33  *A6 -
00000000                            34  *A7 -
00000000                            35  ************************************************************
00000000                            36  
00000000                            37  ************************************************************
00000000                            38  * __     __         _       _     _                               _     _____ ___  _   _ 
00000000                            39  * \ \   / /_ _ _ __(_) __ _| |__ | | ___  ___      __ _ _ __   __| |   | ____/ _ \| | | |
00000000                            40  *  \ \ / / _` | '__| |/ _` | '_ \| |/ _ \/ __|    / _` | '_ \ / _` |   |  _|| | | | | | |
00000000                            41  *   \ V / (_| | |  | | (_| | |_) | |  __/\__ \   | (_| | | | | (_| |   | |__| |_| | |_| |
00000000                            42  *    \_/ \__,_|_|  |_|\__,_|_.__/|_|\___||___/    \__,_|_| |_|\__,_|   |_____\__\_\\___/ 
00000000                            43  *                                                                                        
00000000                            44  * Variables and EQUs
00000000                            45  ************************************************************
00000000  =00001000                 46  start       EQU     $1000               *start address
00000000  =0000A000                 47  stack       EQU     $A000               *stack address  
00000000  =00009000                 48  buf         EQU     $9000
00000000                            49  
00000000  =00000000                 50  minAdd      EQU     $00000000           *start of address space
00000000  =00FFFFFF                 51  maxAdd      EQU     $00FFFFFF           *end of address space
00000000                            52  
00000000  =0000000D                 53  CR          EQU     $0D                 *carriage return
00000000  =0000000A                 54  LF          EQU     $0A                 *line feed
00000000                            55  
00000000  =00000001                 56  goodflag    EQU     1                   *good flag condition
00000000  =00000000                 57  badflag     EQU     0                   *bad flag condition
00000000  =00000000                 58  length      EQU     0                   *
00000000                            59  
00000000  =0000000A                 60  printCount  EQU     10                  *number of lines printed to console before user input
00000000                            61  
00000000                            62  *TRAP tasks for preload
00000000  =00000000                 63  task0       EQU     00                  *Display string at (A1), D1.W bytes long (max 255) with carriage return and line feed (CR, LF)
00000000  =00000001                 64  task1       EQU     01                  *Display string at (A1), D1.W bytes long (max 255) without CR, LF
00000000  =00000002                 65  task2       EQU     02                  *Read string from keyboard and store at (A1), NULL terminated, length retuned in D1.W (max 80)
00000000  =00000003                 66  task3       EQU     03                  *Display signed number in D1.L in decimal in smallest field
00000000  =0000000D                 67  task13      EQU     13                  *Display the NULL terminated string at (A1) with CR, LF
00000000  =0000000E                 68  task14      EQU     14                  *Display the NULL terminated string at (A1) without CR, LF
00000000                            69  ************************************************************
00000000                            70  
00000000                            71  ************************************************************
00000000                            72  *  __  __       _       
00000000                            73  * |  \/  | __ _(_)_ __  
00000000                            74  * | |\/| |/ _` | | '_ \ 
00000000                            75  * | |  | | (_| | | | | |
00000000                            76  * |_|  |_|\__,_|_|_| |_|
00000000                            77  *                      
00000000                            78  ************************************************************
00001000                            79              ORG     start
00001000  6100 0042                 80              BSR     dis_intro_msg       *print intro message
00001004                            81              
00001004  6100 00A0                 82  main        BSR     CLEAR               *clear all registers
00001008  4FF9 0000A000             83              LEA     stack, SP           *load stack pointer
0000100E  45F9 00009000             84              LEA     buf, A2          *set buffer for input
00001014  2C4A                      85              MOVEA.L A2,A6    
00001016                            86              
00001016  6100 00A0                 87  main_input  BSR     U_INPUT             *branch to input
0000101A  BA3C 0000                 88              CMP.B   #$0, D5             *check if bad input
0000101E  6700 0038                 89              BEQ     dis_badInput        *bad flag, reinput 
00001022                            90                          
00001022  4EB9 000011B8             91  main_loop   JSR     DECODE         *prep buffer
00001028                            92  *loop checking **********************************************    
00001028  BBC8                      93              CMPA.L  A0, A5              * have we reached the end of our address range?
0000102A  6F00 0014                 94              BLE     main_end  
0000102E                            95              
0000102E  5246                      96              ADDI    #1, D6              *add counter
00001030  BC7C 000A                 97              CMP     #printcount, D6     *check loop progress
00001034  66EC                      98              BNE     main_loop
00001036                            99  
00001036  4EB9 00001086            100  main_cont   JSR     dis_cont
0000103C  4EF8 1022                101              JMP     main_loop
00001040                           102  
00001040  6100 0B20                103  main_end    BSR     END
00001044                           104  *===========================================================
00001044                           105  
00001044                           106  *-----------------------------------------------------------
00001044                           107  *display subroutines
00001044                           108  *intro message, bad inputs, carriage return, enter2return, input test
00001044                           109  *-----------------------------------------------------------
00001044                           110  *intro message display
00001044                           111  ************************************************************
00001044                           112  dis_intro_msg
00001044  103C 000D                113              MOVE.B  #13,D0              *load task
00001048  43F9 00001B8E            114              LEA     intro,A1            *load string
0000104E  3239 0000219E            115              MOVE.W  i_length,D1         *load string length 
00001054  4E4F                     116              TRAP    #15                 *display
00001056  4E75                     117  endIntro    RTS                         *return
00001058                           118  *bad input error message display****************************
00001058                           119  dis_badInput
00001058  103C 0000                120              MOVE.B  #task0,D0           *load task
0000105C  43F9 00002208            121              LEA     str_error, A1       *load string
00001062  3239 00002234            122              MOVE.W  err_len, D1         *load string length
00001068  4E4F                     123              TRAP    #15                 *display
0000106A  1A3C 0000                124              MOVE.B  #badFlag,D5         *set flag condition to bad
0000106E  4EB8 1016                125  endBI       JSR     main_input          *return to main_input
00001072                           126  *dsiplay carriage return************************************
00001072                           127  dis_cr
00001072  103C 000D                128              MOVE.B  #task13, D0         *load task
00001076  43F9 00002252            129              LEA     str_cr, A1          *load string
0000107C  3239 00002254            130              MOVE.W  cr_len, D1          *load string length
00001082  4E4F                     131              TRAP    #15                 *display
00001084  4E75                     132  end_cr      RTS                         *return
00001086                           133  *enter2return***********************************************
00001086                           134  dis_cont   
00001086  103C 000E                135              MOVE.B  #task14, D0         *load task
0000108A  43F9 00002236            136              LEA     str_cont, A1        *load string
00001090  3239 00002250            137              MOVE.W  cont_len, D1        *load string length
00001096  4E4F                     138              TRAP    #15                 *display
00001098                           139              
00001098  103C 0002                140              MOVE.B  #task2,D0           *load task
0000109C  4E4F                     141              TRAP    #15                 *get input
0000109E                           142              
0000109E  12BC 0050                143              MOVE.B  #$50,(A1)           *reset A1
000010A2                           144              
000010A2  4246                     145              CLR     D6                  *clear counter, reset loop
000010A4  4E75                     146  endDC       RTS                         *return
000010A6                           147  *===========================================================
000010A6                           148  
000010A6                           149  ************************************************************ 
000010A6                           150  *  _   _ _____ _     ____  _____ ____  
000010A6                           151  * | | | | ____| |   |  _ \| ____|  _ \ 
000010A6                           152  * | |_| |  _| | |   | |_) |  _| | |_) |
000010A6                           153  * |  _  | |___| |___|  __/| |___|  _ < 
000010A6                           154  * |_| |_|_____|_____|_|   |_____|_| \_\
000010A6                           155  *                                      
000010A6                           156  *HELPER SUBROUTINES
000010A6                           157  *Description: These subroutines are called during teh opcode translation
000010A6                           158  ************************************************************
000010A6                           159  
000010A6                           160  ************************************************************   
000010A6                           161  *CLEAR
000010A6                           162  *Description: Clears registers of values
000010A6                           163  ************************************************************        
000010A6                           164  CLEAR:
000010A6  4240                     165              CLR     D0
000010A8  4241                     166              CLR     D1
000010AA  4242                     167              CLR     D2
000010AC  4243                     168              CLR     D3
000010AE  4244                     169              CLR     D4
000010B0  4245                     170              CLR     D5
000010B2  4246                     171              CLR     D6
000010B4  4247                     172              CLR     D7
000010B6  4E75                     173  endClear    RTS
000010B8                           174  *===========================================================
000010B8                           175  
000010B8                           176  ************************************************************
000010B8                           177  *U_INPUT
000010B8                           178  *Description: Gets input address from user for program
000010B8                           179  *D5 - Return Status
000010B8                           180  *D7 - Temparary register to store address value
000010B8                           181  *A0 - Working Address
000010B8                           182  *A4 - Start Address
000010B8                           183  *A5 - End Address
000010B8                           184  ************************************************************
000010B8                           185  U_INPUT:
000010B8  103C 0001                186              MOVE.B  #task1,D0           *
000010BC  43F9 000021A0            187              LEA     srt_addr,A1         *
000010C2  3239 000021BA            188              MOVE.W  s_len,D1            *
000010C8  4E4F                     189              TRAP    #15                 *
000010CA  D3FC 000021BA            190              ADDA.L  #s_len,A1           *
000010D0  103C 0002                191              MOVE.B  #task2,D0           *
000010D4  4E4F                     192              TRAP    #15                 *
000010D6  4EB9 0000111C            193              JSR     ASCII2HEX
000010DC  BA3C 0000                194              CMP.B   #$00,D5             *bad input?
000010E0  6700 0038                195              BEQ     endInput
000010E4                           196              *MOVE.L  D7, v_srt_add       *store to varable
000010E4  4247                     197              CLR     D7
000010E6                           198              
000010E6  2848                     199              MOVEA.L A0,A4       
000010E8  103C 0001                200              MOVE.B  #task1,D0
000010EC  43F9 000021BC            201              LEA     end_addr,A1
000010F2  3239 000021D4            202              MOVE.W  e_len,D1         
000010F8  4E4F                     203              TRAP    #15         
000010FA  D3FC 000021D4            204              ADDA.L  #e_len,A1
00001100  103C 0002                205              MOVE.B  #task2,D0
00001104  4E4F                     206              TRAP    #15
00001106  4EB9 0000111C            207              JSR     ASCII2HEX
0000110C  BA3C 0000                208              CMP.B   #$00,D5             *bad input?
00001110  6700 0008                209              BEQ     endInput
00001114                           210              *MOVE.L  D7, v_end_add        *store to varable
00001114  4247                     211              CLR     D7
00001116                           212  
00001116                           213  
00001116  2A48                     214              MOVEA.L A0,A5               *store ending to A5
00001118  204C                     215              MOVEA.L A4,A0               *store starting in A0  
0000111A                           216                    
0000111A  4E75                     217  endInput    RTS
0000111C                           218  *===========================================================
0000111C                           219  
0000111C                           220  ************************************************************
0000111C                           221  *ASCII2HEX 
0000111C                           222  *Description: Converts an ASCII character to HEX - see flowchart for logic
0000111C                           223  *D3 - Placeholder for current ascii byte
0000111C                           224  *D4 - Translated address
0000111C                           225  *D5 - Return status
0000111C                           226  *D6 - Counter (6)
0000111C                           227  *D7 - Temparary register to store address value
0000111C                           228  *A0 - Stored address at end of subroutine
0000111C                           229  ************************************************************
0000111C                           230  ASCII2HEX:
0000111C  48E7 F800                231              MOVEM.L D0-D4,-(SP)         *save data registers to the stack
00001120  4EB8 10A6                232              JSR     CLEAR
00001124  1A3C 0001                233              MOVE.B  #$01,D5             *preset flag condition to good
00001128  3C3C 0000                234              MOVE    #length,D6
0000112C                           235  
0000112C                           236  loop
0000112C  1619                     237              MOVE.B  (A1)+,D3            *
0000112E  B63C 0030                238              CMP.B   #$30,D3             *byte < 30??
00001132  6D00 0056                239              BLT     error               *
00001136                           240              
00001136  B63C 003A                241              CMP.B   #$3A,D3             *byte < 3A??
0000113A  6D00 002A                242              BLT     num2hex             *
0000113E                           243              
0000113E  B63C 0041                244              CMP.B   #$41,D3             *byte < 41??
00001142  6D00 0046                245              BLT     error               *
00001146                           246              
00001146  B63C 0047                247              CMP.B   #$47,D3             *byte < 47?
0000114A  6D00 0026                248              BLT     upper2hex           *
0000114E                           249              
0000114E  B63C 0061                250              CMP.B   #$61,D3             *byte < 61??
00001152  6D00 0036                251              BLT     error               *
00001156                           252              
00001156  B63C 0067                253              CMP.B   #$67,D3             *byte < 67??
0000115A  6D00 0022                254              BLT     lower2hex           *
0000115E                           255              
0000115E  B63C 0066                256              CMP.B   #$66,D3             *byte > 66??
00001162  6E00 0026                257              BGT     error               *
00001166                           258  
00001166                           259  num2hex
00001166  0403 0030                260              SUBI.B  #$30,D3             *subracthex value of 0 to get correct value of input
0000116A  D803                     261              ADD.B   D3,D4               *
0000116C  4EF9 00001194            262              JMP     resume              *return to top
00001172                           263              
00001172                           264  upper2hex
00001172  0403 0037                265              SUBI.B  #$37,D3             *subracthex value of A to get correct value of input
00001176  D803                     266              ADD.B   D3,D4               *
00001178  4EF9 00001194            267              JMP     resume              *return to top
0000117E                           268              
0000117E                           269  lower2hex
0000117E  0403 0057                270              SUBI.B  #$57,D3             *subracthex value of a to get correct value of input
00001182  D803                     271              ADD.B   D3,D4               *
00001184  4EF9 00001194            272              JMP     resume              *return to top
0000118A                           273  error
0000118A  1A3C 0000                274              MOVE.B  #$00,D5             *flag as bad input and return
0000118E  4EF9 000011AC            275              JMP     endA2H              *return to top
00001194                           276  resume
00001194  5246                     277              ADD     #1,D6               *increment length counter
00001196  BC7C 0006                278              CMP     #6,D6               *check if done
0000119A  6700 0010                279              BEQ     endA2H              *
0000119E  0C11 0000                280              CMP.B   #$00,(A1)           *end of string??
000011A2  6700 0008                281              BEQ     endA2H              *
000011A6  E984                     282              ASL.L   #4,D4               *shiftleft by 4 bits to get next value            
000011A8  4EF8 112C                283              JMP     loop                *return to top
000011AC                           284  
000011AC                           285  endA2H
000011AC  2044                     286              MOVE.L  D4,A0               *
000011AE  2E04                     287              MOVE.L  D4,D7               *move address to temp register
000011B0  4246                     288              CLR     D6                  *clear counter
000011B2  4CDF 001F                289              MOVEM.L (SP)+,D0-D4         *load data registers from stack      
000011B6  4E75                     290              RTS                         *
000011B8                           291  *===========================================================
000011B8                           292  
000011B8                           293  ************************************************************
000011B8                           294  *DECODE
000011B8                           295  ************************************************************
000011B8                           296  DECODE:
000011B8  45F9 00009000            297              LEA     buf, A2             *load buffer
000011BE  224A                     298              MOVEA.L A2,A1               *load trap address with buffer 
000011C0  4EB9 000011DE            299              JSR     ADDRESS             *current address to buffer
000011C6  3E18                     300              MOVE.W  (A0)+, D7            *move A0 value to test
000011C8                           301  
000011C8  4EB9 0000122E            302              JSR     GETOPCODE           *decode instruction
000011CE  14BC 0000                303  print_b     MOVE.B  #00,(A2)            *null terminator
000011D2  103C 000D                304              MOVE.B  #task13,D0
000011D6  4E4F                     305              TRAP    #15 
000011D8                           306              
000011D8                           307              *CMPI.B  #%0, D5
000011D8                           308              *BNE     decodeCont 
000011D8                           309              *ADDI    #1, badInstCount
000011D8  1A3C 0000                310  decodeCont  MOVE.B  #0, D5
000011DC                           311              *ADDQ.W      #2, A0
000011DC                           312              
000011DC  4E75                     313  endDECODE   RTS
000011DE                           314  *===========================================================                       
000011DE                           315  
000011DE                           316  ************************************************************
000011DE                           317  *ADDRESS
000011DE                           318  *Description: Fills the buffer with the current address
000011DE                           319  ************************************************************
000011DE                           320  ADDRESS:    
000011DE  4283                     321              CLR.L   D3
000011E0  4284                     322              CLR.L   D4
000011E2  4287                     323              CLR.L   D7
000011E4  14FC 0024                324              MOVE.B  #$24, (A2)+     *'$' to buffer
000011E8  14FC 0030                325              MOVE.B  #$30, (A2)+     *'0' to buffer
000011EC  14FC 0078                326              MOVE.B  #$78, (A2)+     *'x' to buffer       
000011F0  7600                     327              MOVE.L  #$00000000, D3
000011F2  2E08                     328              MOVE.L  A0, D7
000011F4  D647                     329              ADD.W   D7, D3
000011F6  4EB9 00001206            330              JSR     addrFill   
000011FC  14FC 0009                331              MOVE.B  #$09,(A2)+   *tab
00001200  4EF9 0000122A            332              JMP     endaddr
00001206                           333              
00001206  2403                     334  addrFill    MOVE.L      D3, D2            *move current word into D2 for rolling purposes
00001208  183C 0008                335              MOVE.B      #8, D4              *load counter
0000120C                           336  
0000120C                           337  addrLoop                 
0000120C  B83C 0000                338              CMP.B       #$00, D4            *compare counter with 0
00001210  6700 0018                339              BEQ         endaddr      *if 0, return
00001214  E99A                     340              ROL.L       #4, D2              *
00001216  2602                     341              MOVE.L      D2, D3              *
00001218  0283 0000000F            342              ANDI.L      #$000F, D3          *isolate
0000121E  4EB9 000019F8            343              JSR         HEX2ASCII           *to buffer           
00001224  5304                     344              SUBQ.B      #$1, D4             *subtract from counter
00001226  4EF8 120C                345              JMP         addrLoop                 *loop
0000122A                           346              
0000122A  2607                     347  endaddr     MOVE.L      D7, D3              *load from utility                             
0000122C  4E75                     348  endbf       RTS
0000122E                           349  *===========================================================
0000122E                           350  
0000122E                           351  ************************************************************ 
0000122E                           352  *   ___  ____   ____ ___  ____  _____ ____  
0000122E                           353  *  / _ \|  _ \ / ___/ _ \|  _ \| ____/ ___| 
0000122E                           354  * | | | | |_) | |  | | | | | | |  _| \___ \ 
0000122E                           355  * | |_| |  __/| |__| |_| | |_| | |___ ___) |
0000122E                           356  *  \___/|_|    \____\___/|____/|_____|____/ 
0000122E                           357  * 
0000122E                           358  *GETOPCODE:
0000122E                           359  *Description: Gets the first four bits of instruction to decode 
0000122E                           360  *  
0000122E                           361  *Naming conventions for opcode subroutines
0000122E                           362  *opcode####
0000122E                           363  *op[opmode][operation]
0000122E                           364  *endop####
0000122E                           365  *                              
0000122E                           366  *Registers Used:
0000122E                           367  *For consistency, please utilize registers in the following way.
0000122E                           368  *
0000122E                           369  *D1 - utility register
0000122E                           370  *D3 - utility register
0000122E                           371  *D7 - copy of working address
0000122E                           372  *
0000122E                           373  *A2 - buffer address of decoded instruction
0000122E                           374  *A6 - jump table               
0000122E                           375  ************************************************************
0000122E                           376  GETOPCODE:   
0000122E  3607                     377              MOVE.W  D7, D3              *move to utility
00001230  123C 000C                378              MOVE.B  #12, D1             *
00001234  E26B                     379              LSR.W   D1, D3              *shift
00001236  C6FC 0006                380              MULU    #6, D3              *offset          
0000123A  4DF9 00001248            381              LEA     OP_TABLE, A6        *                                                                                  
00001240  4EB6 3000                382              JSR     00(A6,D3)           *jump indirect with index (00 indicates word movement)
00001244  260A                     383              MOVE.L  A2, D3
00001246                           384              *MOVE.L  D3, bufferend   
00001246  4E75                     385  endgop      RTS                         *return
00001248                           386  *===========================================================
00001248                           387  
00001248                           388  ************************************************************
00001248                           389  *OPCODE Table
00001248                           390  *Description: Table of OPCODES
00001248                           391  ************************************************************ 
00001248                           392  OP_TABLE
00001248  4EF9 000012A8            393              JMP         opcode0000      *BADINST
0000124E  4EF9 000012B0            394              JMP         opcode0001      *MOVE.B *testing*
00001254  4EF9 000012F0            395              JMP         opcode0010      *MOVE/A.L *incomplete*
0000125A  4EF9 000012F8            396              JMP         opcode0011      *MOVE/A.W *incomplete*
00001260  4EF9 00001350            397              JMP         opcode0100      *CLR,LEA,JMP,JSR,MOVEM,NEG*,NOP*,NOT*,RTS *testing*
00001266  4EF9 0000155E            398              JMP         opcode0101      *BADINST
0000126C  4EF9 00001566            399              JMP         opcode0110      *BADINST
00001272  4EF9 0000156E            400              JMP         opcode0111      *BADINST
00001278  4EF9 00001576            401              JMP         opcode1000      *OR
0000127E  4EF9 000015E4            402              JMP         opcode1001      *SUB,SUBA
00001284  4EF9 0000168E            403              JMP         opcode1010      *BADINST
0000128A  4EF9 00001696            404              JMP         opcode1011      *CMP,CMPA
00001290  4EF9 00001732            405              JMP         opcode1100      *AND
00001296  4EF9 000017BE            406              JMP         opcode1101      *ADD,ADDA
0000129C  4EF9 00001874            407              JMP         opcode1110      *ASR/LSL
000012A2  4EF9 0000187C            408              JMP         opcode1111      *BADINST
000012A8                           409              
000012A8                           410  ************************************************************
000012A8                           411  *OPCODES
000012A8                           412  *Description: OPCODE subroutines used to decode instructions
000012A8                           413  ************************************************************          
000012A8                           414  
000012A8                           415  *SUB
000012A8                           416  *Cases for first four bits: 1001
000012A8                           417  *Description: Converts opcode instruction that start with 1001
000012A8                           418  *SUB, SUBA
000012A8                           419  * 1001 0110 0100 0001
000012A8                           420  * ^--^
000012A8                           421  *Registers Used:
000012A8                           422  *D3 - size bit
000012A8                           423  *D7 - copy of instruction
000012A8                           424  *A2 - buffer address of decoded instruction
000012A8                           425  *
000012A8                           426  ************************************************************  
000012A8                           427  * Case for: 0000
000012A8                           428  * --(ORI,ANDI,SUBI,ADDI,EORI,CMPI) 
000012A8  4EF9 00001B06            429  opcode0000: JMP     BADINST
000012AE  4E75                     430  endop0000   RTS
000012B0                           431  *===========================================================
000012B0                           432  
000012B0                           433  ************************************************************  
000012B0                           434  *OPCODE: 0001
000012B0                           435  *MOVE.B
000012B0                           436  opcode0001:
000012B0  14FC 004D                437              MOVE.B  #$4D, (A2)+     *'M' to buffer
000012B4  14FC 004F                438              MOVE.B  #$4F, (A2)+     *'O' to buffer
000012B8  14FC 0056                439              MOVE.B  #$56, (A2)+     *'V' to buffer
000012BC  14FC 0045                440              MOVE.B  #$45, (A2)+     *'E' to buffer
000012C0  14FC 002E                441              MOVE.B  #$2E, (A2)+     *'.' to buffer
000012C4  14FC 0042                442              MOVE.B  #$42, (A2)+     *'B' to buffer
000012C8  14FC 0020                443              MOVE.B  #$20, (A2)+     *' ' to buffer
000012CC  14FC 0020                444              MOVE.B  #$20, (A2)+     *' ' to buffer
000012D0  4EB9 00001884            445              JSR     GETEA
000012D6  0C05 0000                446              CMPI.B  #%0, D5
000012DA  6700 0012                447              BEQ     endop0001   
000012DE  14FC 002C                448              MOVE.B  #$2C, (A2)+     *',' to buffer
000012E2  4EB9 0000199C            449              JSR     SWAPREG         *swap destination and source regs
000012E8  4EB9 00001884            450              JSR     GETEA  
000012EE  4E75                     451  endop0001   RTS                     *return
000012F0                           452  
000012F0                           453  *===========================================================
000012F0                           454  
000012F0                           455  ************************************************************  
000012F0                           456  *OPCODE: 0010
000012F0                           457  *MOVE.L, MOVEA.L
000012F0  4EF9 00001B06            458  opcode0010: JMP          BADINST
000012F6  4E75                     459  endop0010   RTS
000012F8                           460  *===========================================================
000012F8                           461  
000012F8                           462  ************************************************************  
000012F8                           463  *OPCODE: 0011
000012F8                           464  *MOVE.W,MOVEA.W
000012F8                           465  opcode0011:
000012F8  14FC 004D                466              MOVE.B  #$4D, (A2)+     *'M' to buffer
000012FC  14FC 004F                467              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001300  14FC 0056                468              MOVE.B  #$56, (A2)+     *'V' to buffer
00001304  14FC 0045                469              MOVE.B  #$45, (A2)+     *'E' to buffer
00001308                           470  
00001308  3607                     471              MOVE.W   D7, D3    *Check the destination mode to see if addressing*
0000130A  C6BC 000001C0            472              AND.L    #$01C0, D3 
00001310  0C83 00000040            473              CMPI.L   #$0040, D3 ** compares to see if addressing mode
00001316  6610                     474              BNE.S    code0011_cont **branches if destination mode is not addressing register
00001318                           475              *MOVE.W   #$412E, (A2)+ **Loads "A." into the print_buffer
00001318                           476              *MOVE.W   #$5720, (A2)+ **Loads "W   " into the print_buffer
00001318  14FC 0041                477              MOVE.B  #$41, (A2)+     *'A' to buffer
0000131C  14FC 002E                478              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001320  14FC 0057                479              MOVE.B  #$57, (A2)+     *'W' to buffer
00001324  6000 000A                480              BRA      code0011_cont2 **branches back to code
00001328                           481  
00001328                           482  code0011_cont  
00001328                           483              *MOVE.L   #$2E572020, (A2)+ **Loads ".W" into the print_buffer 
00001328  14FC 002E                484              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000132C  14FC 0057                485              MOVE.B  #$57, (A2)+     *'W' to buffer
00001330                           486              
00001330                           487  code0011_cont2 
00001330  14FC 0020                488              MOVE.B  #$20, (A2)+     *' ' to buffer
00001334  14FC 0020                489              MOVE.B  #$20, (A2)+     *' ' to buffer
00001338  4EB9 00001884            490              JSR      GETEA
0000133E  14FC 002C                491              MOVE.B   #$2C, (A2)+     *',' to buffer
00001342  4EB9 0000199C            492              JSR      SWAPREG         *swap destination and source regs
00001348  4EB9 00001884            493              JSR      GETEA 
0000134E  4E75                     494              RTS
00001350                           495  *===========================================================
00001350                           496  
00001350                           497  ************************************************************  
00001350                           498  *OPCODE: 0100
00001350                           499  *CLR,LEA,JMP,JSR,MOVEM,NEG*,NOP*,NOT*,RTS
00001350                           500  * '*' - instructions, not required but included 
00001350                           501  opcode0100: 
00001350                           502  
00001350                           503              *MOVEM
00001350  2607                     504              MOVE.L  D7, D3
00001352  C67C 0E00                505              AND.W #%0000111000000000, D3    *isolate bits 11 - 9
00001356  EC43                     506              ASR #$6, D3
00001358  0C43 0003                507              CMPI.W #%011, D3
0000135C                           508              *BEQ     op0100MOVEM
0000135C                           509  
0000135C  2607                     510              MOVE.L  D7, D3
0000135E  0243 0100                511              ANDI.W  #$0100,D3           * Test isolate 8th bit for LEA
00001362  B67C 0100                512              CMP.W   #$0100,D3           * Test if LEA
00001366  6700 0024                513              BEQ     opLEA               * Yes finish testing for LEA
0000136A  3607                     514              MOVE.W  D7,D3               * Copy fresh copy of instruction to shift
0000136C  183C 0008                515              MOVE.B  #8,D4          * Load 8 bit shifter
00001370  E86B                     516              LSR.W   D4,D3               * Shift current instruction
00001372  0243 000F                517              ANDI.W  #$000F,D3           * Isolate last 4 bits (LSB)
00001376  C6FC 0006                518              MULU    #6,D3               * Form offset for next JMP table
0000137A  4DF9 000013B6            519              LEA     op0100table,A6         * Load next JMP table 
00001380  4EB6 3000                520              JSR     00(A6,D3)           * Jump to next instruction per next 4 bits
00001384  4EF9 0000138A            521              JMP     endop0100            * Once returned from jump table, skip to end
0000138A  4E75                     522  endop0100   RTS         
0000138C                           523  **LEA******************************************************* 
0000138C  14FC 004C                524  opLEA       MOVE.B  #$4C, (A2)+     *'L' to buffer
00001390  14FC 0045                525              MOVE.B  #$45, (A2)+     *'E' to buffer
00001394  14FC 0041                526              MOVE.B  #$41, (A2)+     *'A' to buffer
00001398  14FC 0020                527              MOVE.B  #$20, (A2)+     *' ' to buffer
0000139C  14FC 0020                528              MOVE.B  #$20, (A2)+     *' ' to buffer
000013A0  4EB9 00001884            529              JSR     GETEA
000013A6  14FC 002C                530              MOVE.B  #$2C,(A2)+      *',' to buffer
000013AA  14FC 0041                531              MOVE.B  #$41,(A2)+      *'A' to buffer
000013AE  4EB9 00001A10            532              JSR     REG2BUFFER
000013B4  4E75                     533  endopLEA    RTS                     *return   
000013B6                           534                        
000013B6                           535  *==========================================================
000013B6                           536  *  ___ _____ _   ___ _____   _____ _   ___ _    ___ 
000013B6                           537  * / __|_   _/_\ | _ \_   _| |_   _/_\ | _ ) |  | __|
000013B6                           538  * \__ \ | |/ _ \|   / | |     | |/ _ \| _ \ |__| _| 
000013B6                           539  * |___/ |_/_/ \_\_|_\ |_|     |_/_/ \_\___/____|___|
000013B6                           540  *                                                  
000013B6                           541  *0100 SECOND LAYER OPCODE TABLE SUBROUTINES 
000013B6                           542  op0100table
000013B6  4EF9 00001418            543              JMP     op0100_0000   *BADINST          
000013BC  4EF9 00001420            544              JMP     op0100_0001   *BADINST           
000013C2  4EF9 00001428            545              JMP     op0100_0010   *CLR
000013C8  4EF9 0000144E            546              JMP     op0100_0011   *BADINST
000013CE  4EF9 00001456            547              JMP     op0100_0100   *NEG*
000013D4  4EF9 0000147C            548              JMP     op0100_0101   *BADINST
000013DA  4EF9 00001484            549              JMP     op0100_0110   *NOT*
000013E0  4EF9 000014AA            550              JMP     op0100_0111   *BADINST
000013E6  4EF9 000014B2            551              JMP     op0100_1000   *SWAP*
000013EC  4EF9 000014BA            552              JMP     op0100_1001   *BADINST
000013F2  4EF9 000014C2            553              JMP     op0100_1010   *BADINST
000013F8  4EF9 000014CA            554              JMP     op0100_1011   *BADINST
000013FE  4EF9 000014D2            555              JMP     op0100_1100   *BADINST
00001404  4EF9 000014DA            556              JMP     op0100_1101   *BADINST
0000140A  4EF9 000014E2            557              JMP     op0100_1110   *NOP*,JMP,JSR,RTS
00001410  4EF9 00001556            558              JMP     op0100_1111   *BADINST
00001416                           559  endop0100table   
00001416  4E75                     560              RTS                   *return
00001418                           561  **0000 BADINST**********************************************
00001418  4EB9 00001B06            562  op0100_0000 JSR     BADINST
0000141E                           563  endop0100_0000
0000141E  4E75                     564              RTS
00001420                           565  **0001 BADINST**********************************************          
00001420  4EB9 00001B06            566  op0100_0001 JSR     BADINST          
00001426                           567  endop0100_0001
00001426  4E75                     568              RTS            
00001428                           569  **0010 CLR************************************************** 
00001428  14FC 0043                570  op0100_0010 MOVE.B  #$43, (A2)+     *'C' to buffer
0000142C  14FC 004C                571              MOVE.B  #$4C, (A2)+     *'L' to buffer
00001430  14FC 0052                572              MOVE.B  #$52, (A2)+     *'R' to buffer
00001434  14FC 002E                573              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001438  4EB9 00001A22            574              JSR     SIZE2BUFFER
0000143E  14FC 0020                575              MOVE.B  #$20, (A2)+     *' ' to buffer
00001442  14FC 0020                576              MOVE.B  #$20, (A2)+     *' ' to buffer
00001446  4EB9 00001884            577              JSR     GETEA
0000144C                           578  endop0100_0010    
0000144C  4E75                     579              RTS                     *return
0000144E                           580  **0011 BADINST**********************************************          
0000144E  4EB9 00001B06            581  op0100_0011 JSR     BADINST          
00001454                           582  endop0100_0011
00001454  4E75                     583              RTS  
00001456                           584  **0100 NEG************************************************** 
00001456  14FC 004E                585  op0100_0100 MOVE.B  #$4E, (A2)+     *'N' to buffer
0000145A  14FC 0045                586              MOVE.B  #$45, (A2)+     *'E' to buffer
0000145E  14FC 0047                587              MOVE.B  #$47, (A2)+     *'G' to buffer
00001462  14FC 002E                588              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001466  4EB9 00001A22            589              JSR     SIZE2BUFFER
0000146C  14FC 0020                590              MOVE.B  #$20, (A2)+     *' ' to buffer
00001470  14FC 0020                591              MOVE.B  #$20, (A2)+     *' ' to buffer
00001474  4EB9 00001884            592              JSR     GETEA
0000147A                           593  endop0100_0100   
0000147A  4E75                     594              RTS                     *return
0000147C                           595  **0101 BADINST**********************************************          
0000147C  4EB9 00001B06            596  op0100_0101 JSR     BADINST          
00001482                           597  endop0100_0101
00001482  4E75                     598              RTS  
00001484                           599  **0110 NOT************************************************** 
00001484                           600  op0100_0110 
00001484  14FC 004E                601              MOVE.B  #$4E, (A2)+     *'N' to buffer
00001488  14FC 004F                602              MOVE.B  #$4F, (A2)+     *'O' to buffer
0000148C  14FC 0054                603              MOVE.B  #$54, (A2)+     *'T' to buffer
00001490  14FC 002E                604              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001494  4EB9 00001A22            605              JSR     SIZE2BUFFER
0000149A  14FC 0020                606              MOVE.B  #$20, (A2)+     *' ' to buffer
0000149E  14FC 0020                607              MOVE.B  #$20, (A2)+     *' ' to buffer
000014A2  4EB9 00001884            608              JSR     GETEA
000014A8                           609  endop0100_0110
000014A8  4E75                     610              RTS                     *return
000014AA                           611  **0111 BADINST**********************************************          
000014AA  4EB9 00001B06            612  op0100_0111 JSR     BADINST          
000014B0                           613  endop0100_0111
000014B0  4E75                     614              RTS 
000014B2                           615  **1000 SWAP*************************************************          
000014B2  4EB9 00001B06            616  op0100_1000 JSR     BADINST     *SWAP not supported     
000014B8                           617  endop0100_1000
000014B8  4E75                     618              RTS  
000014BA                           619  **1001 BADINST**********************************************           
000014BA  4EB9 00001B06            620  op0100_1001 JSR     BADINST          
000014C0                           621  endop0100_1001
000014C0  4E75                     622              RTS 
000014C2                           623  **1010 BADINST**********************************************           
000014C2  4EB9 00001B06            624  op0100_1010 JSR     BADINST          
000014C8                           625  endop0100_1010
000014C8  4E75                     626              RTS 
000014CA                           627  **1011 BADINST**********************************************           
000014CA  4EB9 00001B06            628  op0100_1011 JSR     BADINST          
000014D0                           629  endop0100_1011
000014D0  4E75                     630              RTS 
000014D2                           631  **1100 BADINST**********************************************           
000014D2  4EB9 00001B06            632  op0100_1100 JSR     BADINST          
000014D8                           633  endop0100_1100
000014D8  4E75                     634              RTS 
000014DA                           635  **1101 BADINST**********************************************           
000014DA  4EB9 00001B06            636  op0100_1101 JSR     BADINST          
000014E0                           637  endop0100_1101
000014E0  4E75                     638              RTS 
000014E2                           639  ***1110 NOP*,RTS,JSR,JMP************************************
000014E2                           640  op0100_1110:                       
000014E2  4EB9 00001988            641              JSR     GETSIZE
000014E8  0C03 0002                642              CMPI.B  #%10, D3
000014EC  6700 0036                643              BEQ     opJSR
000014F0  0C03 0003                644              CMPI.B  #%11, D3
000014F4  6700 0046                645              BEQ     opJMP
000014F8  BE7C 4E75                646              CMP.W   #$4E75, D7      *absolute binary value
000014FC  6700 0018                647              BEQ     opRTS           * 0100 1110 0111 0101
00001500  BE7C 4E71                648              CMP.W   #$4E71, D7      *absolute binary value
00001504  6600 0600                649              BNE     BADINST         * 0100 1110 0111 0001
00001508                           650  **NOP*******************************************************            
00001508  14FC 004E                651  opNOP       MOVE.B  #$4E, (A2)+     *'N' to buffer
0000150C  14FC 004F                652              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001510  14FC 0050                653              MOVE.B  #$50, (A2)+     *'P' to buffer
00001514  4E75                     654  endopNOP    RTS                     *return
00001516                           655  **RTS*******************************************************
00001516  14FC 0052                656  opRTS       MOVE.B  #$52, (A2)+     *'R' to buffer
0000151A  14FC 0054                657              MOVE.B  #$54, (A2)+     *'T' to buffer
0000151E  14FC 0053                658              MOVE.B  #$53, (A2)+     *'S' to buffer
00001522  4E75                     659  endopRTS    RTS                     *return
00001524                           660  **JSR*******************************************************           
00001524  14FC 004A                661  opJSR       MOVE.B  #$4A, (A2)+     *'J' to buffer
00001528  14FC 0053                662              MOVE.B  #$53, (A2)+     *'S' to buffer
0000152C  14FC 0052                663              MOVE.B  #$52, (A2)+     *'R' to buffer
00001530  14FC 0020                664              MOVE.B  #$20, (A2)+     *' ' to buffer
00001534  4EB9 00001884            665              JSR     GETEA
0000153A  4E75                     666  endopJSR    RTS                     *return
0000153C                           667  **JMP*******************************************************
0000153C  14FC 004A                668  opJMP       MOVE.B  #$4A, (A2)+     *'J' to buffer
00001540  14FC 004D                669              MOVE.B  #$4D, (A2)+     *'M' to buffer
00001544  14FC 0050                670              MOVE.B  #$50, (A2)+     *'P' to buffer
00001548  14FC 0020                671              MOVE.B  #$20, (A2)+     *' ' to buffer
0000154C  4EB9 00001884            672              JSR     GETEA
00001552  4E75                     673  endopJMP    RTS                     *return                                 
00001554                           674  endop0100_1110          
00001554  4E75                     675              RTS                     *return           
00001556                           676  **1111 BADINST***************************************************           
00001556  4EB9 00001B06            677  op0100_1111 JSR     BADINST          
0000155C                           678  endop0100_1111
0000155C  4E75                     679              RTS 
0000155E                           680  ***********************************************************
0000155E                           681  *  ___ _  _ ___    _____ _   ___ _    ___ 
0000155E                           682  * | __| \| |   \  |_   _/_\ | _ ) |  | __|
0000155E                           683  * | _|| .` | |) |   | |/ _ \| _ \ |__| _| 
0000155E                           684  * |___|_|\_|___/    |_/_/ \_\___/____|___|
0000155E                           685  *                                                 
0000155E                           686  ************************************************************  
0000155E                           687  *OPCODE: 0101
0000155E                           688  *BAD INSTRUCTION
0000155E  4EF9 00001B06            689  opcode0101: JMP     BADINST
00001564  4E75                     690  endop0101   RTS
00001566                           691  *===========================================================
00001566                           692  
00001566                           693  ************************************************************  
00001566                           694  *OPCODE: 0110
00001566                           695  *Bcc
00001566  4EF9 00001B06            696  opcode0110: JMP     BADINST
0000156C  4E75                     697  endop0110   RTS
0000156E                           698  *===========================================================
0000156E                           699  
0000156E                           700  ************************************************************  
0000156E                           701  *OPCODE: 0111
0000156E                           702  *BAD INSTRUCTION
0000156E  4EF9 00001B06            703  opcode0111: JMP     BADINST
00001574  4E75                     704  endop0111   RTS
00001576                           705  *===========================================================
00001576                           706  
00001576                           707  ************************************************************  
00001576                           708  *OPCODE: 1000
00001576                           709  *OR 
00001576                           710  opcode1000: 
00001576  2607                     711              MOVE.L  D7, D3
00001578  EC8B                     712              LSR.L   #6, D3
0000157A  0243 0003                713              ANDI.W  #$03, D3
0000157E  B63C 0003                714              CMP.B   #$3, D3
00001582  6600 0008                715              BNE     opOR
00001586  4EF9 00001B06            716              JMP     BADINST
0000158C  14FC 004F                717  opOR        MOVE.B  #$4F, (A2)+     *'O' to buffer
00001590  14FC 0052                718              MOVE.B  #$52, (A2)+     *'R' to buffer
00001594  14FC 002E                719              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001598  4EB9 00001A22            720              JSR     SIZE2BUFFER     *size to buffer
0000159E  14FC 0020                721              MOVE.B  #$20, (A2)+     *' ' to buffer
000015A2  14FC 0020                722              MOVE.B  #$20, (A2)+     *' ' to buffer
000015A6  4EB9 00001992            723              JSR     GETDIRECTION    *direction bit 0 = EA; 1 = regs
000015AC  0C03 0000                724              CMPI.B  #%0, D3         *EA first?
000015B0  6600 001C                725              BNE     opOR01          
000015B4  4EB9 00001884            726              JSR     GETEA
000015BA  14FC 002C                727              MOVE.B  #$2C,(A2)+      *',' to buffer
000015BE  14FC 0044                728              MOVE.B  #$44,(A2)+      *'D' to buffer
000015C2  4EB9 00001A10            729              JSR     REG2BUFFER
000015C8  4EF9 000015E2            730              JMP     endop1000
000015CE                           731   
000015CE  14FC 0044                732  opOR01      MOVE.B  #$44,(A2)+      *'D' to buffer
000015D2  4EB9 00001A10            733              JSR     REG2BUFFER            
000015D8  14FC 002C                734              MOVE.B  #$2C,(A2)+      *',' to buffer
000015DC  4EB9 00001884            735              JSR     GETEA
000015E2  4E75                     736  endop1000   RTS
000015E4                           737  *===========================================================
000015E4                           738  
000015E4                           739  ************************************************************  
000015E4                           740  *OPCODE: 1001
000015E4                           741  *SUB, SUBA
000015E4                           742  opcode1001:
000015E4  14FC 0053                743              MOVE.B  #$53, (A2)+     *'S' to buffer
000015E8  14FC 0055                744              MOVE.B  #$55, (A2)+     *'U' to buffer
000015EC  14FC 0042                745              MOVE.B  #$42, (A2)+     *'B' to buffer
000015F0  4EB9 00001988            746              JSR     GETSIZE         *get the instruction size (OPMODE)
000015F6  B63C 0003                747              CMP.B   #%11, D3        *11 = SUBA  
000015FA  6600 0046                748              BNE     opsubSub
000015FE  14FC 0041                749              MOVE.B  #$41, (A2)+     *'A' to buffer
00001602  14FC 002E                750              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001606  3607                     751              MOVE.W  D7, D3          *move to utility
00001608  E08B                     752              LSR.L   #8, D3          *shift for opmode
0000160A  0243 0001                753              ANDI.W  #$0001, D3      *isolate 8 to determine size
0000160E  B63C 0001                754              CMP.B   #%1, D3         *long?
00001612  6700 0008                755              BEQ     opsubL          *it's a longword
00001616  4EF9 00001620            756              JMP     opsubSuba
0000161C                           757  **SUBA******************************************************            
0000161C  14FC 004C                758  opsubL      MOVE.B  #$4C, (A2)+     *'L' to buffer
00001620  14FC 0020                759  opsubSuba   MOVE.B  #$20, (A2)+     *' ' to buffer    
00001624  14FC 0020                760              MOVE.B  #$20, (A2)+     *' ' to buffer
00001628  4EB9 00001884            761              JSR     GETEA           *get effective address
0000162E  14FC 002C                762              MOVE.B  #$2C,(A2)+      *',' to buffer
00001632  14FC 0041                763              MOVE.B  #$41,(A2)+      *'A' to buffer
00001636  4EB9 00001A10            764              JSR     REG2BUFFER      *get the register number
0000163C  4EF9 0000168C            765              JMP     endop1001       *return
00001642                           766  **SUB*EA>>Register****************************************** 
00001642  14FC 002E                767  opsubSub    MOVE.B  #$2E, (A2)+     *'.' to buffer
00001646  4EB9 00001A22            768              JSR     SIZE2BUFFER     *send size to buffer
0000164C  14FC 0009                769              MOVE.B  #$09, (A2)+     *tab
00001650  4EB9 00001992            770              JSR     GETDIRECTION    *isolate
00001656  B63C 0000                771              CMP.B   #%0, D3         *direction bit 0 = EA; 1 = regs
0000165A  6600 001C                772              BNE     opsubSubR         
0000165E  4EB9 00001884            773              JSR     GETEA           *get effective address
00001664  14FC 002C                774              MOVE.B  #$2C,(A2)+      *',' to buffer   
00001668  14FC 0044                775              MOVE.B  #$44,(A2)+      *'D' to buffer
0000166C  4EB9 00001A10            776              JSR     REG2BUFFER      *get the register number
00001672  4EF9 0000168C            777              JMP     endop1001       *return
00001678                           778  **SUB*Register>>EA******************************************            
00001678  14FC 0044                779  opsubSubR   MOVE.B  #$44,(A2)+      *'D' to buffer
0000167C  4EB9 00001A10            780              JSR     REG2BUFFER      *get the register number
00001682  14FC 002C                781              MOVE.B  #$2C,(A2)+      *',' to buffer
00001686  4EB9 00001884            782              JSR     GETEA           *get effective address
0000168C  4E75                     783  endop1001   RTS                     *return
0000168E                           784  *===========================================================
0000168E                           785                                                         
0000168E                           786  ************************************************************  
0000168E                           787  *OPCODE: 1010
0000168E                           788  *BAD INSTRUCTION
0000168E  4EF9 00001B06            789  opcode1010: JMP     BADINST
00001694  4E75                     790  endop1010   RTS
00001696                           791  *===========================================================
00001696                           792  
00001696                           793  ************************************************************  
00001696                           794  *OPCODE: 1011
00001696                           795  *CMP,CMPA
00001696                           796  *EOR is not applicable to this assignment and will be 
00001696                           797  *regarded as a bad instruction
00001696                           798  opcode1011: 
00001696  4EB9 00001988            799              JSR     GETSIZE
0000169C  0C03 0003                800              CMPI.B   #%11, D3
000016A0  6600 0040                801              BNE     opcmp
000016A4                           802  **CMPA******************************************************             
000016A4  14FC 0043                803  opCMPA      MOVE.B  #$43, (A2)+     *'C' to buffer
000016A8  14FC 004D                804              MOVE.B  #$4D, (A2)+     *'M' to buffer
000016AC  14FC 0050                805              MOVE.B  #$50, (A2)+     *'P' to buffer
000016B0  14FC 0041                806              MOVE.B  #$41, (A2)+     *'A' to buffer
000016B4  14FC 002E                807              MOVE.B  #$2E, (A2)+     *'.' to buffer
000016B8  2607                     808              MOVE.L  D7, D3
000016BA  14FC 0020                809              MOVE.B  #$20, (A2)+     *' ' to buffer
000016BE  14FC 0020                810              MOVE.B  #$20, (A2)+     *' ' to buffer
000016C2                           811              
000016C2  4EB9 00001A22            812              JSR     SIZE2BUFFER
000016C8  4EB9 00001884            813              JSR     GETEA
000016CE  14FC 002C                814              MOVE.B  #$2C, (A2)+     *',' to buffer
000016D2  14FC 0041                815              MOVE.B  #$41, (A2)+     *'A' to buffer
000016D6  4EB9 00001A10            816              JSR     REG2BUFFER
000016DC  4EF9 00001730            817              JMP     endop1011
000016E2                           818  **CMP*******************************************************             
000016E2  2607                     819  opCMP       MOVE.L  D7, D3
000016E4  4EB9 00001992            820              JSR     GETDIRECTION
000016EA  0C03 0000                821              CMPI.B   #%0, D3
000016EE  6600 003A                822              BNE     opeor
000016F2                           823  
000016F2  14FC 0043                824              MOVE.B  #$43, (A2)+     *'C' to buffer
000016F6  14FC 004D                825              MOVE.B  #$4D, (A2)+     *'M' to buffer
000016FA  14FC 0050                826              MOVE.B  #$50, (A2)+     *'P' to buffer
000016FE  14FC 002E                827              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001702  4EB9 00001A22            828              JSR     SIZE2BUFFER
00001708  14FC 0020                829              MOVE.B  #$20, (A2)+     *' ' to buffer
0000170C  14FC 0020                830              MOVE.B  #$20, (A2)+     *' ' to buffer
00001710  4EB9 00001884            831              JSR     GETEA
00001716  14FC 002C                832              MOVE.B  #$2C, (A2)+     *',' to buffer
0000171A  14FC 0044                833              MOVE.B  #$44, (A2)+     *'D' to buffer
0000171E  4EB9 00001A10            834              JSR     REG2BUFFER
00001724  4EF9 00001730            835              JMP     endop1011
0000172A                           836  **EOR*******************************************************            
0000172A  4EF9 00001B06            837  opEOR       JMP     BADINST              
00001730  4E75                     838  endop1011   RTS
00001732                           839  *===========================================================
00001732                           840  
00001732                           841  ************************************************************  
00001732                           842  *OPCODE: 1100
00001732                           843  *AND
00001732                           844  *MULU, EXG are not applicable to this assignment and will be 
00001732                           845  *regarded as a bad instruction
00001732                           846  opcode1100:
00001732  3607                     847              MOVE.W  D7, D3          *move to utility
00001734  EC8B                     848              LSR.L   #6, D3          *shift
00001736  0243 0003                849              ANDI.W  #$3, D3         *isolate
0000173A  B63C 0003                850              CMP.B   #$3, D3         *MULU/MULS?
0000173E  6700 03C6                851              BEQ     BADINST         *instruction not supported
00001742  3607                     852              MOVE.W  D7, D3          *move to utility
00001744  E68B                     853              LSR.L   #3, D3          *shift
00001746  0203 001F                854              ANDI.B  #$1F, D3        *isolate
0000174A  B63C 0008                855              CMP.B   #$08, D3        *EXG?
0000174E  6700 03B6                856              BEQ     BADINST         *instruction not supported
00001752  B63C 0009                857              CMP.B   #$09, D3        *EXG?
00001756  6700 03AE                858              BEQ     BADINST         *instruction not supported
0000175A  B63C 0011                859              CMP.B   #$11, D3        *EXG?
0000175E  6700 03A6                860              BEQ     BADINST         *ok, phew made it to AND
00001762                           861              
00001762  14FC 0041                862              MOVE.B  #$41, (A2)+     *'A' to buffer
00001766  14FC 004E                863              MOVE.B  #$4E, (A2)+     *'N' to buffer
0000176A  14FC 0044                864              MOVE.B  #$44, (A2)+     *'D' to buffer
0000176E  14FC 002E                865              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001772  4EB9 00001A22            866              JSR     SIZE2BUFFER     *send size to buffer
00001778  14FC 0020                867              MOVE.B  #$20, (A2)+     *' ' to buffer
0000177C  14FC 0020                868              MOVE.B  #$20, (A2)+     *' ' to buffer
00001780  4EB9 00001992            869              JSR     GETDIRECTION    *isolate bit for direction
00001786  0C03 0000                870              CMPI.B  #%0, D3         *direction bit 0 = EA; 1 = regs
0000178A  6600 001C                871              BNE     opAND01         *
0000178E  4EB9 00001884            872              JSR     GETEA           *get effective address
00001794  14FC 002C                873              MOVE.B  #$2C, (A2)+     *',' to buffer
00001798  14FC 0044                874              MOVE.B  #$44, (A2)+     *'D' to buffer
0000179C  4EB9 00001A10            875              JSR     REG2BUFFER      *get the register number
000017A2  4EF9 000017BC            876              JMP     endop1100     
000017A8                           877           
000017A8  14FC 0044                878  opAND01     MOVE.B  #$44, (A2)+     *'D' to buffer
000017AC  4EB9 00001A10            879              JSR     REG2BUFFER      *get the register number
000017B2  14FC 002C                880              MOVE.B  #$2C, (A2)+     *',' to buffer
000017B6  4EB9 00001884            881              JSR     GETEA           *get effective address 
000017BC  4E75                     882  endop1100   RTS                     *return
000017BE                           883  *===========================================================
000017BE                           884  
000017BE                           885  ************************************************************  
000017BE                           886  *OPCODE: 1101
000017BE                           887  *ADD,ADDA
000017BE                           888  opcode1101: 
000017BE  14FC 0041                889              MOVE.B  #$41, (A2)+     *'A' to buffer
000017C2  14FC 0044                890              MOVE.B  #$44, (A2)+     *'D' to buffer
000017C6  14FC 0044                891              MOVE.B  #$44, (A2)+     *'D' to buffer
000017CA  4EB9 00001988            892              JSR     GETSIZE         *
000017D0  0C03 0003                893              CMPI.B  #%11, D3        *11?
000017D4  6600 004E                894              BNE     opadd           *
000017D8  14FC 0041                895              MOVE.B  #$41, (A2)+     *'A' to buffer
000017DC  14FC 002E                896              MOVE.B  #$2E, (A2)+     *'.' to buffer
000017E0  3607                     897              MOVE.W  D7, D3          *move to utility
000017E2  E08B                     898              LSR.L   #8, D3          *shift
000017E4  0243 0001                899              ANDI.W  #$0001, D3      *isolate
000017E8  0C03 0001                900              CMPI.B  #%1, D3         *long?
000017EC  6700 000C                901              BEQ     opaddL          *
000017F0  14FC 0057                902              MOVE.B  #$57,(A2)+      *'W' to buffer
000017F4  4EF9 000017FE            903              JMP     opadda  
000017FA                           904  **ADD.L*****************************************************
000017FA  14FC 004C                905  opADDL      MOVE.B  #$4C,(A2)+      *'L' to buffer
000017FE                           906  *ADDA*******************************************************
000017FE  14FC 0020                907  opADDA      MOVE.B  #$20, (A2)+     *' ' to buffer
00001802  14FC 0020                908              MOVE.B  #$20, (A2)+     *' ' to buffer
00001806  14FC 0020                909              MOVE.B  #$20, (A2)+     *' ' to buffer
0000180A  4EB9 00001884            910              JSR     GETEA           *get effective address 
00001810  14FC 002C                911              MOVE.B  #$2C, (A2)+     *',' to buffer
00001814  14FC 0041                912              MOVE.B  #$41, (A2)+     *'A' to buffer
00001818  4EB9 00001A10            913              JSR     REG2BUFFER      *get the register number
0000181E  4EF9 00001872            914              JMP     endop1101
00001824                           915  **ADD*******************************************************
00001824  14FC 002E                916  opADD       MOVE.B  #$2E, (A2)+     *'.' to buffer  
00001828  4EB9 00001A22            917              JSR     SIZE2BUFFER     *send size to buffer
0000182E  14FC 0020                918              MOVE.B  #$20, (A2)+     *' ' to buffer
00001832  14FC 0020                919              MOVE.B  #$20, (A2)+     *' ' to buffer
00001836  4EB9 00001992            920              JSR     GETDIRECTION    *isolate bit for direction
0000183C  0C03 0000                921              CMPI.B   #%0, D3        *direction bit 0 = EA; 1 = regs
00001840  6600 001C                922              BNE     opADD01         *
00001844  4EB9 00001884            923              JSR     GETEA           *get effective address
0000184A  14FC 002C                924              MOVE.B  #$2C, (A2)+     *',' to buffer
0000184E  14FC 0044                925              MOVE.B  #$44, (A2)+     *'D' to buffer
00001852  4EB9 00001A10            926              JSR     REG2BUFFER      *get the register number
00001858  4EF9 00001872            927              JMP     endop1101   
0000185E                           928  **EA first************************************************** 
0000185E  14FC 0044                929  opADD01    MOVE.B  #$44, (A2)+     *'D' to buffer
00001862  4EB9 00001A10            930              JSR     REG2BUFFER      *get the register number
00001868  14FC 002C                931              MOVE.B  #$2C, (A2)+     *',' to buffer
0000186C  4EB9 00001884            932              JSR     GETEA           *get effective address
00001872  4E75                     933  endop1101   RTS                     *return           
00001874                           934  *===========================================================
00001874                           935  
00001874                           936  ************************************************************  
00001874                           937  *OPCODE: 1110
00001874                           938  *ASR, LSL
00001874  4EF9 00001B06            939  opcode1110: JMP     BADINST
0000187A  4E75                     940  endop1110   RTS
0000187C                           941  *===========================================================
0000187C                           942  
0000187C                           943  ************************************************************  
0000187C                           944  *OPCODE: 1111
0000187C                           945  *BAD INSTRUCTION
0000187C  4EF9 00001B06            946  opcode1111: JMP     BADINST
00001882  4E75                     947  endop111    RTS
00001884                           948   *===========================================================             
00001884                           949  
00001884                           950  ************************************************************
00001884                           951  *  _____ _____ _____ _____ ____ _____ _____     _______      _    ____  ____  ____  _____ ____ ____  
00001884                           952  * | ____|  ___|  ___| ____/ ___|_   _|_ _\ \   / / ____|    / \  |  _ \|  _ \|  _ \| ____/ ___/ ___| 
00001884                           953  * |  _| | |_  | |_  |  _|| |     | |  | | \ \ / /|  _|     / _ \ | | | | | | | |_) |  _| \___ \___ \ 
00001884                           954  * | |___|  _| |  _| | |__| |___  | |  | |  \ V / | |___   / ___ \| |_| | |_| |  _ <| |___ ___) |__) |
00001884                           955  * |_____|_|   |_|   |_____\____| |_| |___|  \_/  |_____| /_/   \_\____/|____/|_| \_\_____|____/____/ 
00001884                           956  *                                                                                                   
00001884                           957  *GETEA
00001884                           958  *Description: Converts the opcode instruction EA
00001884                           959  * 1001 0110 0100 0001
00001884                           960  *             ^-----^
00001884                           961  *Registers Used:
00001884                           962  *For consistency, please utilize registers in the following way.
00001884                           963  *
00001884                           964  *D1 - utility register
00001884                           965  *D3 - utility register
00001884                           966  *D7 - copy of working address
00001884                           967  *
00001884                           968  *A2 - buffer address of decoded instruction
00001884                           969  *A6 - jump table
00001884                           970  ************************************************************
00001884                           971  GETEA:
00001884  4DF9 000018A2            972              LEA     EA_TABLE, A6
0000188A  4283                     973              CLR.L   D3
0000188C  3607                     974              MOVE.W  D7, D3
0000188E  0243 003F                975              ANDI.W  #$003F, D3
00001892  123C 0003                976              MOVE.B  #3, D1
00001896  E26B                     977              LSR.W   D1, D3
00001898  C6FC 0006                978              MULU    #6, D3
0000189C  4EB6 3000                979              JSR     0(A6, D3)
000018A0  4E75                     980              RTS                     *return
000018A2                           981  *===========================================================
000018A2                           982  
000018A2                           983  ************************************************************
000018A2                           984  *GET_TABLE
000018A2                           985  *Description: Jump table of Effective Address Modes
000018A2                           986  ************************************************************
000018A2                           987  EA_TABLE:       
000018A2  4EF9 000018D2            988              JMP     eacode000
000018A8  4EF9 000018E4            989              JMP     eacode001
000018AE  4EF9 000018F6            990              JMP     eacode010
000018B4  4EF9 00001910            991              JMP     eacode011
000018BA  4EF9 0000192E            992              JMP     eacode100
000018C0  4EF9 0000194C            993              JMP     eacode101
000018C6  4EF9 00001952            994              JMP     eacode110
000018CC  4EF9 00001958            995              JMP     eacode111
000018D2                           996  *===========================================================
000018D2                           997  
000018D2                           998  ************************************************************
000018D2                           999  *EA CODES
000018D2                          1000  *Description: Lsit of Effective Address Subrotines
000018D2                          1001  *000,001,010,011,100,[101],[110],111
000018D2                          1002  *Registers Used:
000018D2                          1003  *TODO
000018D2                          1004  *
000018D2                          1005  *Data Register**********************************************
000018D2  3607                    1006  eacode000   MOVE.W      D7, D3          *move to utility
000018D4  0243 0007               1007              ANDI.W      #$7, D3         *isolate
000018D8  14FC 0044               1008              MOVE.B      #$44,(A2)+      *'D' to buffer
000018DC  0603 0030               1009              ADD.B       #$30, D3        *convert register number to ascii
000018E0  14C3                    1010              MOVE.B      D3,(A2)+        *to buffer                  
000018E2  4E75                    1011  endea000    RTS                         *return
000018E4                          1012  *Address Register*******************************************
000018E4  3607                    1013  eacode001   MOVE.W      D7, D3          *move to utility
000018E6  0243 0007               1014              ANDI.W      #$7, D3         *isolate
000018EA  14FC 0041               1015              MOVE.B      #$41, (A2)+     *'A' to buffer
000018EE  0603 0030               1016              ADD.B       #$30, D3        *convert register number to ascii
000018F2  14C3                    1017              MOVE.B      D3,(A2)+        *to buffer  
000018F4  4E75                    1018  endea001    RTS                         *return
000018F6                          1019  *Address
000018F6  3607                    1020  eacode010   MOVE.W      D7, D3          *move to utility
000018F8  0243 0007               1021              ANDI.W      #$7, D3         *isolate
000018FC  14FC 0028               1022              MOVE.B      #$28,(A2)+      *'(' to buffer            
00001900  14FC 0041               1023              MOVE.B      #$41,(A2)+      *'A' to buffer
00001904  0603 0030               1024              ADD.B       #$30, D3        *convert register number to ascii
00001908  14C3                    1025              MOVE.B      D3,(A2)+        *to buffer  
0000190A  14FC 0029               1026              MOVE.B      #$29,(A2)+      *')' to buffe
0000190E  4E75                    1027  endea010    RTS                         *return
00001910                          1028  *Address with Postincrement*********************************
00001910  3607                    1029  eacode011   MOVE.W      D7, D3          *move to utility
00001912  0243 0007               1030              ANDI.W      #$7, D3         *isolate
00001916  14FC 0028               1031              MOVE.B      #$28,(A2)+      *'(' to buffer            
0000191A  14FC 0041               1032              MOVE.B      #$41,(A2)+      *'A' to buffer
0000191E  0603 0030               1033              ADD.B       #$30, D3        *convert register number to ascii
00001922  14C3                    1034              MOVE.B      D3,(A2)+        *to buffer  
00001924  14FC 0029               1035              MOVE.B      #$29,(A2)+      *')' to buffer
00001928  14FC 002B               1036              MOVE.B      #$2B, (A2)+     *'+' to buffer
0000192C  4E75                    1037  endea011    RTS                         *return
0000192E                          1038  *Address with Predecrement**********************************
0000192E  3607                    1039  eacode100   MOVE.W      D7, D3          *move to utility
00001930  0243 0007               1040              ANDI.W      #$7, D3         *isolate
00001934  14FC 002D               1041              MOVE.B      #$2D,(A2)+      *'-' to buffer 
00001938  14FC 0028               1042              MOVE.B      #$28,(A2)+      *'(' to buffer            
0000193C  14FC 0041               1043              MOVE.B      #$41,(A2)+      *'A' to buffer
00001940  0603 0030               1044              ADD.B       #$30, D3        *convert register number to ascii
00001944  14C3                    1045              MOVE.B      D3,(A2)+        *to buffer  
00001946  14FC 0029               1046              MOVE.B      #$29,(A2)+      *')' to buffe
0000194A  4E75                    1047  endea100    RTS                         *return
0000194C                          1048  *Bad Instruction********************************************
0000194C  4EF9 00001B06           1049  eacode101   JMP         BADINST
00001952                          1050  *Bad Instruction********************************************
00001952  4EF9 00001B06           1051  eacode110   JMP         BADINST
00001958                          1052  *Immediate*Absolute*****************************************
00001958  4EB9 00001980           1053  eacode111   JSR         GETREGISTER     *isolate register bit
0000195E  0C03 0000               1054              CMPI.B      #$0, D3         *word?
00001962  6700 012C               1055              BEQ         WORD2BUFFER
00001966  0C03 0001               1056              CMPI.B      #$1, D3         *long?
0000196A  6700 0150               1057              BEQ         LONG2BUFFER
0000196E  0C03 0004               1058              CMPI.B      #$4, D3         *Immediate Data?
00001972  6700 0174               1059              BEQ         IMM2BUFER
00001976  0C03 0002               1060              CMPI.B      #$2, D3         *PC?
0000197A  6700 018A               1061              BEQ         BADINST
0000197E  4E75                    1062  endea111    RTS                         *return
00001980                          1063  *===========================================================
00001980                          1064  
00001980                          1065  ************************************************************
00001980                          1066  *GETREGISTER
00001980                          1067  *Description: Converts register bit and stores in D3
00001980                          1068  ************************************************************ 
00001980                          1069  GETREGISTER:
00001980  3607                    1070              MOVE.W  D7, D3
00001982  0243 0007               1071              ANDI.W  #$07, D3
00001986  4E75                    1072  endrb       RTS
00001988                          1073  *===========================================================
00001988                          1074  
00001988                          1075  ************************************************************
00001988                          1076  *GETSIZE
00001988                          1077  *Description: Returns the size of the bit in 6-7 (.B, .W, .L)
00001988                          1078  * 1001 0110 0100 0001
00001988                          1079  *       ^^--------->|
00001988                          1080  *Registers Used:
00001988                          1081  *D3 - size bit
00001988                          1082  *D7 - copy of instruction
00001988                          1083  ************************************************************
00001988                          1084  GETSIZE:
00001988  3607                    1085              MOVE.W  D7, D3          *move to utility
0000198A  EC4B                    1086              LSR.W   #6, D3          *shift
0000198C  0243 0003               1087              ANDI.W  #$0003, D3      *isolate
00001990  4E75                    1088  endGS       RTS                     *return
00001992                          1089  *===========================================================
00001992                          1090  
00001992                          1091  ************************************************************
00001992                          1092  *GETDIRECTION
00001992                          1093  *Description: Finds direction of the instruction and sets it to the utility register
00001992                          1094  * 1001 0110 0100 0001
00001992                          1095  *         ^-------->|
00001992                          1096  *Registers Used:
00001992                          1097  *D3 - size bit
00001992                          1098  *D7 - copy of instruction 
00001992                          1099  ************************************************************
00001992                          1100  GETDIRECTION:
00001992  3607                    1101              MOVE.W  D7, D3          *move to utility
00001994  E08B                    1102              LSR.L   #8, D3          *shift 8
00001996  0203 0001               1103              ANDI.B  #01, D3         *isolate 8th bit
0000199A  4E75                    1104  endgd       RTS                     *return
0000199C                          1105  *===========================================================
0000199C                          1106  
0000199C                          1107  ************************************************************
0000199C                          1108  *SWAPREG         
0000199C                          1109  *Description: For double EA move instructions, swaps registers to use EA jump table
0000199C                          1110  *Registers Used:
0000199C                          1111  *D3 - size bit
0000199C                          1112  *D4 - hold register for swap bits
0000199C                          1113  *D7 - swapped EA mode 
0000199C                          1114  SWAPREG:
0000199C  4283                    1115              CLR.L   D3              *
0000199E  3607                    1116              MOVE.W  D7,D3           *move to utility
000019A0  E04B                    1117              LSR.W   #8,D3           *shift
000019A2  E24B                    1118              LSR.W   #1,D3           *shift
000019A4  0243 0007               1119              ANDI.W  #$0007,D3       *
000019A8  8843                    1120              OR.W    D3,D4           *store bits for swap
000019AA  3607                    1121              MOVE.W  D7,D3           *move to utility
000019AC  E64B                    1122              LSR.W   #3,D3           *shift bits 6-8 to normal ea position
000019AE  0243 0038               1123              ANDI.W  #$0038, D3
000019B2  8843                    1124              OR.W    D3,D4           *
000019B4  4EB9 000019BE           1125              JSR     srSize          *get mode size
000019BA  3E04                    1126              MOVE.W  D4,D7           *load swap register
000019BC  4E75                    1127  endswap     RTS                     *return
000019BE                          1128  
000019BE  3607                    1129  srSize      MOVE.W  D7,D3           *move to utility
000019C0  E04B                    1130              LSR.W   #8,D3           *shift
000019C2  E84B                    1131              LSR.W   #4,D3           *
000019C4  0243 0003               1132              ANDI.W  #$0003,D3       *isolate
000019C8  B63C 0001               1133              CMP.B   #$1,D3          *byte?
000019CC  6700 0020               1134              BEQ     endsr           *yes
000019D0  B63C 0002               1135              CMP.B   #$2,D3          *long?
000019D4  6700 0014               1136              BEQ     srL             *yes
000019D8  B63C 0003               1137              CMP.B   #$3,D3          *word?
000019DC  6600 0128               1138              BNE     BADINST         *No? bad instrustion        
000019E0  0044 0040               1139  srW         ORI.W   #$0040,D4       *add size
000019E4  4EF9 000019EE           1140              JMP     endsr           *
000019EA  0044 0080               1141  srL         ORI.W   #$0080,D4       *add size
000019EE  4E75                    1142  endsr       RTS                     *return
000019F0                          1143  *===========================================================
000019F0                          1144  
000019F0                          1145  SHIFT:       
000019F0  E8AB                    1146              LSR.L   D4,D3               
000019F2  0243 000F               1147              ANDI.W  #$000F,D3
000019F6  4E75                    1148  endSHFIT    RTS
000019F8                          1149  
000019F8                          1150  ************************************************************
000019F8                          1151  *  ____  _   _ _____ _____ _____ ____ 
000019F8                          1152  * | __ )| | | |  ___|  ___| ____|  _ \ 
000019F8                          1153  * |  _ \| | | | |_  | |_  |  _| | |_) | 
000019F8                          1154  * | |_) | |_| |  _| |  _| | |___|  _ <  
000019F8                          1155  * |____/ \___/|_|   |_|   |_____|_| \_\ 
000019F8                          1156  *
000019F8                          1157  *BUFFER SUBROUTINES                                                                                 
000019F8                          1158  *Description: Puts word to print buffer
000019F8                          1159  *D3 - Utility register
000019F8                          1160  *D6 - Counter
000019F8                          1161  *A0 - Utility address
000019F8                          1162  *A2 - Address buffer
000019F8                          1163  *NOTES:
000019F8                          1164  *Adding chars to the buffer a byte at a time seems to work the best
000019F8                          1165  *Adding words or longwords can sometimes land on odd memory address
000019F8                          1166  *which do no allow memory to be written to.  To combat this, move
000019F8                          1167  *chars as bytes.  Tideous, but effective.
000019F8                          1168  *EXAMPLE:   MOVE.B  #$20, (A2)+     *' ' to buffer
000019F8                          1169  *----------------------------------------------------------- 
000019F8                          1170  
000019F8                          1171  ************************************************************
000019F8                          1172  *HEX2ASCII
000019F8                          1173  *Description: Converts bit to ASCII and send to buffer
000019F8                          1174  ************************************************************            
000019F8                          1175  HEX2ASCII:  
000019F8  B63C 000A               1176              CMP.B       #$A, D3     *hex char?
000019FC  6C00 000A               1177              BGE         letter      *letter?
00001A00  0603 0030               1178  number      ADDI.B      #$30,D3     *convert to ASCII
00001A04  6000 0006               1179              BRA         W2B         *
00001A08  0603 0037               1180  letter      ADDI.B      #$37,D3     *
00001A0C  14C3                    1181  W2B         MOVE.B      D3,(A2)+    *to buffer
00001A0E  4E75                    1182  endH2A      RTS                     *return
00001A10                          1183  *===========================================================   
00001A10                          1184  
00001A10                          1185  ************************************************************
00001A10                          1186  *REG2BUFFER
00001A10                          1187  *Description: Finds the register size and sends it to the output buffer
00001A10                          1188  * 1001 0110 0100 0001
00001A10                          1189  *      ^-^--------->|
00001A10                          1190  *Registers Used:
00001A10                          1191  *D3 - size bit
00001A10                          1192  *D7 - copy of instruction
00001A10                          1193  *A2 - buffer address of decoded instruction          
00001A10                          1194  ************************************************************
00001A10                          1195  REG2BUFFER:
00001A10  3607                    1196              MOVE.W  D7,D3            *move to utility
00001A12  E08B                    1197              LSR.L   #8,D3            *shift
00001A14  E28B                    1198              LSR.L   #1,D3            *shift
00001A16  0203 0007               1199              ANDI.B  #$7,D3           *isolate last 7 bits for register number
00001A1A  0603 0030               1200              ADD.B   #$30,D3          *convert register number to ascii
00001A1E  14C3                    1201              MOVE.B  D3,(A2)+         *to buffer
00001A20  4E75                    1202  endR2B      RTS                      *return
00001A22                          1203  *===========================================================
00001A22                          1204  
00001A22                          1205  ************************************************************
00001A22                          1206  *SIZE2BUFFER
00001A22                          1207  *Description: Isolates and converts the instruction size and sends it to the output buffer
00001A22                          1208  *             Byte, word, long read word in memory for instructions that utilize immediate
00001A22                          1209  *             data.  At the end of the instruction, the working memory address is advanced.
00001A22                          1210  *Registers Used:
00001A22                          1211  *D3 - size bit
00001A22                          1212  *A2 - buffer address of decoded instruction
00001A22                          1213  ************************************************************
00001A22                          1214  SIZE2BUFFER:
00001A22  4EB8 1988               1215              JSR     GETSIZE         *get the size of bit
00001A26  B63C 0000               1216              CMP.B   #%00, D3        *byte
00001A2A  6700 001E               1217              BEQ     s2bB            *
00001A2E  B63C 0001               1218              CMP.B   #%01, D3        *word
00001A32  6700 0020               1219              BEQ     s2bW            *
00001A36  B63C 0002               1220              CMP.B   #%10, D3        *long
00001A3A  6700 0022               1221              BEQ     s2bL            *
00001A3E  4EF9 00001B06           1222              JMP     BADINST         *bad instruction
00001A44  4EF9 00001A62           1223              JMP     ends2b          *
00001A4A                          1224              
00001A4A  14FC 0042               1225  s2bB        MOVE.B  #$42,(A2)+      *'B' to buffer
00001A4E  4EF9 00001A62           1226              JMP     ends2b          *
00001A54  14FC 0057               1227  s2bW        MOVE.B  #$57,(A2)+      *'W' to buffer
00001A58  4EF9 00001A62           1228              JMP     ends2b          *
00001A5E  14FC 004C               1229  s2bL        MOVE.B  #$4C,(A2)+      *'L' to buffer
00001A62  4E75                    1230  ends2b      RTS                     *return
00001A64                          1231  *===========================================================
00001A64                          1232  
00001A64                          1233  ************************************************************
00001A64                          1234  *BYTE2BUFFER
00001A64                          1235  *Description: Converts a byte in memory to ASCII and sends it
00001A64                          1236  *            to the buffer.
00001A64                          1237  *Buffer: $XX
00001A64                          1238  *Registers Used:
00001A64                          1239  *D2 - utility register
00001A64                          1240  *D3 - utility register
00001A64                          1241  *D4 - counter
00001A64                          1242  *A0 - working address
00001A64                          1243  *A2 - buffer address of decoded instruction
00001A64                          1244  ************************************************************
00001A64                          1245  BYTE2BUFFER:  
00001A64  14FC 0024               1246              MOVE.B  #$24, (A2)+     *'$' to buffer
00001A68  4284                    1247              CLR.L       D4                  *clear counter
00001A6A                          1248              *ADDQ.W      #2, A0
00001A6A  3410                    1249              MOVE.W      (A0), D2
00001A6C  183C 0002               1250              MOVE.B      #2, D4              *load counter
00001A70                          1251  **LOOP******************************************************
00001A70                          1252  B2BLoop                 
00001A70  B83C 0000               1253              CMP.B      #$0, D4            *end?
00001A74  6700 0014               1254              BEQ         endB2B             *
00001A78  E91A                    1255              ROL.B       #4, D2             *roll bits
00001A7A  3602                    1256              MOVE.W      D2, D3             *move to utility
00001A7C  0243 000F               1257              ANDI.W      #$000F, D3          *isolate  
00001A80  4EB8 19F8               1258              JSR         HEX2ASCII           *load ascii char into buffer            
00001A84  5304                    1259              SUBQ.B      #$1, D4             *subtract from counter
00001A86  4EF8 1A70               1260              JMP         B2BLoop             *keep looping until counter hits zero
00001A8A                          1261              
00001A8A  3607                    1262  endB2B      MOVE.W      D7, D3              *load from utility            
00001A8C  5448                    1263              ADDQ.W      #2, A0              *advancing memory pointer by word  
00001A8E  4E75                    1264              RTS                             *return
00001A90                          1265  *===========================================================
00001A90                          1266  
00001A90                          1267  ************************************************************
00001A90                          1268  *WORD2BUFFER
00001A90                          1269  *Description: Converts a word in memory to ASCII and sends it
00001A90                          1270  *            to the buffer.
00001A90                          1271  *Buffer: $XXXX
00001A90                          1272  *Registers Used:
00001A90                          1273  *D2 - utility register
00001A90                          1274  *D3 - utility register
00001A90                          1275  *D4 - counter
00001A90                          1276  *A0 - working address
00001A90                          1277  *A2 - buffer address of decoded instruction
00001A90                          1278  ************************************************************
00001A90                          1279  WORD2BUFFER: 
00001A90  14FC 0024               1280              MOVE.B  #$24, (A2)+     *'$' to buffer
00001A94  4284                    1281              CLR.L   D4
00001A96                          1282              *ADDQ.W  #2, A0                  *clear counter
00001A96  3410                    1283              MOVE.W  (A0), D2            
00001A98  183C 0004               1284              MOVE.B  #4, D4              *load counter
00001A9C                          1285  **LOOP******************************************************
00001A9C                          1286  W2BLoop                 
00001A9C  B83C 0000               1287              CMP.B       #$00, D4            *end?
00001AA0  6700 0014               1288              BEQ         endW2B              *
00001AA4  E95A                    1289              ROL.W       #4, D2              *roll the bits in D2 to the left
00001AA6  3602                    1290              MOVE.W      D2, D3              *move rolled bits into temp storage
00001AA8  0243 000F               1291              ANDI.W      #$000F, D3          *and the bits to isolate ascii char   
00001AAC  4EB8 19F8               1292              JSR         HEX2ASCII           *load ascii char into buffer            
00001AB0  5304                    1293              SUBQ.B      #$1, D4             *subtract from counter
00001AB2  4EF8 1A9C               1294              JMP         W2BLoop             *keep looping until counter hits zero
00001AB6                          1295         
00001AB6  3607                    1296  endW2B      MOVE.W      D7, D3              *load from utility            
00001AB8  5448                    1297              ADDQ.W      #2, A0              *advancing memory pointer by word   
00001ABA  4E75                    1298              RTS                             *return
00001ABC                          1299  *===========================================================
00001ABC                          1300   
00001ABC                          1301  ************************************************************
00001ABC                          1302  *LONG2BUFFER
00001ABC                          1303  *Description: Converts a long word in memory to ASCII and sends
00001ABC                          1304  *            it to the buffer.
00001ABC                          1305  *Buffer: $XXXXXXXX
00001ABC                          1306  *Registers Used:
00001ABC                          1307  *D2 - utility register
00001ABC                          1308  *D3 - utility register
00001ABC                          1309  *D4 - counter
00001ABC                          1310  *A0 - working address
00001ABC                          1311  *A2 - buffer address of decoded instruction
00001ABC                          1312  ************************************************************           
00001ABC                          1313  LONG2BUFFER:
00001ABC  14FC 0024               1314              MOVE.B  #$24, (A2)+     *'$' to buffer
00001AC0  4284                    1315              CLR.L       D4          *clear counter
00001AC2                          1316              *ADDQ.W      #2, A0     *clear counter
00001AC2  2410                    1317              MOVE.L      (A0), D2 
00001AC4  183C 0008               1318              MOVE.B      #8, D4      *load counter
00001AC8                          1319  **LOOP******************************************************
00001AC8                          1320  L2BLoop                 
00001AC8  B83C 0000               1321              CMP.B       #$00, D4    *end?
00001ACC  6700 0014               1322              BEQ         endL2B      *
00001AD0  E99A                    1323              ROL.L       #4, D2      *
00001AD2  3602                    1324              MOVE.W      D2, D3      *
00001AD4  0243 000F               1325              ANDI.W      #$000F, D3  *isolate
00001AD8  4EB8 19F8               1326              JSR         HEX2ASCII   *to buffer           
00001ADC  5304                    1327              SUBQ.B      #$1, D4     *subtract from counter
00001ADE  4EF8 1AC8               1328              JMP         L2BLoop     *loop
00001AE2                          1329              
00001AE2  3607                    1330  endL2B      MOVE.W      D7, D3      *load from utility           
00001AE4  5848                    1331              ADDQ.W      #4, A0      *advancing memory pointer by word  
00001AE6  4E75                    1332              RTS  
00001AE8                          1333  *===========================================================
00001AE8                          1334             
00001AE8                          1335  ************************************************************
00001AE8                          1336  *IMM2BUFER
00001AE8                          1337  *Description: Converts immediate data and sends to buffer
00001AE8                          1338  *Registers Used:
00001AE8                          1339  *D3 - utility register
00001AE8                          1340  *A2 - buffer address of decoded instruction
00001AE8                          1341  ************************************************************ 
00001AE8                          1342  IMM2BUFER:
00001AE8  14FC 0023               1343              MOVE.B  #$23, (A2)+     *'#' to buffer
00001AEC  4EB8 19BE               1344              JSR     srSize          *get bit size
00001AF0  0C03 0001               1345              CMPI.B  #%01, D3        *byte?
00001AF4  6700 FF6E               1346              BEQ     BYTE2BUFFER     *
00001AF8  0C03 0003               1347              CMPI.B  #%11, D3        *word?
00001AFC  6792                    1348              BEQ     WORD2BUFFER     *
00001AFE  0C03 0002               1349              CMPI.B  #%10, D3        *long?
00001B02  67B8                    1350              BEQ     LONG2BUFFER     *
00001B04  4E75                    1351  endI2B      RTS                     *return
00001B06                          1352  *===========================================================        
00001B06                          1353  
00001B06                          1354  ************************************************************
00001B06                          1355  *BADINST
00001B06                          1356  *Description: A bad instruction has been called, print to console
00001B06                          1357  *Buffer: '$0x00000000   DATA    BadWord'
00001B06                          1358  *Registers Used:
00001B06                          1359  *D3 - utility register
00001B06                          1360  *D5 - flag condition
00001B06                          1361  *A2 - buffer address of decoded instruction
00001B06                          1362  *A2 - working address
00001B06                          1363  ************************************************************
00001B06                          1364  BADINST:
00001B06                          1365  **ADDRESS***************************************************
00001B06  1A3C 0000               1366              MOVE.B  #0, D5          *set flag to bad for double EA check
00001B0A  45F9 00009000           1367              LEA     buf, A2         *reload buffer
00001B10  4EB8 11DE               1368              JSR     ADDRESS         *address to buffer
00001B14                          1369  **DATA******************************************************        
00001B14  14FC 0044               1370              MOVE.B  #$44,(A2)+      *'D' to buffer
00001B18  14FC 0041               1371              MOVE.B  #$41,(A2)+      *'A' to buffer
00001B1C  14FC 0054               1372              MOVE.B  #$54,(A2)+      *'T' to buffer
00001B20  14FC 0041               1373              MOVE.B  #$41,(A2)+      *'A' to buffer
00001B24  14FC 0009               1374              MOVE.B  #$9, (A2)+      *tab buffer
00001B28  14FC 0024               1375              MOVE.B  #$24,(A2)+      *'$' to buffer
00001B2C                          1376  **BAD WORD**************************************************            
00001B2C  3610                    1377              MOVE.W  (A0), D3        *
00001B2E  183C 000C               1378              MOVE.B  #12, D4         *$1254
00001B32  4EB8 19F0               1379              JSR     SHIFT           * ^
00001B36  4EB8 19F8               1380              JSR     Hex2ASCII       *to ASCII
00001B3A  3610                    1381              MOVE.W  (A0), D3        *
00001B3C  183C 0008               1382              MOVE.B  #8, D4          *$1254
00001B40  4EB8 19F0               1383              JSR     SHIFT           *  ^
00001B44  4EB8 19F8               1384              JSR     Hex2ASCII       *to ASCII
00001B48  3610                    1385              MOVE.W  (A0), D3        *
00001B4A  183C 0004               1386              MOVE.B  #4, D4          *$1254
00001B4E  4EB8 19F0               1387              JSR     SHIFT           *   ^
00001B52  4EB8 19F8               1388              JSR     Hex2ASCII       *to ASCII
00001B56  3610                    1389              MOVE.W  (A0), D3        *$1254
00001B58  0243 000F               1390              ANDI.W  #$000F, D3      *    ^
00001B5C  4EB8 19F8               1391              JSR     Hex2ASCII       *to ASCII
00001B60  4E75                    1392  endbadinst  RTS                     *return
00001B62                          1393  *===========================================================    
00001B62                          1394  
00001B62                          1395  ************************************************************
00001B62                          1396  *  _____ _   _ ____      ____ ___ __  __ 
00001B62                          1397  * | ____| \ | |  _ \    / ___|_ _|  \/  |
00001B62                          1398  * |  _| |  \| | | | |   \___ \| || |\/| |
00001B62                          1399  * | |___| |\  | |_| |    ___) | || |  | |
00001B62                          1400  * |_____|_| \_|____/    |____/___|_|  |_|
00001B62                          1401  *                                       
00001B62                          1402  *END
00001B62                          1403  *Description: Ends program
00001B62                          1404  ************************************************************          
00001B62                          1405  END:        
00001B62  103C 000E               1406              MOVE.B  #14, D0
00001B66  43F9 0000265C           1407              LEA     strBadInst, A1
00001B6C  4E4F                    1408              TRAP    #15
00001B6E                          1409  
00001B6E  1239 000026D3           1410              MOVE.B  badInstCount, D1
00001B74  103C 0003               1411              MOVE.B  #3, D0
00001B78  4E4F                    1412              TRAP    #15
00001B7A                          1413              
00001B7A  4EB8 1072               1414              JSR     dis_cr
00001B7E                          1415              
00001B7E  103C 000D               1416              MOVE.B  #13,D0              *load task
00001B82  43F9 0000225F           1417              LEA     str_end,A1            *load string
00001B88  4E4F                    1418              TRAP    #15                 *display
00001B8A                          1419  
00001B8A                          1420             
00001B8A  FFFF FFFF               1421              SIMHALT              
00001B8E                          1422  *===========================================================
00001B8E                          1423           
00001B8E                          1424  *-----------------------------------------------------------
00001B8E                          1425  *variables
00001B8E                          1426  *-----------------------------------------------------------
00001B8E= 20 20 20 20 20 20 ...   1427  intro       dc.b '          66666666        888888888     KKKKKKKKK    KKKKKKK',CR,LF 
00001BCC= 20 20 20 20 20 20 ...   1428              dc.b '         6::::::6       88:::::::::88   K:::::::K    K:::::K',CR,LF
00001C0A= 20 20 20 20 20 20 ...   1429              dc.b '        6::::::6      88:::::::::::::88 K:::::::K    K:::::K',CR,LF
00001C48= 20 20 20 20 20 20 ...   1430              dc.b '       6::::::6      8::::::88888::::::8K:::::::K   K::::::K',CR,LF
00001C86= 20 20 20 20 20 20 ...   1431              dc.b '      6::::::6       8:::::8     8:::::8KK::::::K  K:::::KKK',CR,LF
00001CC4= 20 20 20 20 20 36 ...   1432              dc.b '     6::::::6        8:::::8     8:::::8  K:::::K K:::::K   ',CR,LF
00001D02= 20 20 20 20 36 3A ...   1433              dc.b '    6::::::6          8:::::88888:::::8   K::::::K:::::K    ',CR,LF
00001D40= 20 20 20 36 3A 3A ...   1434              dc.b '   6::::::::66666      8:::::::::::::8    K:::::::::::K     ',CR,LF
00001D7E= 20 20 36 3A 3A 3A ...   1435              dc.b '  6::::::::::::::66   8:::::88888:::::8   K:::::::::::K     ',CR,LF
00001DBC= 20 20 36 3A 3A 3A ...   1436              dc.b '  6::::::66666:::::6 8:::::8     8:::::8  K::::::K:::::K    ',CR,LF
00001DFA= 20 20 36 3A 3A 3A ...   1437              dc.b '  6:::::6     6:::::68:::::8     8:::::8  K:::::K K:::::K   ',CR,LF    
00001E38= 20 20 36 3A 3A 3A ...   1438              dc.b '  6:::::6     6:::::68:::::8     8:::::8KK::::::K  K:::::KKK',CR,LF     
00001E76= 20 20 36 3A 3A 3A ...   1439              dc.b '  6::::::66666::::::68::::::88888::::::8K:::::::K   K::::::K',CR,LF     
00001EB4= 20 20 20 36 36 3A ...   1440              dc.b '   66:::::::::::::66  88:::::::::::::88 K:::::::K    K:::::K',CR,LF
00001EF2= 20 20 20 20 20 36 ...   1441              dc.b '     66:::::::::66      88:::::::::88   K:::::::K    K:::::K',CR,LF
00001F30= 20 20 20 20 20 20 ...   1442              dc.b '       666666666          888888888     KKKKKKKKK    KKKKKKK',CR,LF
00001F6E= 20 20 20 20 20 20 ...   1443              dc.b '                                                            ',CR,LF  
00001FAC= 20 20 20 20 20 20 ...   1444              dc.b '                                                            ',CR,LF  
00001FEA= 20 20 20 20 5F 5F ...   1445              dc.b '    ____  _                                __    __         ',CR,LF
00002028= 20 20 20 2F 20 5F ...   1446              dc.b '   / __ \(_)________ _________  ____ ___  / /_  / /__  _____',CR,LF
00002066= 20 20 2F 20 2F 20 ...   1447              dc.b '  / / / / / ___/ __ `/ ___/ _ \/ __ `__ \/ __ \/ / _ \/ ___/',CR,LF
000020A4= 20 2F 20 2F 5F 2F ...   1448              dc.b ' / /_/ / (__  ) /_/ (__  )  __/ / / / / / /_/ / /  __/ /    ',CR,LF
000020E2= 2F 5F 5F 5F 5F 5F ...   1449              dc.b '/_____/_/____/\__,_/____/\___/_/ /_/ /_/_.___/_/\___/_/     ',CR,LF
00002120= 20 20 20 20 20 20 ...   1450              dc.b '                                                            ',CR,LF  
0000215E= 20 20 20 20 20 20 ...   1451              dc.b '                                                            ',0,CR,LF 
0000219D                          1452              
0000219E= 0610                    1453  i_length    dc.w    i_length-intro
000021A0                          1454  
000021A0= 45 6E 74 65 72 20 ...   1455  srt_addr    dc.b    'Enter starting address: $',0
000021BA= 001A                    1456  s_len       dc.w    s_len-srt_addr
000021BC                          1457  
000021BC= 45 6E 74 65 72 20 ...   1458  end_addr    dc.b    'Enter ending address: $',0
000021D4= 0018                    1459  e_len       dc.w    e_len-end_addr
000021D6                          1460  
000021D6= 54 68 65 20 73 74 ...   1461  t_str_start dc.b    'The start address is: $',0
000021EE= 0018                    1462  t_start     dc.w    t_start-t_str_start
000021F0                          1463  
000021F0= 54 68 65 20 65 6E ...   1464  t_str_end   dc.b    'The end address is: $',0
00002206= 0016                    1465  t_end       dc.w    t_end-t_str_end
00002208                          1466  
00002208= 45 72 72 6F 72 3A ...   1467  str_error   dc.b    'Error: starting or ending address has error',0
00002234= 002C                    1468  err_len     dc.w    err_len-str_error 
00002236                          1469  
00002236= 50 72 65 73 73 20 ...   1470  str_cont    dc.b    'Press enter to continue.',0
00002250= 001A                    1471  cont_len    dc.w    cont_len-str_cont
00002252                          1472  
00002252= 00                      1473  str_cr      dc.b    '',0
00002254= 0002                    1474  cr_len      dc.w    cr_len-str_cr
00002256                          1475  
00002256                          1476  
00002256= 01                      1477  bufferend   dc.b    1
00002257                          1478  print_stack ds.b    8
0000225F                          1479  
0000225F= 20 20 20 20 20 20 ...   1480  str_end     dc.b '                                                                                   ',CR,LF  
000022B4= 20 20 20 20 20 20 ...   1481              dc.b '                                                                                   ',CR,LF 
00002309= 20 20 20 20 20 20 ...   1482              dc.b '                                                                                   ',CR,LF 
0000235E= 20 20 20 20 20 20 ...   1483              dc.b '                                                                                   ',CR,LF 
000023B3= 20 20 2F 24 24 24 ...   1484              dc.b '  /$$$$$$   /$$$$$$  /$$      /$$ /$$$$$$$  /$$       /$$$$$$$$ /$$$$$$$$ /$$$$$$$$',CR,LF
00002408= 20 2F 24 24 5F 5F ...   1485              dc.b ' /$$__  $$ /$$__  $$| $$$    /$$$| $$__  $$| $$      | $$_____/|__  $$__/| $$_____/',CR,LF
0000245D= 7C 20 24 24 20 20 ...   1486              dc.b '| $$  \__/| $$  \ $$| $$$$  /$$$$| $$  \ $$| $$      | $$         | $$   | $$      ',CR,LF
000024B2= 7C 20 24 24 20 20 ...   1487              dc.b '| $$      | $$  | $$| $$ $$/$$ $$| $$$$$$$/| $$      | $$$$$      | $$   | $$$$$   ',CR,LF
00002507= 7C 20 24 24 20 20 ...   1488              dc.b '| $$      | $$  | $$| $$  $$$| $$| $$____/ | $$      | $$__/      | $$   | $$__/   ',CR,LF
0000255C= 7C 20 24 24 20 20 ...   1489              dc.b '| $$    $$| $$  | $$| $$\  $ | $$| $$      | $$      | $$         | $$   | $$      ',CR,LF
000025B1= 7C 20 20 24 24 24 ...   1490              dc.b '|  $$$$$$/|  $$$$$$/| $$ \/  | $$| $$      | $$$$$$$$| $$$$$$$$   | $$   | $$$$$$$$',CR,LF
00002606= 20 5C 5F 5F 5F 5F ...   1491              dc.b ' \______/  \______/ |__/     |__/|__/      |________/|________/   |__/   |________/',0,CR,LF
0000265C                          1492  
0000265C= 20 20 20 20 20 20 ...   1493  strBadInst      dc.b    '                            ',CR,LF
0000267A= 20 20 20 20 20 20 ...   1494                  dc.b    '                            ',CR,LF
00002698= 20 20 20 20 20 20 ...   1495                  dc.b    '                            ',CR,LF
000026B6= 4E 75 6D 62 65 72 ...   1496                  dc.b    'Number of bad instructions: ',0
000026D3= 00                      1497  badInstCount    dc.b    0
000026D4                          1498  *v_srt_add   ds.l    1               *store start address
000026D4                          1499  *v_end_add   ds.l    1               *store end address
000026D4                          1500  *v_test      ds.l    1               *start a temp value
000026D4                          1501  
000026D4                          1502  
000026D4                          1503      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDRESS             11DE
ADDRFILL            1206
ADDRLOOP            120C
ASCII2HEX           111C
B2BLOOP             1A70
BADFLAG             0
BADINST             1B06
BADINSTCOUNT        26D3
BUF                 9000
BUFFEREND           2256
BYTE2BUFFER         1A64
CLEAR               10A6
CODE0011_CONT       1328
CODE0011_CONT2      1330
CONT_LEN            2250
CR                  D
CR_LEN              2254
DECODE              11B8
DECODECONT          11D8
DIS_BADINPUT        1058
DIS_CONT            1086
DIS_CR              1072
DIS_INTRO_MSG       1044
EACODE000           18D2
EACODE001           18E4
EACODE010           18F6
EACODE011           1910
EACODE100           192E
EACODE101           194C
EACODE110           1952
EACODE111           1958
EA_TABLE            18A2
END                 1B62
ENDA2H              11AC
ENDADDR             122A
ENDB2B              1A8A
ENDBADINST          1B60
ENDBF               122C
ENDBI               106E
ENDCLEAR            10B6
ENDDC               10A4
ENDDECODE           11DC
ENDEA000            18E2
ENDEA001            18F4
ENDEA010            190E
ENDEA011            192C
ENDEA100            194A
ENDEA111            197E
ENDGD               199A
ENDGOP              1246
ENDGS               1990
ENDH2A              1A0E
ENDI2B              1B04
ENDINPUT            111A
ENDINTRO            1056
ENDL2B              1AE2
ENDOP0000           12AE
ENDOP0001           12EE
ENDOP0010           12F6
ENDOP0100           138A
ENDOP0100TABLE      1416
ENDOP0100_0000      141E
ENDOP0100_0001      1426
ENDOP0100_0010      144C
ENDOP0100_0011      1454
ENDOP0100_0100      147A
ENDOP0100_0101      1482
ENDOP0100_0110      14A8
ENDOP0100_0111      14B0
ENDOP0100_1000      14B8
ENDOP0100_1001      14C0
ENDOP0100_1010      14C8
ENDOP0100_1011      14D0
ENDOP0100_1100      14D8
ENDOP0100_1101      14E0
ENDOP0100_1110      1554
ENDOP0100_1111      155C
ENDOP0101           1564
ENDOP0110           156C
ENDOP0111           1574
ENDOP1000           15E2
ENDOP1001           168C
ENDOP1010           1694
ENDOP1011           1730
ENDOP1100           17BC
ENDOP1101           1872
ENDOP111            1882
ENDOP1110           187A
ENDOPJMP            1552
ENDOPJSR            153A
ENDOPLEA            13B4
ENDOPNOP            1514
ENDOPRTS            1522
ENDR2B              1A20
ENDRB               1986
ENDS2B              1A62
ENDSHFIT            19F6
ENDSR               19EE
ENDSWAP             19BC
ENDW2B              1AB6
END_ADDR            21BC
END_CR              1084
ERROR               118A
ERR_LEN             2234
E_LEN               21D4
GETDIRECTION        1992
GETEA               1884
GETOPCODE           122E
GETREGISTER         1980
GETSIZE             1988
GOODFLAG            1
HEX2ASCII           19F8
IMM2BUFER           1AE8
INTRO               1B8E
I_LENGTH            219E
L2BLOOP             1AC8
LENGTH              0
LETTER              1A08
LF                  A
LONG2BUFFER         1ABC
LOOP                112C
LOWER2HEX           117E
MAIN                1004
MAIN_CONT           1036
MAIN_END            1040
MAIN_INPUT          1016
MAIN_LOOP           1022
MAXADD              FFFFFF
MINADD              0
NUM2HEX             1166
NUMBER              1A00
OP0100TABLE         13B6
OP0100_0000         1418
OP0100_0001         1420
OP0100_0010         1428
OP0100_0011         144E
OP0100_0100         1456
OP0100_0101         147C
OP0100_0110         1484
OP0100_0111         14AA
OP0100_1000         14B2
OP0100_1001         14BA
OP0100_1010         14C2
OP0100_1011         14CA
OP0100_1100         14D2
OP0100_1101         14DA
OP0100_1110         14E2
OP0100_1111         1556
OPADD               1824
OPADD01             185E
OPADDA              17FE
OPADDL              17FA
OPAND01             17A8
OPCMP               16E2
OPCMPA              16A4
OPCODE0000          12A8
OPCODE0001          12B0
OPCODE0010          12F0
OPCODE0011          12F8
OPCODE0100          1350
OPCODE0101          155E
OPCODE0110          1566
OPCODE0111          156E
OPCODE1000          1576
OPCODE1001          15E4
OPCODE1010          168E
OPCODE1011          1696
OPCODE1100          1732
OPCODE1101          17BE
OPCODE1110          1874
OPCODE1111          187C
OPEOR               172A
OPJMP               153C
OPJSR               1524
OPLEA               138C
OPNOP               1508
OPOR                158C
OPOR01              15CE
OPRTS               1516
OPSUBL              161C
OPSUBSUB            1642
OPSUBSUBA           1620
OPSUBSUBR           1678
OP_TABLE            1248
PRINTCOUNT          A
PRINT_B             11CE
PRINT_STACK         2257
REG2BUFFER          1A10
RESUME              1194
S2BB                1A4A
S2BL                1A5E
S2BW                1A54
SHIFT               19F0
SIZE2BUFFER         1A22
SRL                 19EA
SRSIZE              19BE
SRT_ADDR            21A0
SRW                 19E0
STACK               A000
START               1000
STRBADINST          265C
STR_CONT            2236
STR_CR              2252
STR_END             225F
STR_ERROR           2208
SWAPREG             199C
S_LEN               21BA
TASK0               0
TASK1               1
TASK13              D
TASK14              E
TASK2               2
TASK3               3
T_END               2206
T_START             21EE
T_STR_END           21F0
T_STR_START         21D6
UPPER2HEX           1172
U_INPUT             10B8
W2B                 1A0C
W2BLOOP             1A9C
WORD2BUFFER         1A90
