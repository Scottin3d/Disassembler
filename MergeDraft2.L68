00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 06/04/20 10:42:03 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Scott Shirley, Carl Howing, Daniel Yakovlev
00000000                             4  * Date       : June 6, 2020
00000000                             5  * Description: This program is written in Motorola 68000 assembly 
00000000                             6  *              language (M68k), and its purpose is to disassemble 
00000000                             7  *              data back into human readable opcodes and effective 
00000000                             8  *              addresses.
00000000                             9  ************************************************************
00000000                            10  
00000000                            11  ************************************************************
00000000                            12  *  ____            _     _                
00000000                            13  * |  _ \ ___  __ _(_)___| |_ ___ _ __ ___ 
00000000                            14  * | |_) / _ \/ _` | / __| __/ _ \ '__/ __|
00000000                            15  * |  _ <  __/ (_| | \__ \ ||  __/ |  \__ \
00000000                            16  * |_| \_\___|\__, |_|___/\__\___|_|  |___/
00000000                            17  *            |___/                        
00000000                            18  *Register Use
00000000                            19  *For consistency, please utilize registers in the following way.
00000000                            20  *
00000000                            21  *D0 - Copy of mask
00000000                            22  *D1 - Instruction Mask
00000000                            23  *D2 - 
00000000                            24  *D3 - utility register
00000000                            25  *D4 -
00000000                            26  *D5 - flag condition
00000000                            27  *D6 - counter
00000000                            28  *D7 - copy of working address
00000000                            29  *
00000000                            30  *A0 - temp address holder
00000000                            31  *A1 - trap address
00000000                            32  *A2 - buffer address of decoded instruction
00000000                            33  *A3 -
00000000                            34  *A4 - starting address
00000000                            35  *A5 - ending address
00000000                            36  *A6 - jump tables
00000000                            37  *A7 -
00000000                            38  ************************************************************
00000000                            39  
00000000                            40  ************************************************************
00000000                            41  * __     __         _       _     _                               _     _____ ___  _   _ 
00000000                            42  * \ \   / /_ _ _ __(_) __ _| |__ | | ___  ___      __ _ _ __   __| |   | ____/ _ \| | | |
00000000                            43  *  \ \ / / _` | '__| |/ _` | '_ \| |/ _ \/ __|    / _` | '_ \ / _` |   |  _|| | | | | | |
00000000                            44  *   \ V / (_| | |  | | (_| | |_) | |  __/\__ \   | (_| | | | | (_| |   | |__| |_| | |_| |
00000000                            45  *    \_/ \__,_|_|  |_|\__,_|_.__/|_|\___||___/    \__,_|_| |_|\__,_|   |_____\__\_\\___/ 
00000000                            46  *                                                                                        
00000000                            47  * Variables and EQUs
00000000                            48  ************************************************************
00000000  =00001000                 49  start       EQU     $1000               *start address
00000000  =0000A000                 50  stack       EQU     $A000               *stack address  
00000000  =00009000                 51  buf         EQU     $9000
00000000                            52  
00000000  =00000000                 53  minAdd      EQU     $00000000           *start of address space
00000000  =00FFFFFF                 54  maxAdd      EQU     $00FFFFFF           *end of address space
00000000                            55  
00000000  =0000000D                 56  CR          EQU     $0D                 *carriage return
00000000  =0000000A                 57  LF          EQU     $0A                 *line feed
00000000  =00000900                 58  badInstCount EQU    $900
00000000  =00000001                 59  goodflag    EQU     1                   *good flag condition
00000000  =00000000                 60  badflag     EQU     0                   *bad flag condition
00000000  =00000000                 61  length      EQU     0                   *
00000000                            62  
00000000  =0000000A                 63  printCount  EQU     10                  *number of lines printed to console before user input
00000000                            64  
00000000                            65  *TRAP tasks for preload
00000000  =00000000                 66  task0       EQU     00                  *Display string at (A1), D1.W bytes long (max 255) with carriage return and line feed (CR, LF)
00000000  =00000001                 67  task1       EQU     01                  *Display string at (A1), D1.W bytes long (max 255) without CR, LF
00000000  =00000002                 68  task2       EQU     02                  *Read string from keyboard and store at (A1), NULL terminated, length retuned in D1.W (max 80)
00000000  =00000003                 69  task3       EQU     03                  *Display signed number in D1.L in decimal in smallest field
00000000  =0000000D                 70  task13      EQU     13                  *Display the NULL terminated string at (A1) with CR, LF
00000000  =0000000E                 71  task14      EQU     14                  *Display the NULL terminated string at (A1) without CR, LF
00000000                            72  ************************************************************
00000000                            73  
00000000                            74  ************************************************************
00000000                            75  *  __  __       _       
00000000                            76  * |  \/  | __ _(_)_ __  
00000000                            77  * | |\/| |/ _` | | '_ \ 
00000000                            78  * | |  | | (_| | | | | |
00000000                            79  * |_|  |_|\__,_|_|_| |_|
00000000                            80  *                      
00000000                            81  ************************************************************
00001000                            82              ORG     start
00001000  6100 004E                 83              BSR     dis_intro_msg       *print intro message
00001004                            84              
00001004  6100 00C0                 85  main        BSR     CLEAR               *clear all registers
00001008  4FF9 0000A000             86              LEA     stack, SP           *load stack pointer
0000100E  45F9 00009000             87              LEA     buf, A2          *set buffer for input
00001014  2C4A                      88              MOVEA.L A2,A6    
00001016                            89              
00001016  6100 00C0                 90  main_input  BSR     U_INPUT             *branch to input
0000101A  BA3C 0000                 91              CMP.B   #$0, D5             *check if bad input
0000101E  6700 0044                 92              BEQ     dis_badInput        *bad flag, reinput 
00001022                            93              
00001022                            94               
00001022                            95                          
00001022  4EB9 000011D8             96  main_loop   JSR     DECODE         *prep buffer
00001028                            97  *loop checking **********************************************  
00001028  BA3C 0000                 98              CMP.B   #%0, D5
0000102C  6600 0006                 99              BNE     main_next
00001030  5278 0900                100              ADD     #1, (badInstCount)
00001034  BBC8                     101  main_next   CMPA.L  A0, A5              * have we reached the end of our address range?
00001036  6F00 0014                102              BLE     main_end  
0000103A                           103              
0000103A  5246                     104              ADDI    #1, D6              *add counter
0000103C  BC7C 000A                105              CMP     #printcount, D6     *check loop progress
00001040  66E0                     106              BNE     main_loop
00001042                           107  
00001042  4EB9 00001092            108  main_cont   JSR     dis_cont
00001048  4EF8 1022                109              JMP     main_loop
0000104C                           110  
0000104C  6100 1060                111  main_end    BSR     END
00001050                           112  *===========================================================
00001050                           113  
00001050                           114  *-----------------------------------------------------------
00001050                           115  *display subroutines
00001050                           116  *intro message, bad inputs, carriage return, enter2return, input test
00001050                           117  *-----------------------------------------------------------
00001050                           118  *intro message display
00001050                           119  ************************************************************
00001050                           120  dis_intro_msg
00001050  103C 000D                121              MOVE.B  #13,D0              *load task
00001054  43F9 000020F0            122              LEA     intro,A1            *load string
0000105A  3239 000026C2            123              MOVE.W  i_length,D1         *load string length 
00001060  4E4F                     124              TRAP    #15                 *display
00001062  4E75                     125  endIntro    RTS                         *return
00001064                           126  *bad input error message display****************************
00001064                           127  dis_badInput
00001064  103C 0000                128              MOVE.B  #task0,D0           *load task
00001068  43F9 0000272C            129              LEA     str_error, A1       *load string
0000106E  3239 00002758            130              MOVE.W  err_len, D1         *load string length
00001074  4E4F                     131              TRAP    #15                 *display
00001076  1A3C 0000                132              MOVE.B  #badFlag,D5         *set flag condition to bad
0000107A  4EB8 1016                133  endBI       JSR     main_input          *return to main_input
0000107E                           134  *dsiplay carriage return************************************
0000107E                           135  dis_cr
0000107E  103C 000D                136              MOVE.B  #task13, D0         *load task
00001082  43F9 00002776            137              LEA     str_cr, A1          *load string
00001088  3239 00002778            138              MOVE.W  cr_len, D1          *load string length
0000108E  4E4F                     139              TRAP    #15                 *display
00001090  4E75                     140  end_cr      RTS                         *return
00001092                           141  *enter2return***********************************************
00001092                           142  dis_cont   
00001092  103C 000E                143              MOVE.B  #task14, D0         *load task
00001096  43F9 0000275A            144              LEA     str_cont, A1        *load string
0000109C  3239 00002774            145              MOVE.W  cont_len, D1        *load string length
000010A2  4E4F                     146              TRAP    #15                 *display
000010A4                           147              
000010A4  103C 0002                148              MOVE.B  #task2,D0           *load task
000010A8  4E4F                     149              TRAP    #15                 *get input
000010AA                           150              
000010AA  12BC 0050                151              MOVE.B  #$50,(A1)           *reset A1
000010AE                           152              
000010AE  4246                     153              CLR     D6                  *clear counter, reset loop
000010B0  4E75                     154  endDC       RTS                         *return
000010B2                           155  **display y/n***********************************************
000010B2                           156  dis_yncont  
000010B2  103C 000E                157              MOVE.B  #task14, D0
000010B6  43F9 0000277A            158              LEA     str_yncont, A1
000010BC  4E4F                     159              TRAP    #15
000010BE                           160              
000010BE  103C 0004                161              MOVE.B  #4,D0           Trap task 4 does the following:
000010C2  4E4F                     162              TRAP    #15
000010C4  4E75                     163              RTS
000010C6                           164  *===========================================================
000010C6                           165  
000010C6                           166  ************************************************************ 
000010C6                           167  *  _   _ _____ _     ____  _____ ____  
000010C6                           168  * | | | | ____| |   |  _ \| ____|  _ \ 
000010C6                           169  * | |_| |  _| | |   | |_) |  _| | |_) |
000010C6                           170  * |  _  | |___| |___|  __/| |___|  _ < 
000010C6                           171  * |_| |_|_____|_____|_|   |_____|_| \_\
000010C6                           172  *                                      
000010C6                           173  *HELPER SUBROUTINES
000010C6                           174  *Description: These subroutines are called during teh opcode translation
000010C6                           175  ************************************************************
000010C6                           176  
000010C6                           177  ************************************************************   
000010C6                           178  *CLEAR
000010C6                           179  *Description: Clears registers of values
000010C6                           180  ************************************************************        
000010C6                           181  CLEAR:
000010C6  4240                     182              CLR     D0
000010C8  4241                     183              CLR     D1
000010CA  4242                     184              CLR     D2
000010CC  4243                     185              CLR     D3
000010CE  4244                     186              CLR     D4
000010D0  4245                     187              CLR     D5
000010D2  4246                     188              CLR     D6
000010D4  4247                     189              CLR     D7
000010D6  4E75                     190  endClear    RTS
000010D8                           191  *===========================================================
000010D8                           192  
000010D8                           193  ************************************************************
000010D8                           194  *U_INPUT
000010D8                           195  *Description: Gets input address from user for program
000010D8                           196  *D5 - Return Status
000010D8                           197  *D7 - Temparary register to store address value
000010D8                           198  *A0 - Working Address
000010D8                           199  *A4 - Start Address
000010D8                           200  *A5 - End Address
000010D8                           201  ************************************************************
000010D8                           202  U_INPUT:
000010D8  103C 0001                203              MOVE.B  #task1,D0           *
000010DC  43F9 000026C4            204              LEA     srt_addr,A1         *
000010E2  3239 000026DE            205              MOVE.W  s_len,D1            *
000010E8  4E4F                     206              TRAP    #15                 *
000010EA  D3FC 000026DE            207              ADDA.L  #s_len,A1           *
000010F0  103C 0002                208              MOVE.B  #task2,D0           *
000010F4  4E4F                     209              TRAP    #15                 *
000010F6  4EB9 0000113C            210              JSR     ASCII2HEX
000010FC  BA3C 0000                211              CMP.B   #$00,D5             *bad input?
00001100  6700 0038                212              BEQ     endInput
00001104                           213              *MOVE.L  D7, v_srt_add       *store to varable
00001104  4247                     214              CLR     D7
00001106                           215              
00001106  2848                     216              MOVEA.L A0,A4       
00001108  103C 0001                217              MOVE.B  #task1,D0
0000110C  43F9 000026E0            218              LEA     end_addr,A1
00001112  3239 000026F8            219              MOVE.W  e_len,D1         
00001118  4E4F                     220              TRAP    #15         
0000111A  D3FC 000026F8            221              ADDA.L  #e_len,A1
00001120  103C 0002                222              MOVE.B  #task2,D0
00001124  4E4F                     223              TRAP    #15
00001126  4EB9 0000113C            224              JSR     ASCII2HEX
0000112C  BA3C 0000                225              CMP.B   #$00,D5             *bad input?
00001130  6700 0008                226              BEQ     endInput
00001134                           227              *MOVE.L  D7, v_end_add        *store to varable
00001134  4247                     228              CLR     D7
00001136                           229  
00001136                           230  
00001136  2A48                     231              MOVEA.L A0,A5               *store ending to A5
00001138  204C                     232              MOVEA.L A4,A0               *store starting in A0  
0000113A                           233                    
0000113A  4E75                     234  endInput    RTS
0000113C                           235  *===========================================================
0000113C                           236  
0000113C                           237  ************************************************************
0000113C                           238  *ASCII2HEX 
0000113C                           239  *Description: Converts an ASCII character to HEX - see flowchart for logic
0000113C                           240  *D3 - Placeholder for current ascii byte
0000113C                           241  *D4 - Translated address
0000113C                           242  *D5 - Return status
0000113C                           243  *D6 - Counter (6)
0000113C                           244  *D7 - Temparary register to store address value
0000113C                           245  *A0 - Stored address at end of subroutine
0000113C                           246  ************************************************************
0000113C                           247  ASCII2HEX:
0000113C  48E7 F800                248              MOVEM.L D0-D4,-(SP)         *save data registers to the stack
00001140  4EB8 10C6                249              JSR     CLEAR
00001144  1A3C 0001                250              MOVE.B  #$01,D5             *preset flag condition to good
00001148  3C3C 0000                251              MOVE    #length,D6
0000114C                           252  
0000114C                           253  loop
0000114C  1619                     254              MOVE.B  (A1)+,D3            *
0000114E  B63C 0030                255              CMP.B   #$30,D3             *byte < 30??
00001152  6D00 0056                256              BLT     error               *
00001156                           257              
00001156  B63C 003A                258              CMP.B   #$3A,D3             *byte < 3A??
0000115A  6D00 002A                259              BLT     num2hex             *
0000115E                           260              
0000115E  B63C 0041                261              CMP.B   #$41,D3             *byte < 41??
00001162  6D00 0046                262              BLT     error               *
00001166                           263              
00001166  B63C 0047                264              CMP.B   #$47,D3             *byte < 47?
0000116A  6D00 0026                265              BLT     upper2hex           *
0000116E                           266              
0000116E  B63C 0061                267              CMP.B   #$61,D3             *byte < 61??
00001172  6D00 0036                268              BLT     error               *
00001176                           269              
00001176  B63C 0067                270              CMP.B   #$67,D3             *byte < 67??
0000117A  6D00 0022                271              BLT     lower2hex           *
0000117E                           272              
0000117E  B63C 0066                273              CMP.B   #$66,D3             *byte > 66??
00001182  6E00 0026                274              BGT     error               *
00001186                           275  
00001186                           276  num2hex
00001186  0403 0030                277              SUBI.B  #$30,D3             *subracthex value of 0 to get correct value of input
0000118A  D803                     278              ADD.B   D3,D4               *
0000118C  4EF9 000011B4            279              JMP     resume              *return to top
00001192                           280              
00001192                           281  upper2hex
00001192  0403 0037                282              SUBI.B  #$37,D3             *subracthex value of A to get correct value of input
00001196  D803                     283              ADD.B   D3,D4               *
00001198  4EF9 000011B4            284              JMP     resume              *return to top
0000119E                           285              
0000119E                           286  lower2hex
0000119E  0403 0057                287              SUBI.B  #$57,D3             *subracthex value of a to get correct value of input
000011A2  D803                     288              ADD.B   D3,D4               *
000011A4  4EF9 000011B4            289              JMP     resume              *return to top
000011AA                           290  error
000011AA  1A3C 0000                291              MOVE.B  #$00,D5             *flag as bad input and return
000011AE  4EF9 000011CC            292              JMP     endA2H              *return to top
000011B4                           293  resume
000011B4  5246                     294              ADD     #1,D6               *increment length counter
000011B6  BC7C 0006                295              CMP     #6,D6               *check if done
000011BA  6700 0010                296              BEQ     endA2H              *
000011BE  0C11 0000                297              CMP.B   #$00,(A1)           *end of string??
000011C2  6700 0008                298              BEQ     endA2H              *
000011C6  E984                     299              ASL.L   #4,D4               *shiftleft by 4 bits to get next value            
000011C8  4EF8 114C                300              JMP     loop                *return to top
000011CC                           301  
000011CC                           302  endA2H
000011CC  2044                     303              MOVE.L  D4,A0               *
000011CE  2E04                     304              MOVE.L  D4,D7               *move address to temp register
000011D0  4246                     305              CLR     D6                  *clear counter
000011D2  4CDF 001F                306              MOVEM.L (SP)+,D0-D4         *load data registers from stack      
000011D6  4E75                     307              RTS                         *
000011D8                           308  *===========================================================
000011D8                           309  
000011D8                           310  ************************************************************
000011D8                           311  *DECODE
000011D8                           312  *Description: Decodes an operation instruction from memory
000011D8                           313  ************************************************************
000011D8                           314  DECODE:
000011D8  45F9 00009000            315              LEA     buf, A2             *load buffer
000011DE  224A                     316              MOVEA.L A2,A1               *load trap address with buffer 
000011E0  4EB9 000011FE            317              JSR     ADDRESS             *current address to buffer
000011E6  3E18                     318              MOVE.W  (A0)+, D7            *move A0 value to test
000011E8                           319  
000011E8  4EB9 0000124E            320              JSR     GETOPCODE           *decode instruction
000011EE  14BC 0000                321  print_b     MOVE.B  #00,(A2)            *null terminator
000011F2  103C 000D                322              MOVE.B  #task13,D0
000011F6  4E4F                     323              TRAP    #15 
000011F8                           324              
000011F8                           325              *CMPI.B  #%0, D5
000011F8                           326              *BNE     decodeCont 
000011F8                           327              *ADDI    #1, badInstCount
000011F8  1A3C 0000                328  decodeCont  MOVE.B  #0, D5
000011FC                           329              *ADDQ.W      #2, A0
000011FC                           330              
000011FC  4E75                     331  endDECODE   RTS
000011FE                           332  *===========================================================                       
000011FE                           333  
000011FE                           334  ************************************************************
000011FE                           335  *ADDRESS
000011FE                           336  *Description: Fills the buffer with the current address
000011FE                           337  ************************************************************
000011FE                           338  ADDRESS:    
000011FE  4283                     339              CLR.L   D3
00001200  4284                     340              CLR.L   D4
00001202  4287                     341              CLR.L   D7
00001204  14FC 0024                342              MOVE.B  #$24, (A2)+     *'$' to buffer
00001208  14FC 0030                343              MOVE.B  #$30, (A2)+     *'0' to buffer
0000120C  14FC 0078                344              MOVE.B  #$78, (A2)+     *'x' to buffer       
00001210  7600                     345              MOVE.L  #$00000000, D3
00001212  2E08                     346              MOVE.L  A0, D7
00001214  D647                     347              ADD.W   D7, D3
00001216  4EB9 00001226            348              JSR     addrFill   
0000121C  14FC 0009                349              MOVE.B  #$09,(A2)+   *tab
00001220  4EF9 0000124A            350              JMP     endaddr
00001226                           351              
00001226  2403                     352  addrFill    MOVE.L      D3, D2            *move current word into D2 for rolling purposes
00001228  183C 0008                353              MOVE.B      #8, D4              *load counter
0000122C                           354  
0000122C                           355  addrLoop                 
0000122C  B83C 0000                356              CMP.B       #$00, D4            *compare counter with 0
00001230  6700 0018                357              BEQ         endaddr      *if 0, return
00001234  E99A                     358              ROL.L       #4, D2              *
00001236  2602                     359              MOVE.L      D2, D3              *
00001238  0283 0000000F            360              ANDI.L      #$000F, D3          *isolate
0000123E  4EB9 00001F08            361              JSR         HEX2ASCII           *to buffer           
00001244  5304                     362              SUBQ.B      #$1, D4             *subtract from counter
00001246  4EF8 122C                363              JMP         addrLoop                 *loop
0000124A                           364              
0000124A  2607                     365  endaddr     MOVE.L      D7, D3              *load from utility                             
0000124C  4E75                     366  endbf       RTS
0000124E                           367  *===========================================================
0000124E                           368  
0000124E                           369  ************************************************************ 
0000124E                           370  *   ___  ____   ____ ___  ____  _____ ____  
0000124E                           371  *  / _ \|  _ \ / ___/ _ \|  _ \| ____/ ___| 
0000124E                           372  * | | | | |_) | |  | | | | | | |  _| \___ \ 
0000124E                           373  * | |_| |  __/| |__| |_| | |_| | |___ ___) |
0000124E                           374  *  \___/|_|    \____\___/|____/|_____|____/ 
0000124E                           375  * 
0000124E                           376  *GETOPCODE:
0000124E                           377  *Description: Gets the first four bits of instruction to decode 
0000124E                           378  *  
0000124E                           379  *Naming conventions for opcode subroutines
0000124E                           380  *opcode####
0000124E                           381  *op[opmode][operation]
0000124E                           382  *endop####
0000124E                           383  *                              
0000124E                           384  *Registers Used:
0000124E                           385  *For consistency, please utilize registers in the following way.
0000124E                           386  *
0000124E                           387  *D1 - utility register
0000124E                           388  *D3 - utility register
0000124E                           389  *D7 - copy of working address
0000124E                           390  *
0000124E                           391  *A2 - buffer address of decoded instruction
0000124E                           392  *A6 - jump table               
0000124E                           393  ************************************************************
0000124E                           394  GETOPCODE:   
0000124E  1A3C 0001                395              MOVE.B  #%01, D5
00001252  3607                     396              MOVE.W  D7, D3              *move to utility
00001254  123C 000C                397              MOVE.B  #12, D1             *
00001258  E26B                     398              LSR.W   D1, D3              *shift
0000125A  C6FC 0006                399              MULU    #6, D3              *offset          
0000125E  4DF9 0000126C            400              LEA     OP_TABLE, A6        *                                                                                  
00001264  4EB6 3000                401              JSR     00(A6,D3)           *jump indirect with index (00 indicates word movement)
00001268  260A                     402              MOVE.L  A2, D3
0000126A                           403              *MOVE.L  D3, bufferend   
0000126A  4E75                     404  endgop      RTS                         *return
0000126C                           405  *===========================================================
0000126C                           406  
0000126C                           407  ************************************************************
0000126C                           408  *OPCODE Table
0000126C                           409  *Description: Table of OPCODES
0000126C                           410  ************************************************************ 
0000126C                           411  OP_TABLE
0000126C  4EF9 000012CC            412              JMP         opcode0000      *ANDI
00001272  4EF9 00001384            413              JMP         opcode0001      *MOVE.B 
00001278  4EF9 000013C4            414              JMP         opcode0010      *MOVE/A.L 
0000127E  4EF9 00001418            415              JMP         opcode0011      *MOVE/A.W 
00001284  4EF9 0000146C            416              JMP         opcode0100      *CLR,LEA,JMP,JSR,MOVEM,NEG*,NOP*,NOT*,RTS *testing*
0000128A  4EF9 00001846            417              JMP         opcode0101      *BADINST
00001290  4EF9 0000184E            418              JMP         opcode0110      *Bcc
00001296  4EF9 00001944            419              JMP         opcode0111      *BADINST
0000129C  4EF9 0000194C            420              JMP         opcode1000      *OR
000012A2  4EF9 000019BA            421              JMP         opcode1001      *SUB,SUBA
000012A8  4EF9 00001A64            422              JMP         opcode1010      *BADINST
000012AE  4EF9 00001A6C            423              JMP         opcode1011      *CMP,CMPA
000012B4  4EF9 00001B08            424              JMP         opcode1100      *AND
000012BA  4EF9 00001B94            425              JMP         opcode1101      *ADD,ADDA
000012C0  4EF9 00001C4A            426              JMP         opcode1110      *ASR/LSL **incomplete**
000012C6  4EF9 00001D52            427              JMP         opcode1111      *BADINST
000012CC                           428              
000012CC                           429  ************************************************************
000012CC                           430  *OPCODES
000012CC                           431  *Description: OPCODE subroutines used to decode instructions
000012CC                           432  *
000012CC                           433  ************************************************************  
000012CC                           434  *OPCODE: 0000
000012CC                           435  *ORI,ANDI,SUBI,ADDI,EORI,CMPI
000012CC                           436  opcode0000: 
000012CC  1607                     437              MOVE.B  D7, D3
000012CE  0243 0F00                438              ANDI.W  #$0F00, D3
000012D2  E08B                     439              LSR.L   #8, D3
000012D4  B63C 0000                440              CMP.B   #$0, D3         *ORI?
000012D8  6700 003C                441              BEQ     opORI           *
000012DC  B63C 0002                442              CMP.B   #$2, D3         *ANDI?
000012E0  6700 0042                443              BEQ     opANDI          *
000012E4  B63C 0004                444              CMP.B   #$4, D3         *SUBI?
000012E8  6700 004C                445              BEQ     opSUBI          *
000012EC  B63C 0006                446              CMP.B   #$6, D3         *ADDI?
000012F0  6700 004A                447              BEQ     opADDI          *
000012F4  B63C 000A                448              CMP.B   #$A, D3         *EORI?
000012F8  6700 0054                449              BEQ     opEORI          *
000012FC  B63C 000C                450              CMP.B   #$C, D3         *CMPI?
00001300  6600 0D4C                451              BNE     BADINST         *BADINST  
00001304                           452  
00001304                           453  **CMP Immediate Data****************************************          
00001304  14FC 0043                454  opCMPI      MOVE.B  #$43, (A2)+     *'C' to buffer
00001308  14FC 004D                455              MOVE.B  #$4D, (A2)+     *'M' to buffer
0000130C  14FC 0050                456              MOVE.B  #$50, (A2)+     *'P' to buffer
00001310  4EF9 00001360            457  endopCMPI   JMP     op0000cont
00001316                           458  
00001316                           459  **OR Immediate Data*****************************************          
00001316  14FC 004F                460  opORI       MOVE.B  #$4F, (A2)+     *'O' to buffer
0000131A  14FC 0052                461              MOVE.B  #$52, (A2)+     *'R' to buffer
0000131E  4EF9 00001360            462  endopORI    JMP     op0000cont
00001324                           463  **AND Immediate Data****************************************
00001324  14FC 0041                464  opANDI      MOVE.B  #$41, (A2)+     *'A' to buffer
00001328  14FC 004E                465              MOVE.B  #$4E, (A2)+     *'N' to buffer
0000132C  14FC 0044                466              MOVE.B  #$44, (A2)+     *'D' to buffer
00001330  4EF9 00001360            467  endopANDI   JMP     op0000cont
00001336                           468  **SUB Immediate Data****************************************
00001336                           469  opSUBI
00001336  4EF9 00001360            470  endopSUBI   JMP     op0000cont
0000133C                           471  **ADD Immediate Data****************************************
0000133C  14FC 0041                472  opADDI      MOVE.B  #$41, (A2)+     *'A' to buffer
00001340  14FC 0044                473              MOVE.B  #$44, (A2)+     *'D' to buffer
00001344  14FC 0044                474              MOVE.B  #$44, (A2)+     *'D' to buffer
00001348  4EF9 00001360            475  endopADDI   JMP     op0000cont
0000134E                           476  **EOR Immediate Data****************************************
0000134E  14FC 0045                477  opEORI      MOVE.B  #$45, (A2)+     *'E' to buffer
00001352  14FC 004F                478              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001356  14FC 0052                479              MOVE.B  #$52, (A2)+     *'R' to buffer
0000135A  4EF9 00001360            480  endopEORI   JMP     op0000cont
00001360                           481  **Fill in the rest******************************************
00001360  14FC 0049                482  op0000cont  MOVE.B  #$49, (A2)+     *'I' to buffer
00001364  14FC 002E                483              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001368  4EB9 00001F32            484              JSR     SIZE2BUFFER
0000136E  14FC 0009                485              MOVE.B  #$9, (A2)+      *tab to buffer
00001372                           486              *MOVE.B  #$20, (A2)+     *' ' to buffer
00001372  4EB9 00002016            487              JSR     ADDR2BUFFER
00001378  14FC 002C                488              MOVE.B  #$2C, (A2)+     *',' to buffer
0000137C  4EB9 00001D5A            489              JSR     GETEA
00001382  4E75                     490  endop0000   RTS
00001384                           491  *===========================================================
00001384                           492  
00001384                           493  
00001384                           494  ************************************************************  
00001384                           495  *OPCODE: 0001
00001384                           496  *MOVE.B
00001384                           497  opcode0001:
00001384  14FC 004D                498              MOVE.B  #$4D, (A2)+     *'M' to buffer
00001388  14FC 004F                499              MOVE.B  #$4F, (A2)+     *'O' to buffer
0000138C  14FC 0056                500              MOVE.B  #$56, (A2)+     *'V' to buffer
00001390  14FC 0045                501              MOVE.B  #$45, (A2)+     *'E' to buffer
00001394  14FC 002E                502              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001398  14FC 0042                503              MOVE.B  #$42, (A2)+     *'B' to buffer
0000139C  14FC 0020                504              MOVE.B  #$20, (A2)+     *' ' to buffer
000013A0  14FC 0020                505              MOVE.B  #$20, (A2)+     *' ' to buffer
000013A4  4EB9 00001D5A            506              JSR     GETEA
000013AA  0C05 0000                507              CMPI.B  #%0, D5
000013AE  6700 0012                508              BEQ     endop0001   
000013B2  14FC 002C                509              MOVE.B  #$2C, (A2)+     *',' to buffer
000013B6  4EB9 00001EAC            510              JSR     SWAPREG         *swap destination and source regs
000013BC  4EB9 00001D5A            511              JSR     GETEA  
000013C2  4E75                     512  endop0001   RTS                     *return
000013C4                           513  
000013C4                           514  *===========================================================
000013C4                           515  
000013C4                           516  ************************************************************  
000013C4                           517  *OPCODE: 0010
000013C4                           518  *MOVE.L, MOVEA.L
000013C4                           519  opcode0010:
000013C4  14FC 004D                520              MOVE.B  #$4D, (A2)+     *'M' to buffer
000013C8  14FC 004F                521              MOVE.B  #$4F, (A2)+     *'O' to buffer
000013CC  14FC 0056                522              MOVE.B  #$56, (A2)+     *'V' to buffer
000013D0  14FC 0045                523              MOVE.B  #$45, (A2)+     *'E' to buffer
000013D4  3607                     524              MOVE.W   D7, D3         *Check the destination mode to see if addressing*
000013D6  C6BC 000001C0            525              AND.L    #$01C0, D3 
000013DC  0C83 00000040            526              CMPI.L   #$0040, D3     *compares to see if addressing mode
000013E2  6604                     527              BNE.S    code0010_cont  *branches if destination mode is not addressing register
000013E4  14FC 0041                528              MOVE.B  #$41, (A2)+     *'A' to buffer               
000013E8                           529  code0010_cont  
000013E8  14FC 002E                530              MOVE.B  #$2E, (A2)+     *'.' to buffer
000013EC  14FC 004C                531              MOVE.B  #$4C, (A2)+     *'L' to buffer 
000013F0                           532                 
000013F0                           533  code0010_cont2  
000013F0  14FC 0020                534              MOVE.B  #$20, (A2)+     *' ' to buffer
000013F4  14FC 0020                535              MOVE.B  #$20, (A2)+     *' ' to buffer    
000013F8  4EB9 00001D5A            536              JSR     GETEA
000013FE  0C05 0000                537              CMPI.B  #%0, D5         *check if bad ea
00001402  6700 0012                538              BEQ     endop0010   
00001406  14FC 002C                539              MOVE.B  #$2C, (A2)+     *',' to buffer
0000140A  4EB9 00001EAC            540              JSR     SWAPREG         *swap destination and source regs
00001410  4EB9 00001D5A            541              JSR     GETEA 
00001416                           542  
00001416  4E75                     543  endop0010   RTS
00001418                           544  *===========================================================
00001418                           545  
00001418                           546  ************************************************************  
00001418                           547  *OPCODE: 0011
00001418                           548  *MOVE.W,MOVEA.W
00001418                           549  opcode0011:
00001418  14FC 004D                550              MOVE.B  #$4D, (A2)+     *'M' to buffer
0000141C  14FC 004F                551              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001420  14FC 0056                552              MOVE.B  #$56, (A2)+     *'V' to buffer
00001424  14FC 0045                553              MOVE.B  #$45, (A2)+     *'E' to buffer
00001428  3607                     554              MOVE.W   D7, D3         *Check the destination mode to see if addressing*
0000142A  C6BC 000001C0            555              AND.L    #$01C0, D3 
00001430  0C83 00000040            556              CMPI.L   #$0040, D3     *compares to see if addressing mode
00001436  6604                     557              BNE.S    code0011_cont  *branches if destination mode is not addressing register
00001438  14FC 0041                558              MOVE.B  #$41, (A2)+     *'A' to buffer
0000143C                           559  code0011_cont  
0000143C  14FC 002E                560              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001440  14FC 0057                561              MOVE.B  #$57, (A2)+     *'W' to buffer
00001444                           562              
00001444                           563  code0011_cont2 
00001444  14FC 0020                564              MOVE.B  #$20, (A2)+     *' ' to buffer
00001448  14FC 0020                565              MOVE.B  #$20, (A2)+     *' ' to buffer
0000144C  4EB9 00001D5A            566              JSR      GETEA
00001452  0C05 0000                567              CMPI.B  #%0, D5         *check if bad ea
00001456  6700 0012                568              BEQ     endop0011   
0000145A  14FC 002C                569              MOVE.B   #$2C, (A2)+     *',' to buffer
0000145E  4EB9 00001EAC            570              JSR      SWAPREG         *swap destination and source regs
00001464  4EB9 00001D5A            571              JSR      GETEA 
0000146A  4E75                     572  endop0011   RTS
0000146C                           573  *===========================================================
0000146C                           574  
0000146C                           575  ************************************************************  
0000146C                           576  *OPCODE: 0100
0000146C                           577  *CLR,LEA,JMP,JSR,MOVEM,NEG*,NOP*,NOT*,RTS
0000146C                           578  * '*' - instructions, not required but included 
0000146C                           579  opcode0100: 
0000146C                           580  **MOVEM Check***********************************************
0000146C  2607                     581              MOVE.L  D7, D3
0000146E  C67C 0200                582              AND.W   #%0000001000000000, D3 *isolate bit 9
00001472  EC43                     583              ASR.W   #$6, D3 
00001474  0C03 0000                584              CMPI.B  #%0, D3
00001478  6600 001C                585              BNE     notMOVEM             *check JSR bit 
0000147C  2607                     586              MOVE.L  D7, D3
0000147E  C67C 0E00                587              AND.W   #%0000111000000000, D3    *isolate bits 11 - 9
00001482  EC43                     588              ASR.W   #$6, D3
00001484  E843                     589              ASR.W   #$4, D3
00001486  0C43 0003                590              CMPI.W  #%011, D3
0000148A  6700 0060                591              BEQ     op0100MOVEM
0000148E  0C43 0002                592              CMPI.W  #%010, D3
00001492  6700 0058                593              BEQ     op0100MOVEM
00001496                           594              
00001496                           595                                 
00001496                           596  
00001496  2607                     597  notMOVEM    MOVE.L  D7, D3
00001498  0243 0100                598              ANDI.W  #$0100,D3           * Test isolate 8th bit for LEA
0000149C  B67C 0100                599              CMP.W   #$0100,D3           * Test if LEA
000014A0  6700 0024                600              BEQ     opLEA               * Yes finish testing for LEA
000014A4  3607                     601              MOVE.W  D7,D3               * Copy fresh copy of instruction to shift
000014A6  183C 0008                602              MOVE.B  #8,D4          * Load 8 bit shifter
000014AA  E86B                     603              LSR.W   D4,D3               * Shift current instruction
000014AC  0243 000F                604              ANDI.W  #$000F,D3           * Isolate last 4 bits (LSB)
000014B0  C6FC 0006                605              MULU    #6,D3               * Form offset for next JMP table
000014B4  4DF9 0000169E            606              LEA     op0100table,A6         * Load next JMP table 
000014BA  4EB6 3000                607              JSR     00(A6,D3)           * Jump to next instruction per next 4 bits
000014BE  4EF9 000014C4            608              JMP     endop0100            * Once returned from jump table, skip to end
000014C4  4E75                     609  endop0100   RTS         
000014C6                           610  **LEA******************************************************* 
000014C6  14FC 004C                611  opLEA       MOVE.B  #$4C, (A2)+     *'L' to buffer
000014CA  14FC 0045                612              MOVE.B  #$45, (A2)+     *'E' to buffer
000014CE  14FC 0041                613              MOVE.B  #$41, (A2)+     *'A' to buffer
000014D2  14FC 0009                614              MOVE.B  #$9, (A2)+      *tab to buffer
000014D6                           615              *MOVE.B  #$20, (A2)+     *' ' to buffer
000014D6  4EB9 00001D5A            616              JSR     GETEA
000014DC  14FC 002C                617              MOVE.B  #$2C,(A2)+      *',' to buffer
000014E0  14FC 0041                618              MOVE.B  #$41,(A2)+      *'A' to buffer
000014E4  4EB9 00001F20            619              JSR     REG2BUFFER
000014EA  4E75                     620  endopLEA    RTS                     *return   
000014EC                           621  **0100 MOVEM***********************************************
000014EC                           622  op0100MOVEM     
000014EC  4242                     623              CLR D2
000014EE  4243                     624              CLR D3
000014F0  3607                     625              MOVE.W D7, D3
000014F2  3603                     626              MOVE.W D3, D3
000014F4  14FC 004D                627              MOVE.B  #$4D, (A2)+     *'M' to buffer
000014F8  14FC 004F                628              MOVE.B  #$4F, (A2)+     *'O' to buffer
000014FC  14FC 0056                629              MOVE.B  #$56, (A2)+     *'V' to buffer
00001500  14FC 0045                630              MOVE.B  #$45, (A2)+     *'E' to buffer
00001504  14FC 004D                631              MOVE.B  #$4D, (A2)+     *'M' to buffer
00001508  14FC 002E                632              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000150C                           633              
0000150C  C67C 0040                634              AND.W #%0000000001000000, D3   *isolate 6 bit
00001510  EC43                     635              ASR.W #$6, D3
00001512  4EB9 0000153A            636              JSR    MOVEMSIZE2BUFFER
00001518  14FC 0020                637              MOVE.B  #$20, (A2)+     *' ' to buffer
0000151C  14FC 0020                638              MOVE.B  #$20, (A2)+     *' ' to buffer
00001520  3607                     639              MOVE D7, D3
00001522  C67C 0400                640              AND.W #%0000010000000000, D3 *Checks the direction
00001526  E043                     641              ASR.W #$8, D3
00001528  E443                     642              ASR.W #$2, D3
0000152A  C6FC 0006                643              MULU #$6, D3
0000152E  4DF9 00001566            644              LEA MOVEmem_table, A6
00001534  4EB6 3000                645              JSR 0(A6, D3)           *memory direction jump table
00001538                           646              *JMP     print_b         *RTS is broken
00001538  4E75                     647              RTS
0000153A                           648              
0000153A                           649  ************************************************************
0000153A                           650  *MOVEMSIZE2BUFFER
0000153A                           651  *Description: Isolates and converts the instruction size for MOVEM 
0000153A                           652  *             and sends it to the output buffer. bit 6
0000153A                           653  *Registers Used:
0000153A                           654  *D3 - size bit
0000153A                           655  *A2 - buffer address of decoded instruction
0000153A                           656  ************************************************************
0000153A                           657  MOVEMSIZE2BUFFER:
0000153A                           658              
0000153A  B63C 0000                659              CMP.B   #%00, D3        *word
0000153E  6700 0016                660              BEQ     ms2bW            *
00001542  B63C 0001                661              CMP.B   #%01, D3        *long
00001546  6700 0018                662              BEQ     ms2bL           *
0000154A  4EF9 0000204E            663              JMP     BADINST         *bad instruction
00001550  4EF9 00001564            664              JMP     endms2b          *
00001556                           665                                      *
00001556  14FC 0057                666  ms2bW       MOVE.B  #$57,(A2)+      *'W' to buffer
0000155A  4EF9 00001564            667              JMP     endms2b          *
00001560  14FC 004C                668  ms2bL       MOVE.B  #$4C,(A2)+      *'L' to buffer
00001564  4E75                     669  endms2b     RTS                     *return
00001566                           670   
00001566                           671  **MOVEM Direction Table************************************ 
00001566                           672  MOVEmem_table  
00001566  4EF9 00001574            673                  JMP Reg2Mem
0000156C  4EF9 0000159A            674                  JMP Mem2Reg
00001572  4E75                     675                  RTS   
00001574                           676  **MOVEM Register to Memory*********************************
00001574                           677  Reg2Mem
00001574                           678                 *MOVE.W D1, D0             
00001574  4EB9 0000169A            679                 JSR GETMWORD             *loads next word (A0) to D1
0000157A  4EB9 000015C2            680                 JSR Get_PRE_DReg_List    *get bits 7 - 0
00001580  4EB9 000015F4            681                 JSR Get_PRE_AReg_List    *get bits 15 - 8
00001586                           682                 
00001586  153C 00FF                683                 MOVE.B #$FF, -(A2)
0000158A  14FC 002C                684                 MOVE.B #$2C, (A2)+
0000158E  14FC 0020                685                 MOVE.B #$20, (A2)+
00001592                           686                 
00001592  4EB9 00001D5A            687                 JSR      GETEA
00001598  4E75                     688  endReg2Mem     RTS
0000159A                           689  **MOVEM Memory to Register********************************* 
0000159A                           690  Mem2Reg
0000159A  4EB9 00001D5A            691                 JSR      GETEA
000015A0  14FC 002C                692                 MOVE.B #$2C, (A2)+ *',' to buffer
000015A4  14FC 0020                693                 MOVE.B #$20, (A2)+   *' ' to buffer
000015A8                           694                 
000015A8  4EB9 0000169A            695                 JSR GETMWORD
000015AE  3001                     696                 MOVE.W D1, D0        *D1 mask, D0 copy of mask
000015B0                           697        
000015B0  4EB9 0000162C            698                 JSR Get_POST_AReg_List
000015B6                           699                 *MOVE.W D0, D1
000015B6  4EB9 00001666            700                 JSR Get_POST_DReg_List
000015BC  153C 00FF                701                 MOVE.B #$FF, -(A2)
000015C0  4E75                     702                 RTS    
000015C2                           703  **Predec Register*****************************************
000015C2                           704  Get_PRE_DReg_List
000015C2  3001                     705                 MOVE.W D1, D0
000015C4  E048                     706                 LSR #$8, D0 ** Data Register mask **
000015C6  143C 0000                707                 MOVE.B #$00, D2 ** Preps D2
000015CA  183C 0009                708                 MOVE.B #$09, D4 ** Sets the counter **
000015CE                           709                 
000015CE                           710  loopPRE_Dlist     
000015CE  5304                     711                 SUB.B #$1, D4    *sub from counter
000015D0  B83C 0000                712                 CMP.B #$00, D4   *end?
000015D4  6700 00C2                713                 BEQ end_loop
000015D8  E308                     714                 LSL.B #1, D0
000015DA  6500 0006                715                 BCS printPRE_DReg_List
000015DE  60EE                     716                 BRA loopPRE_Dlist
000015E0  4E75                     717                 RTS
000015E2                           718  
000015E2                           719  printPRE_DReg_List
000015E2  143C 0038                720                 MOVE.B #$38, D2
000015E6  9404                     721                 SUB.B D4, D2         
000015E8  14FC 0044                722                 MOVE.B #$44, (A2)+
000015EC  14C2                     723                 MOVE.B D2, (A2)+
000015EE  14FC 002F                724                 MOVE.B #$2F, (A2)+
000015F2  60DA                     725                 BRA loopPRE_Dlist
000015F4                           726  *Predec Address*********************************************               
000015F4                           727  Get_PRE_AReg_List
000015F4  1001                     728                 MOVE.B D1, D0     ***Moves the address list mask to d4 ***
000015F6  143C 0000                729                 MOVE.B #$00, D2  ** Preps D5
000015FA  183C 0009                730                 MOVE.B #9, D4    ** Sets the counter to 8 
000015FE                           731                 **ASR #8, D4      ** Shifts the mask for Address Registers **
000015FE                           732  loopPRE_Alist
000015FE  5304                     733                 SUB.B #$01, D4  ** Decrements the counter **
00001600  B03C 0000                734                 CMP.B #$00, D0
00001604  6700 0092                735                 BEQ end_loop
00001608  B83C 0000                736                 CMP.B #$00, D4  ** Checks the counter **
0000160C  6700 008A                737                 BEQ end_loop   ** Ends the loop when counter is = 0 **
00001610  E308                     738                 LSL.B #1, D0  ** Shifts mask to the left by one **
00001612  6500 0006                739                 BCS printPRE_AReg_List ** Checks the carry Set bit **
00001616  60E6                     740                 BRA loopPRE_Alist
00001618  4E75                     741                 RTS
0000161A                           742  
0000161A                           743  printPRE_AReg_List
0000161A  143C 0038                744                 MOVE.B #$38, D2
0000161E  9404                     745                 SUB.B D4, D2
00001620  14FC 0041                746                 MOVE.B #$41, (A2)+
00001624  14C2                     747                 MOVE.B D2, (A2)+
00001626  14FC 002F                748                 MOVE.B #$2F, (A2)+
0000162A  60D2                     749                 BRA loopPRE_Alist
0000162C                           750  **Post Address*********************************************
0000162C                           751  Get_POST_AReg_List
0000162C                           752                 
0000162C  E040                     753                 ASR #8, D0
0000162E  143C 0000                754                 MOVE.B #$00, D2  ** Preps D2
00001632  183C 0009                755                 MOVE.B #9, D4    ** Sets the counter to 8 
00001636                           756  loopPOST_Alist
00001636  5304                     757                 SUB.B #$01, D4  ** Decrements the counter **
00001638  B03C 0000                758                 CMP.B #$00, D0
0000163C  6700 005A                759                 BEQ end_loop
00001640  B83C 0000                760                 CMP.B #$00, D4  ** Checks the counter **
00001644  6700 0052                761                 BEQ end_loop   ** Ends the loop when counter is = 0 **
00001648  E308                     762                 LSL.B #1, D0  ** Shifts mask to the left by one **
0000164A  6500 0006                763                 BCS printPOST_AReg_List ** Checks the carry Set bit **
0000164E  60E6                     764                 BRA loopPOST_Alist
00001650  4E75                     765                 RTS      
00001652                           766                 
00001652                           767  printPOST_AReg_List
00001652  143C 0030                768                 MOVE.B #$30, D2
00001656  D404                     769                 ADD.B D4, D2
00001658  5302                     770                 SUB.B #$1, D2
0000165A  14FC 0041                771                 MOVE.B #$41, (A2)+
0000165E  14C2                     772                 MOVE.B D2, (A2)+
00001660  14FC 002F                773                 MOVE.B #$2F, (A2)+
00001664  60D0                     774                 BRA loopPOST_Alist
00001666                           775  *Post Register*********************************************
00001666                           776  Get_POST_DReg_List
00001666                           777                  
00001666  1001                     778                 MOVE.B D1, D0
00001668  143C 0000                779                 MOVE.B #$00, D2 ** Preps D2
0000166C  183C 0009                780                 MOVE.B #$09, D4 ** Sets the counter **
00001670                           781                 
00001670                           782  loopPOST_Dlist     
00001670  5304                     783                 SUB.B #$1, D4
00001672  B03C 0000                784                 CMP.B #$00, D0
00001676  6700 0020                785                 BEQ end_loop
0000167A  E308                     786                 LSL.B #1, D0
0000167C  6500 0006                787                 BCS printPOST_DReg_List
00001680  60EE                     788                 BRA loopPOST_Dlist
00001682  4E75                     789                 RTS
00001684                           790  
00001684                           791                 
00001684                           792  printPOST_DReg_List
00001684  143C 0030                793                 MOVE.B #$30, D2
00001688  D404                     794                 ADD.B D4, D2
0000168A  5302                     795                 SUB.B #$1, D2
0000168C  14FC 0044                796                 MOVE.B #$44, (A2)+
00001690  14C2                     797                 MOVE.B D2, (A2)+
00001692  14FC 002F                798                 MOVE.B #$2F, (A2)+
00001696  60D8                     799                 BRA loopPOST_Dlist
00001698                           800  
00001698  4E75                     801  end_loop        RTS              
0000169A                           802  ***********************************************************
0000169A                           803  *GETMWORD
0000169A                           804  *Description: Get the next word in memory for MOVEM Mask             
0000169A                           805  GETMWORD
0000169A  3218                     806              MOVE.W (A0)+, D1
0000169C  4E75                     807  endGETMWORD RTS
0000169E                           808                  
0000169E                           809  *==========================================================
0000169E                           810  *  ___ _____ _   ___ _____   _____ _   ___ _    ___ 
0000169E                           811  * / __|_   _/_\ | _ \_   _| |_   _/_\ | _ ) |  | __|
0000169E                           812  * \__ \ | |/ _ \|   / | |     | |/ _ \| _ \ |__| _| 
0000169E                           813  * |___/ |_/_/ \_\_|_\ |_|     |_/_/ \_\___/____|___|
0000169E                           814  *                                                  
0000169E                           815  *0100 SECOND LAYER OPCODE TABLE SUBROUTINES 
0000169E                           816  op0100table
0000169E  4EF9 00001700            817              JMP     op0100_0000   *BADINST          
000016A4  4EF9 00001708            818              JMP     op0100_0001   *BADINST           
000016AA  4EF9 00001710            819              JMP     op0100_0010   *CLR
000016B0  4EF9 00001736            820              JMP     op0100_0011   *BADINST
000016B6  4EF9 0000173E            821              JMP     op0100_0100   *NEG*
000016BC  4EF9 00001764            822              JMP     op0100_0101   *BADINST
000016C2  4EF9 0000176C            823              JMP     op0100_0110   *NOT*
000016C8  4EF9 00001792            824              JMP     op0100_0111   *BADINST
000016CE  4EF9 0000179A            825              JMP     op0100_1000   *SWAP*
000016D4  4EF9 000017A2            826              JMP     op0100_1001   *BADINST
000016DA  4EF9 000017AA            827              JMP     op0100_1010   *BADINST
000016E0  4EF9 000017B2            828              JMP     op0100_1011   *BADINST
000016E6  4EF9 000017BA            829              JMP     op0100_1100   *BADINST
000016EC  4EF9 000017C2            830              JMP     op0100_1101   *BADINST
000016F2  4EF9 000017CA            831              JMP     op0100_1110   *NOP*,JMP,JSR,RTS
000016F8  4EF9 0000183E            832              JMP     op0100_1111   *BADINST
000016FE                           833  endop0100table   
000016FE  4E75                     834              RTS                   *return
00001700                           835  **0000 BADINST**********************************************
00001700  4EB9 0000204E            836  op0100_0000 JSR     BADINST
00001706                           837  endop0100_0000
00001706  4E75                     838              RTS
00001708                           839  **0001 BADINST**********************************************          
00001708  4EB9 0000204E            840  op0100_0001 JSR     BADINST          
0000170E                           841  endop0100_0001
0000170E  4E75                     842              RTS            
00001710                           843  **0010 CLR************************************************** 
00001710  14FC 0043                844  op0100_0010 MOVE.B  #$43, (A2)+     *'C' to buffer
00001714  14FC 004C                845              MOVE.B  #$4C, (A2)+     *'L' to buffer
00001718  14FC 0052                846              MOVE.B  #$52, (A2)+     *'R' to buffer
0000171C  14FC 002E                847              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001720  4EB9 00001F32            848              JSR     SIZE2BUFFER
00001726  14FC 0020                849              MOVE.B  #$20, (A2)+     *' ' to buffer
0000172A  14FC 0020                850              MOVE.B  #$20, (A2)+     *' ' to buffer
0000172E  4EB9 00001D5A            851              JSR     GETEA
00001734                           852  endop0100_0010    
00001734  4E75                     853              RTS                     *return
00001736                           854  **0011 BADINST**********************************************          
00001736  4EB9 0000204E            855  op0100_0011 JSR     BADINST          
0000173C                           856  endop0100_0011
0000173C  4E75                     857              RTS  
0000173E                           858  **0100 NEG************************************************** 
0000173E  14FC 004E                859  op0100_0100 MOVE.B  #$4E, (A2)+     *'N' to buffer
00001742  14FC 0045                860              MOVE.B  #$45, (A2)+     *'E' to buffer
00001746  14FC 0047                861              MOVE.B  #$47, (A2)+     *'G' to buffer
0000174A  14FC 002E                862              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000174E  4EB9 00001F32            863              JSR     SIZE2BUFFER
00001754  14FC 0020                864              MOVE.B  #$20, (A2)+     *' ' to buffer
00001758  14FC 0020                865              MOVE.B  #$20, (A2)+     *' ' to buffer
0000175C  4EB9 00001D5A            866              JSR     GETEA
00001762                           867  endop0100_0100   
00001762  4E75                     868              RTS                     *return
00001764                           869  **0101 BADINST**********************************************          
00001764  4EB9 0000204E            870  op0100_0101 JSR     BADINST          
0000176A                           871  endop0100_0101
0000176A  4E75                     872              RTS  
0000176C                           873  **0110 NOT************************************************** 
0000176C                           874  op0100_0110 
0000176C  14FC 004E                875              MOVE.B  #$4E, (A2)+     *'N' to buffer
00001770  14FC 004F                876              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001774  14FC 0054                877              MOVE.B  #$54, (A2)+     *'T' to buffer
00001778  14FC 002E                878              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000177C  4EB9 00001F32            879              JSR     SIZE2BUFFER
00001782  14FC 0020                880              MOVE.B  #$20, (A2)+     *' ' to buffer
00001786  14FC 0020                881              MOVE.B  #$20, (A2)+     *' ' to buffer
0000178A  4EB9 00001D5A            882              JSR     GETEA
00001790                           883  endop0100_0110
00001790  4E75                     884              RTS                     *return
00001792                           885  **0111 BADINST**********************************************          
00001792  4EB9 0000204E            886  op0100_0111 JSR     BADINST          
00001798                           887  endop0100_0111
00001798  4E75                     888              RTS 
0000179A                           889  **1000 SWAP*************************************************          
0000179A  4EB9 0000204E            890  op0100_1000 JSR     BADINST     *SWAP not supported     
000017A0                           891  endop0100_1000
000017A0  4E75                     892              RTS  
000017A2                           893  **1001 BADINST**********************************************           
000017A2  4EB9 0000204E            894  op0100_1001 JSR     BADINST          
000017A8                           895  endop0100_1001
000017A8  4E75                     896              RTS 
000017AA                           897  **1010 BADINST**********************************************           
000017AA  4EB9 0000204E            898  op0100_1010 JSR     BADINST          
000017B0                           899  endop0100_1010
000017B0  4E75                     900              RTS 
000017B2                           901  **1011 BADINST**********************************************           
000017B2  4EB9 0000204E            902  op0100_1011 JSR     BADINST          
000017B8                           903  endop0100_1011
000017B8  4E75                     904              RTS 
000017BA                           905  **1100 BADINST**********************************************           
000017BA  4EB9 0000204E            906  op0100_1100 JSR     BADINST          
000017C0                           907  endop0100_1100
000017C0  4E75                     908              RTS 
000017C2                           909  **1101 BADINST**********************************************           
000017C2  4EB9 0000204E            910  op0100_1101 JSR     BADINST          
000017C8                           911  endop0100_1101
000017C8  4E75                     912              RTS 
000017CA                           913  ***1110 NOP*,RTS,JSR,JMP************************************
000017CA                           914  op0100_1110:                       
000017CA  4EB9 00001E5E            915              JSR     GETSIZE
000017D0  0C03 0002                916              CMPI.B  #%10, D3
000017D4  6700 0036                917              BEQ     opJSR
000017D8  0C03 0003                918              CMPI.B  #%11, D3
000017DC  6700 0046                919              BEQ     opJMP
000017E0  BE7C 4E75                920              CMP.W   #$4E75, D7      *absolute binary value
000017E4  6700 0018                921              BEQ     opRTS           * 0100 1110 0111 0101
000017E8  BE7C 4E71                922              CMP.W   #$4E71, D7      *absolute binary value
000017EC  6600 0860                923              BNE     BADINST         * 0100 1110 0111 0001
000017F0                           924  **NOP*******************************************************            
000017F0  14FC 004E                925  opNOP       MOVE.B  #$4E, (A2)+     *'N' to buffer
000017F4  14FC 004F                926              MOVE.B  #$4F, (A2)+     *'O' to buffer
000017F8  14FC 0050                927              MOVE.B  #$50, (A2)+     *'P' to buffer
000017FC  4E75                     928  endopNOP    RTS                     *return
000017FE                           929  **RTS*******************************************************
000017FE  14FC 0052                930  opRTS       MOVE.B  #$52, (A2)+     *'R' to buffer
00001802  14FC 0054                931              MOVE.B  #$54, (A2)+     *'T' to buffer
00001806  14FC 0053                932              MOVE.B  #$53, (A2)+     *'S' to buffer
0000180A  4E75                     933  endopRTS    RTS                     *return
0000180C                           934  **JSR*******************************************************           
0000180C  14FC 004A                935  opJSR       MOVE.B  #$4A, (A2)+     *'J' to buffer
00001810  14FC 0053                936              MOVE.B  #$53, (A2)+     *'S' to buffer
00001814  14FC 0052                937              MOVE.B  #$52, (A2)+     *'R' to buffer
00001818  14FC 0009                938              MOVE.B  #$9, (A2)+      *tab to buffer
0000181C  4EB9 00001D5A            939              JSR     GETEA
00001822  4E75                     940  endopJSR    RTS                     *return
00001824                           941  **JMP*******************************************************
00001824  14FC 004A                942  opJMP       MOVE.B  #$4A, (A2)+     *'J' to buffer
00001828  14FC 004D                943              MOVE.B  #$4D, (A2)+     *'M' to buffer
0000182C  14FC 0050                944              MOVE.B  #$50, (A2)+     *'P' to buffer
00001830  14FC 0020                945              MOVE.B  #$20, (A2)+     *' ' to buffer
00001834  4EB9 00001D5A            946              JSR     GETEA
0000183A  4E75                     947  endopJMP    RTS                     *return                                 
0000183C                           948  endop0100_1110          
0000183C  4E75                     949              RTS                     *return           
0000183E                           950  **1111 BADINST*********************************************          
0000183E  4EB9 0000204E            951  op0100_1111 JSR     BADINST          
00001844                           952  endop0100_1111
00001844  4E75                     953              RTS 
00001846                           954  ***********************************************************
00001846                           955  *  ___ _  _ ___    _____ _   ___ _    ___ 
00001846                           956  * | __| \| |   \  |_   _/_\ | _ ) |  | __|
00001846                           957  * | _|| .` | |) |   | |/ _ \| _ \ |__| _| 
00001846                           958  * |___|_|\_|___/    |_/_/ \_\___/____|___|
00001846                           959  *                                                 
00001846                           960  ************************************************************  
00001846                           961  *OPCODE: 0101
00001846                           962  *BAD INSTRUCTION
00001846  4EF9 0000204E            963  opcode0101: JMP     BADINST
0000184C  4E75                     964  endop0101   RTS
0000184E                           965  *===========================================================
0000184E                           966  
0000184E                           967  ************************************************************  
0000184E                           968  *OPCODE: 0110
0000184E                           969  *BCC,BGT,BLE
0000184E                           970  opcode0110: 
0000184E  3607                     971              MOVE.W  D7, D3          *move to utility
00001850  C67C 0F00                972              AND.W   #%0000111100000000, D3  *isoltate condition, bits 11 - 8
00001854  E043                     973              ASR     #$8, D3         *shifts
00001856  B67C 0004                974              CMP     #$4, D3         *BCC?
0000185A  6700 0012                975              BEQ     opBCC
0000185E  B67C 000E                976              CMP     #$E, D3         *BGT?
00001862  6700 0038                977              BEQ     opBGT
00001866  B67C 000F                978              CMP     #$F, D3         *BLE?
0000186A  6700 005E                979              BEQ     opBLE
0000186E                           980  
0000186E                           981  **BCC*******************************************************
0000186E  14FC 0042                982  opBCC       MOVE.B #$42, (A2)+
00001872  14FC 0043                983              MOVE.B #$43, (A2)+
00001876  14FC 0043                984              MOVE.B #$43, (A2)+
0000187A  14FC 0009                985              MOVE.B #$09, (A2)+
0000187E                           986                
0000187E  4243                     987              CLR D3
00001880  3607                     988              MOVE.W D7, D3
00001882  C67C 00FF                989              AND.W #%0000000011111111, D3
00001886  2808                     990              MOVE.L A0, D4
00001888  B67C 0000                991              CMP #$00, D3
0000188C  6700 008C                992              BEQ DISP16
00001890  B67C 00FF                993              CMP #$FF, D3
00001894  6700 0062                994              BEQ DISP32
00001898  6D00 0096                995              BLT DISP8
0000189C                           996  **BGT*******************************************************  
0000189C  14FC 0042                997  opBGT       MOVE.B #$42, (A2)+
000018A0  14FC 0047                998              MOVE.B #$47, (A2)+
000018A4  14FC 0054                999              MOVE.B #$54, (A2)+
000018A8  14FC 0009               1000              MOVE.B #$09, (A2)+
000018AC                          1001                
000018AC  4243                    1002              CLR D3
000018AE  3607                    1003              MOVE.W D7, D3
000018B0  C67C 00FF               1004              AND.W #%0000000011111111, D3
000018B4  2808                    1005              MOVE.L A0, D4
000018B6  B67C 0000               1006              CMP #$00, D3
000018BA  6700 005E               1007              BEQ DISP16
000018BE  B67C 00FF               1008              CMP #$FF, D3
000018C2  6700 0034               1009              BEQ DISP32
000018C6  6D00 0068               1010              BLT DISP8
000018CA                          1011  **BLE******************************************************* 
000018CA  14FC 0042               1012  opBLE       MOVE.B #$42, (A2)+
000018CE  14FC 004C               1013              MOVE.B #$4C, (A2)+
000018D2  14FC 0045               1014              MOVE.B #$45, (A2)+
000018D6  14FC 0009               1015              MOVE.B #$09, (A2)+
000018DA                          1016                
000018DA  4243                    1017              CLR D3
000018DC  3607                    1018              MOVE.W D7, D3
000018DE  C67C 00FF               1019              AND.W #%0000000011111111, D3
000018E2  2808                    1020              MOVE.L A0, D4
000018E4  B67C 0000               1021              CMP #$00, D3
000018E8  6700 0030               1022              BEQ DISP16
000018EC  B67C 00FF               1023              CMP #$FF, D3
000018F0  6700 0006               1024              BEQ DISP32
000018F4  6D00 003A               1025              BLT DISP8
000018F8                          1026  **Displacement 32 bits***************************************               
000018F8  4EB8 169A               1027  DISP32      JSR GETMWORD
000018FC  3001                    1028              MOVE.W D1, D0
000018FE  E180                    1029              ASL.L #$8, D0
00001900  E180                    1030              ASL.L #$8, D0
00001902  4EB8 169A               1031              JSR GETMWORD
00001906  D280                    1032              ADD.L D0, D1
00001908  D881                    1033              ADD.L D1, D4
0000190A  2648                    1034              MOVEA.L   A0, A3  *store  A0
0000190C  3044                    1035              MOVEA.W   D4, A0
0000190E  4EB8 11FE               1036              JSR       ADDRESS
00001912  204B                    1037              MOVEA.L   A3, A0
00001914                          1038  
00001914  4EF9 00001942           1039              JMP       endop0110
0000191A                          1040  **Displacement 16 bits***************************************             
0000191A  4EB8 169A               1041  DISP16      JSR GETMWORD
0000191E  D841                    1042              ADD.W D1, D4
00001920  2648                    1043              MOVEA.L   A0, A3  *store  A0
00001922  3044                    1044              MOVEA.W   D4, A0
00001924  4EB8 11FE               1045              JSR       ADDRESS
00001928  204B                    1046              MOVEA.L   A3, A0
0000192A  4EF9 00001942           1047              JMP       endop0110   
00001930                          1048  **Displacement 8 bits**************************************** 
00001930  9843                    1049  DISP8       SUB D3, D4
00001932  2648                    1050              MOVEA.L   A0, A3  *store  A0
00001934  3044                    1051              MOVEA.W   D4, A0
00001936  4EB8 11FE               1052              JSR       ADDRESS
0000193A  204B                    1053              MOVEA.L   A3, A0
0000193C                          1054  
0000193C  4EF9 00001942           1055              JMP       endop0110  
00001942                          1056  **END********************************************************               
00001942  4E75                    1057  endop0110   RTS
00001944                          1058  *===========================================================
00001944                          1059  
00001944                          1060  ************************************************************  
00001944                          1061  *OPCODE: 0111
00001944                          1062  *BAD INSTRUCTION
00001944  4EF9 0000204E           1063  opcode0111: JMP     BADINST
0000194A  4E75                    1064  endop0111   RTS
0000194C                          1065  *===========================================================
0000194C                          1066  
0000194C                          1067  ************************************************************  
0000194C                          1068  *OPCODE: 1000
0000194C                          1069  *OR 
0000194C                          1070  opcode1000: 
0000194C  2607                    1071              MOVE.L  D7, D3
0000194E  EC8B                    1072              LSR.L   #6, D3
00001950  0243 0003               1073              ANDI.W  #$03, D3
00001954  B63C 0003               1074              CMP.B   #$3, D3
00001958  6600 0008               1075              BNE     opOR
0000195C  4EF9 0000204E           1076              JMP     BADINST
00001962  14FC 004F               1077  opOR        MOVE.B  #$4F, (A2)+     *'O' to buffer
00001966  14FC 0052               1078              MOVE.B  #$52, (A2)+     *'R' to buffer
0000196A  14FC 002E               1079              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000196E  4EB9 00001F32           1080              JSR     SIZE2BUFFER     *size to buffer
00001974  14FC 0020               1081              MOVE.B  #$20, (A2)+     *' ' to buffer
00001978  14FC 0020               1082              MOVE.B  #$20, (A2)+     *' ' to buffer
0000197C  4EB9 00001E68           1083              JSR     GETDIRECTION    *direction bit 0 = EA; 1 = regs
00001982  0C03 0000               1084              CMPI.B  #%0, D3         *EA first?
00001986  6600 001C               1085              BNE     opOR01          
0000198A  4EB9 00001D5A           1086              JSR     GETEA
00001990  14FC 002C               1087              MOVE.B  #$2C,(A2)+      *',' to buffer
00001994  14FC 0044               1088              MOVE.B  #$44,(A2)+      *'D' to buffer
00001998  4EB9 00001F20           1089              JSR     REG2BUFFER
0000199E  4EF9 000019B8           1090              JMP     endop1000
000019A4                          1091   
000019A4  14FC 0044               1092  opOR01      MOVE.B  #$44,(A2)+      *'D' to buffer
000019A8  4EB9 00001F20           1093              JSR     REG2BUFFER            
000019AE  14FC 002C               1094              MOVE.B  #$2C,(A2)+      *',' to buffer
000019B2  4EB9 00001D5A           1095              JSR     GETEA
000019B8  4E75                    1096  endop1000   RTS
000019BA                          1097  *===========================================================
000019BA                          1098  
000019BA                          1099  ************************************************************ 
000019BA                          1100  *OPCODE: 1001
000019BA                          1101  *SUB, SUBA
000019BA                          1102  opcode1001:
000019BA  14FC 0053               1103              MOVE.B  #$53, (A2)+     *'S' to buffer
000019BE  14FC 0055               1104              MOVE.B  #$55, (A2)+     *'U' to buffer
000019C2  14FC 0042               1105              MOVE.B  #$42, (A2)+     *'B' to buffer
000019C6  4EB9 00001E5E           1106              JSR     GETSIZE         *get the instruction size (OPMODE)
000019CC  B63C 0003               1107              CMP.B   #%11, D3        *11 = SUBA  
000019D0  6600 0046               1108              BNE     opsubSub
000019D4  14FC 0041               1109              MOVE.B  #$41, (A2)+     *'A' to buffer
000019D8  14FC 002E               1110              MOVE.B  #$2E, (A2)+     *'.' to buffer
000019DC  3607                    1111              MOVE.W  D7, D3          *move to utility
000019DE  E08B                    1112              LSR.L   #8, D3          *shift for opmode
000019E0  0243 0001               1113              ANDI.W  #$0001, D3      *isolate 8 to determine size
000019E4  B63C 0001               1114              CMP.B   #%1, D3         *long?
000019E8  6700 0008               1115              BEQ     opsubL          *it's a longword
000019EC  4EF9 000019F6           1116              JMP     opsubSuba
000019F2                          1117  **SUBA******************************************************            
000019F2  14FC 004C               1118  opsubL      MOVE.B  #$4C, (A2)+     *'L' to buffer
000019F6  14FC 0020               1119  opsubSuba   MOVE.B  #$20, (A2)+     *' ' to buffer    
000019FA  14FC 0020               1120              MOVE.B  #$20, (A2)+     *' ' to buffer
000019FE  4EB9 00001D5A           1121              JSR     GETEA           *get effective address
00001A04  14FC 002C               1122              MOVE.B  #$2C,(A2)+      *',' to buffer
00001A08  14FC 0041               1123              MOVE.B  #$41,(A2)+      *'A' to buffer
00001A0C  4EB9 00001F20           1124              JSR     REG2BUFFER      *get the register number
00001A12  4EF9 00001A62           1125              JMP     endop1001       *return
00001A18                          1126  **SUB*EA>>Register****************************************** 
00001A18  14FC 002E               1127  opsubSub    MOVE.B  #$2E, (A2)+     *'.' to buffer
00001A1C  4EB9 00001F32           1128              JSR     SIZE2BUFFER     *send size to buffer
00001A22  14FC 0009               1129              MOVE.B  #$09, (A2)+     *tab
00001A26  4EB9 00001E68           1130              JSR     GETDIRECTION    *isolate
00001A2C  B63C 0000               1131              CMP.B   #%0, D3         *direction bit 0 = EA; 1 = regs
00001A30  6600 001C               1132              BNE     opsubSubR         
00001A34  4EB9 00001D5A           1133              JSR     GETEA           *get effective address
00001A3A  14FC 002C               1134              MOVE.B  #$2C,(A2)+      *',' to buffer   
00001A3E  14FC 0044               1135              MOVE.B  #$44,(A2)+      *'D' to buffer
00001A42  4EB9 00001F20           1136              JSR     REG2BUFFER      *get the register number
00001A48  4EF9 00001A62           1137              JMP     endop1001       *return
00001A4E                          1138  **SUB*Register>>EA******************************************            
00001A4E  14FC 0044               1139  opsubSubR   MOVE.B  #$44,(A2)+      *'D' to buffer
00001A52  4EB9 00001F20           1140              JSR     REG2BUFFER      *get the register number
00001A58  14FC 002C               1141              MOVE.B  #$2C,(A2)+      *',' to buffer
00001A5C  4EB9 00001D5A           1142              JSR     GETEA           *get effective address
00001A62  4E75                    1143  endop1001   RTS                     *return
00001A64                          1144  *===========================================================
00001A64                          1145                                                         
00001A64                          1146  ************************************************************  
00001A64                          1147  *OPCODE: 1010
00001A64                          1148  *BAD INSTRUCTION
00001A64  4EF9 0000204E           1149  opcode1010: JMP     BADINST
00001A6A  4E75                    1150  endop1010   RTS
00001A6C                          1151  *===========================================================
00001A6C                          1152  
00001A6C                          1153  ************************************************************  
00001A6C                          1154  *OPCODE: 1011
00001A6C                          1155  *CMP,CMPA
00001A6C                          1156  *EOR is not applicable to this assignment and will be 
00001A6C                          1157  *regarded as a bad instruction
00001A6C                          1158  opcode1011: 
00001A6C  4EB9 00001E5E           1159              JSR     GETSIZE
00001A72  0C03 0003               1160              CMPI.B   #%11, D3
00001A76  6600 0040               1161              BNE     opcmp
00001A7A                          1162  **CMPA******************************************************             
00001A7A  14FC 0043               1163  opCMPA      MOVE.B  #$43, (A2)+     *'C' to buffer
00001A7E  14FC 004D               1164              MOVE.B  #$4D, (A2)+     *'M' to buffer
00001A82  14FC 0050               1165              MOVE.B  #$50, (A2)+     *'P' to buffer
00001A86  14FC 0041               1166              MOVE.B  #$41, (A2)+     *'A' to buffer
00001A8A  14FC 002E               1167              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001A8E  2607                    1168              MOVE.L  D7, D3
00001A90  14FC 0020               1169              MOVE.B  #$20, (A2)+     *' ' to buffer
00001A94  14FC 0020               1170              MOVE.B  #$20, (A2)+     *' ' to buffer
00001A98                          1171              
00001A98  4EB9 00001F32           1172              JSR     SIZE2BUFFER
00001A9E  4EB9 00001D5A           1173              JSR     GETEA
00001AA4  14FC 002C               1174              MOVE.B  #$2C, (A2)+     *',' to buffer
00001AA8  14FC 0041               1175              MOVE.B  #$41, (A2)+     *'A' to buffer
00001AAC  4EB9 00001F20           1176              JSR     REG2BUFFER
00001AB2  4EF9 00001B06           1177              JMP     endop1011
00001AB8                          1178  **CMP*******************************************************             
00001AB8  2607                    1179  opCMP       MOVE.L  D7, D3
00001ABA  4EB9 00001E68           1180              JSR     GETDIRECTION
00001AC0  0C03 0000               1181              CMPI.B   #%0, D3
00001AC4  6600 003A               1182              BNE     opeor
00001AC8                          1183  
00001AC8  14FC 0043               1184              MOVE.B  #$43, (A2)+     *'C' to buffer
00001ACC  14FC 004D               1185              MOVE.B  #$4D, (A2)+     *'M' to buffer
00001AD0  14FC 0050               1186              MOVE.B  #$50, (A2)+     *'P' to buffer
00001AD4  14FC 002E               1187              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001AD8  4EB9 00001F32           1188              JSR     SIZE2BUFFER
00001ADE  14FC 0020               1189              MOVE.B  #$20, (A2)+     *' ' to buffer
00001AE2  14FC 0020               1190              MOVE.B  #$20, (A2)+     *' ' to buffer
00001AE6  4EB9 00001D5A           1191              JSR     GETEA
00001AEC  14FC 002C               1192              MOVE.B  #$2C, (A2)+     *',' to buffer
00001AF0  14FC 0044               1193              MOVE.B  #$44, (A2)+     *'D' to buffer
00001AF4  4EB9 00001F20           1194              JSR     REG2BUFFER
00001AFA  4EF9 00001B06           1195              JMP     endop1011
00001B00                          1196  **EOR*******************************************************            
00001B00  4EF9 0000204E           1197  opEOR       JMP     BADINST              
00001B06  4E75                    1198  endop1011   RTS
00001B08                          1199  *===========================================================
00001B08                          1200  
00001B08                          1201  ************************************************************  
00001B08                          1202  *OPCODE: 1100
00001B08                          1203  *AND
00001B08                          1204  *MULU, EXG are not applicable to this assignment and will be 
00001B08                          1205  *regarded as a bad instruction
00001B08                          1206  opcode1100:
00001B08  3607                    1207              MOVE.W  D7, D3          *move to utility
00001B0A  EC8B                    1208              LSR.L   #6, D3          *shift
00001B0C  0243 0003               1209              ANDI.W  #$3, D3         *isolate
00001B10  B63C 0003               1210              CMP.B   #$3, D3         *MULU/MULS?
00001B14  6700 0538               1211              BEQ     BADINST         *instruction not supported
00001B18  3607                    1212              MOVE.W  D7, D3          *move to utility
00001B1A  E68B                    1213              LSR.L   #3, D3          *shift
00001B1C  0203 001F               1214              ANDI.B  #$1F, D3        *isolate
00001B20  B63C 0008               1215              CMP.B   #$08, D3        *EXG?
00001B24  6700 0528               1216              BEQ     BADINST         *instruction not supported
00001B28  B63C 0009               1217              CMP.B   #$09, D3        *EXG?
00001B2C  6700 0520               1218              BEQ     BADINST         *instruction not supported
00001B30  B63C 0011               1219              CMP.B   #$11, D3        *EXG?
00001B34  6700 0518               1220              BEQ     BADINST         *ok, phew made it to AND
00001B38                          1221              
00001B38  14FC 0041               1222              MOVE.B  #$41, (A2)+     *'A' to buffer
00001B3C  14FC 004E               1223              MOVE.B  #$4E, (A2)+     *'N' to buffer
00001B40  14FC 0044               1224              MOVE.B  #$44, (A2)+     *'D' to buffer
00001B44  14FC 002E               1225              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001B48  4EB9 00001F32           1226              JSR     SIZE2BUFFER     *send size to buffer
00001B4E  14FC 0020               1227              MOVE.B  #$20, (A2)+     *' ' to buffer
00001B52  14FC 0020               1228              MOVE.B  #$20, (A2)+     *' ' to buffer
00001B56  4EB9 00001E68           1229              JSR     GETDIRECTION    *isolate bit for direction
00001B5C  0C03 0000               1230              CMPI.B  #%0, D3         *direction bit 0 = EA; 1 = regs
00001B60  6600 001C               1231              BNE     opAND01         *
00001B64  4EB9 00001D5A           1232              JSR     GETEA           *get effective address
00001B6A  14FC 002C               1233              MOVE.B  #$2C, (A2)+     *',' to buffer
00001B6E  14FC 0044               1234              MOVE.B  #$44, (A2)+     *'D' to buffer
00001B72  4EB9 00001F20           1235              JSR     REG2BUFFER      *get the register number
00001B78  4EF9 00001B92           1236              JMP     endop1100     
00001B7E                          1237           
00001B7E  14FC 0044               1238  opAND01     MOVE.B  #$44, (A2)+     *'D' to buffer
00001B82  4EB9 00001F20           1239              JSR     REG2BUFFER      *get the register number
00001B88  14FC 002C               1240              MOVE.B  #$2C, (A2)+     *',' to buffer
00001B8C  4EB9 00001D5A           1241              JSR     GETEA           *get effective address 
00001B92  4E75                    1242  endop1100   RTS                     *return
00001B94                          1243  *===========================================================
00001B94                          1244  
00001B94                          1245  ************************************************************  
00001B94                          1246  *OPCODE: 1101
00001B94                          1247  *ADD,ADDA
00001B94                          1248  opcode1101: 
00001B94  14FC 0041               1249              MOVE.B  #$41, (A2)+     *'A' to buffer
00001B98  14FC 0044               1250              MOVE.B  #$44, (A2)+     *'D' to buffer
00001B9C  14FC 0044               1251              MOVE.B  #$44, (A2)+     *'D' to buffer
00001BA0  4EB9 00001E5E           1252              JSR     GETSIZE         *
00001BA6  0C03 0003               1253              CMPI.B  #%11, D3        *11?
00001BAA  6600 004E               1254              BNE     opadd           *
00001BAE  14FC 0041               1255              MOVE.B  #$41, (A2)+     *'A' to buffer
00001BB2  14FC 002E               1256              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001BB6  3607                    1257              MOVE.W  D7, D3          *move to utility
00001BB8  E08B                    1258              LSR.L   #8, D3          *shift
00001BBA  0243 0001               1259              ANDI.W  #$0001, D3      *isolate
00001BBE  0C03 0001               1260              CMPI.B  #%1, D3         *long?
00001BC2  6700 000C               1261              BEQ     opaddL          *
00001BC6  14FC 0057               1262              MOVE.B  #$57,(A2)+      *'W' to buffer
00001BCA  4EF9 00001BD4           1263              JMP     opadda  
00001BD0                          1264  **ADD.L*****************************************************
00001BD0  14FC 004C               1265  opADDL      MOVE.B  #$4C,(A2)+      *'L' to buffer
00001BD4                          1266  *ADDA*******************************************************
00001BD4  14FC 0020               1267  opADDA      MOVE.B  #$20, (A2)+     *' ' to buffer
00001BD8  14FC 0020               1268              MOVE.B  #$20, (A2)+     *' ' to buffer
00001BDC  14FC 0020               1269              MOVE.B  #$20, (A2)+     *' ' to buffer
00001BE0  4EB9 00001D5A           1270              JSR     GETEA           *get effective address 
00001BE6  14FC 002C               1271              MOVE.B  #$2C, (A2)+     *',' to buffer
00001BEA  14FC 0041               1272              MOVE.B  #$41, (A2)+     *'A' to buffer
00001BEE  4EB9 00001F20           1273              JSR     REG2BUFFER      *get the register number
00001BF4  4EF9 00001C48           1274              JMP     endop1101
00001BFA                          1275  **ADD*******************************************************
00001BFA  14FC 002E               1276  opADD       MOVE.B  #$2E, (A2)+     *'.' to buffer  
00001BFE  4EB9 00001F32           1277              JSR     SIZE2BUFFER     *send size to buffer
00001C04  14FC 0020               1278              MOVE.B  #$20, (A2)+     *' ' to buffer
00001C08  14FC 0020               1279              MOVE.B  #$20, (A2)+     *' ' to buffer
00001C0C  4EB9 00001E68           1280              JSR     GETDIRECTION    *isolate bit for direction
00001C12  0C03 0000               1281              CMPI.B   #%0, D3        *direction bit 0 = EA; 1 = regs
00001C16  6600 001C               1282              BNE     opADD01         *
00001C1A  4EB9 00001D5A           1283              JSR     GETEA           *get effective address
00001C20  14FC 002C               1284              MOVE.B  #$2C, (A2)+     *',' to buffer
00001C24  14FC 0044               1285              MOVE.B  #$44, (A2)+     *'D' to buffer
00001C28  4EB9 00001F20           1286              JSR     REG2BUFFER      *get the register number
00001C2E  4EF9 00001C48           1287              JMP     endop1101   
00001C34                          1288  **EA first************************************************** 
00001C34  14FC 0044               1289  opADD01    MOVE.B  #$44, (A2)+     *'D' to buffer
00001C38  4EB9 00001F20           1290              JSR     REG2BUFFER      *get the register number
00001C3E  14FC 002C               1291              MOVE.B  #$2C, (A2)+     *',' to buffer
00001C42  4EB9 00001D5A           1292              JSR     GETEA           *get effective address
00001C48  4E75                    1293  endop1101   RTS                     *return           
00001C4A                          1294  *===========================================================
00001C4A                          1295  
00001C4A                          1296  ************************************************************  
00001C4A                          1297  *OPCODE: 1110
00001C4A                          1298  *AS(L/R), LS(L/R), RO(L/R)
00001C4A                          1299  opcode1110:
00001C4A  4EB9 00001E5E           1300              JSR     GETSIZE
00001C50  0C03 0003               1301              CMPI.B  #%11, D3        *memory?
00001C54  6700 005E               1302              BEQ     opSMEM
00001C58                          1303              
00001C58                          1304  **Register shift********************************************
00001C58  3607                    1305  opSREG      MOVE.W  D7, D3          *move to utility
00001C5A  E60B                    1306              LSR.B   #3, D3          *isolate 3-4
00001C5C  0203 0003               1307              ANDI.B  #$03, D3
00001C60  0C03 0000               1308              CMPI.B  #%00, D3        *AS(L/R)?
00001C64  6700 003A               1309              BEQ     opASD
00001C68  0C03 0001               1310              CMPI.B  #%01, D3        *LS(L/R)?
00001C6C  6700 001E               1311              BEQ     opLSD
00001C70  0C03 0003               1312              CMPI.B  #%11, D3        *RO(L/R)?
00001C74  6600 03D8               1313  endopSREG   BNE     BADINST
00001C78                          1314  **Roll Shift Register**************************************
00001C78  14FC 0052               1315  opROD       MOVE.B  #$52, (A2)+     *'R' to buffer
00001C7C  14FC 004F               1316              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001C80  4EB9 00001D12           1317              JSR     op1110DS
00001C86  4EF9 00001D50           1318  endopROD    JMP     endop1110   
00001C8C                          1319  **Left Shift Register**************************************
00001C8C  14FC 004C               1320  opLSD       MOVE.B  #$4C, (A2)+     *'L' to buffer
00001C90  14FC 0053               1321              MOVE.B  #$53, (A2)+     *'S' to buffer
00001C94  4EB9 00001D12           1322              JSR     op1110DS        *Direction and size to buffer
00001C9A  4EF9 00001D50           1323  endopLSD    JMP     endop1110 
00001CA0                          1324  **Right Shift Register*************************************
00001CA0  14FC 0041               1325  opASD       MOVE.B  #$41, (A2)+     *'A' to buffer
00001CA4  14FC 0053               1326              MOVE.B  #$53, (A2)+     *'S' to buffer
00001CA8  4EB9 00001D12           1327              JSR     op1110DS        *Direction and size to buffer
00001CAE                          1328              
00001CAE  4EF9 00001D50           1329  endopASD    JMP     endop1110 
00001CB4                          1330  **Memory shift**********************************************      
00001CB4  3607                    1331  opSMEM      MOVE.W  D7, D3          *move to utility
00001CB6  E08B                    1332              LSR.L   #8, D3          *isolate
00001CB8  E28B                    1333              LSR.L   #1, D3
00001CBA  0203 0007               1334              ANDI.B  #$0007, D3
00001CBE  0C03 0000               1335              CMPI.B  #%00, D3        *AS(L/R)?
00001CC2  6700 003A               1336              BEQ     opASM
00001CC6  0C03 0001               1337              CMPI.B  #%01, D3        *LS(L/R)?
00001CCA  6700 001E               1338              BEQ     opLSM
00001CCE  0C03 0003               1339              CMPI.B  #%11, D3        *RO(L/R)?
00001CD2  6600 037A               1340  endopSMEM   BNE     BADINST
00001CD6                          1341  **Roll Shift Memory***************************************
00001CD6  14FC 0052               1342  opROM       MOVE.B  #$52, (A2)+     *'R' to buffer
00001CDA  14FC 004F               1343              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001CDE  4EB9 00001D32           1344              JSR     op1110MS
00001CE4  4EF9 00001D50           1345  endopROM    JMP     endop1110 
00001CEA                          1346  **Left Shift Memory**************************************
00001CEA  14FC 004C               1347  opLSM       MOVE.B  #$4C, (A2)+     *'L' to buffer
00001CEE  14FC 0053               1348              MOVE.B  #$53, (A2)+     *'S' to buffer
00001CF2  4EB9 00001D32           1349              JSR     op1110MS            
00001CF8  4EF9 00001D50           1350  endopLSM    JMP     endop1110 
00001CFE                          1351  **Right Shift Memory*************************************
00001CFE  14FC 0041               1352  opASM       MOVE.B  #$41, (A2)+     *'A' to buffer
00001D02  14FC 0053               1353              MOVE.B  #$53, (A2)+     *'S' to buffer
00001D06  4EB9 00001D32           1354              JSR     op1110MS 
00001D0C  4EF9 00001D50           1355  endopASM    JMP     endop1110 
00001D12                          1356  
00001D12  4EB9 00002032           1357  op1110DS    JSR     DIR2BUFFER
00001D18  14FC 002E               1358              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001D1C  4EB9 00001F32           1359              JSR     SIZE2BUFFER
00001D22  14FC 0020               1360              MOVE.B  #$20, (A2)+     *' ' to buffer
00001D26  14FC 0020               1361              MOVE.B  #$20, (A2)+     *' ' to buffer
00001D2A  4EB9 00001E72           1362              JSR     GETIRCOUNTER
00001D30  4E75                    1363              RTS
00001D32                          1364              
00001D32  4EB9 00002032           1365  op1110MS    JSR     DIR2BUFFER
00001D38  14FC 002E               1366              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001D3C  14FC 0057               1367              MOVE.B  #$57, (A2)+     *'W' to buffer
00001D40  14FC 0020               1368              MOVE.B  #$20, (A2)+     *' ' to buffer
00001D44  14FC 0020               1369              MOVE.B  #$20, (A2)+     *' ' to buffer
00001D48  4EB9 00001D5A           1370              JSR     GETEA
00001D4E  4E75                    1371              RTS
00001D50                          1372  
00001D50  4E75                    1373  endop1110   RTS
00001D52                          1374  *===========================================================
00001D52                          1375  
00001D52                          1376  ************************************************************  
00001D52                          1377  *OPCODE: 1111
00001D52                          1378  *BAD INSTRUCTION
00001D52  4EF9 0000204E           1379  opcode1111: JMP     BADINST
00001D58  4E75                    1380  endop111    RTS
00001D5A                          1381   *===========================================================             
00001D5A                          1382  
00001D5A                          1383  ************************************************************
00001D5A                          1384  *  _____ _____ _____ _____ ____ _____ _____     _______      _    ____  ____  ____  _____ ____ ____  
00001D5A                          1385  * | ____|  ___|  ___| ____/ ___|_   _|_ _\ \   / / ____|    / \  |  _ \|  _ \|  _ \| ____/ ___/ ___| 
00001D5A                          1386  * |  _| | |_  | |_  |  _|| |     | |  | | \ \ / /|  _|     / _ \ | | | | | | | |_) |  _| \___ \___ \ 
00001D5A                          1387  * | |___|  _| |  _| | |__| |___  | |  | |  \ V / | |___   / ___ \| |_| | |_| |  _ <| |___ ___) |__) |
00001D5A                          1388  * |_____|_|   |_|   |_____\____| |_| |___|  \_/  |_____| /_/   \_\____/|____/|_| \_\_____|____/____/ 
00001D5A                          1389  *                                                                                                   
00001D5A                          1390  *GETEA
00001D5A                          1391  *Description: Converts the opcode instruction EA
00001D5A                          1392  * 1001 0110 0100 0001
00001D5A                          1393  *             ^-----^
00001D5A                          1394  *Registers Used:
00001D5A                          1395  *For consistency, please utilize registers in the following way.
00001D5A                          1396  *
00001D5A                          1397  *D1 - utility register
00001D5A                          1398  *D3 - utility register
00001D5A                          1399  *D7 - copy of working address
00001D5A                          1400  *
00001D5A                          1401  *A2 - buffer address of decoded instruction
00001D5A                          1402  *A6 - jump table
00001D5A                          1403  ************************************************************
00001D5A                          1404  GETEA:
00001D5A  4DF9 00001D78           1405              LEA     EA_TABLE, A6
00001D60  4283                    1406              CLR.L   D3
00001D62  3607                    1407              MOVE.W  D7, D3
00001D64  0243 003F               1408              ANDI.W  #$003F, D3
00001D68  123C 0003               1409              MOVE.B  #3, D1
00001D6C  E26B                    1410              LSR.W   D1, D3
00001D6E  C6FC 0006               1411              MULU    #6, D3
00001D72  4EB6 3000               1412              JSR     0(A6, D3)
00001D76  4E75                    1413              RTS                     *return
00001D78                          1414  *===========================================================
00001D78                          1415  
00001D78                          1416  ************************************************************
00001D78                          1417  *GET_TABLE
00001D78                          1418  *Description: Jump table of Effective Address Modes
00001D78                          1419  ************************************************************
00001D78                          1420  EA_TABLE:       
00001D78  4EF9 00001DA8           1421              JMP     eacode000
00001D7E  4EF9 00001DBA           1422              JMP     eacode001
00001D84  4EF9 00001DCC           1423              JMP     eacode010
00001D8A  4EF9 00001DE6           1424              JMP     eacode011
00001D90  4EF9 00001E04           1425              JMP     eacode100
00001D96  4EF9 00001E22           1426              JMP     eacode101
00001D9C  4EF9 00001E28           1427              JMP     eacode110
00001DA2  4EF9 00001E2E           1428              JMP     eacode111
00001DA8                          1429  *===========================================================
00001DA8                          1430  
00001DA8                          1431  ************************************************************
00001DA8                          1432  *EA CODES
00001DA8                          1433  *Description: Lsit of Effective Address Subrotines
00001DA8                          1434  *000,001,010,011,100,[101],[110],111
00001DA8                          1435  *Registers Used:
00001DA8                          1436  *TODO
00001DA8                          1437  *
00001DA8                          1438  *Data Register**********************************************
00001DA8  3607                    1439  eacode000   MOVE.W      D7, D3          *move to utility
00001DAA  0243 0007               1440              ANDI.W      #$7, D3         *isolate
00001DAE  14FC 0044               1441              MOVE.B      #$44,(A2)+      *'D' to buffer
00001DB2  0603 0030               1442              ADD.B       #$30, D3        *convert register number to ascii
00001DB6  14C3                    1443              MOVE.B      D3,(A2)+        *to buffer                  
00001DB8  4E75                    1444  endea000    RTS                         *return
00001DBA                          1445  *Address Register*******************************************
00001DBA  3607                    1446  eacode001   MOVE.W      D7, D3          *move to utility
00001DBC  0243 0007               1447              ANDI.W      #$7, D3         *isolate
00001DC0  14FC 0041               1448              MOVE.B      #$41, (A2)+     *'A' to buffer
00001DC4  0603 0030               1449              ADD.B       #$30, D3        *convert register number to ascii
00001DC8  14C3                    1450              MOVE.B      D3,(A2)+        *to buffer  
00001DCA  4E75                    1451  endea001    RTS                         *return
00001DCC                          1452  *Address
00001DCC  3607                    1453  eacode010   MOVE.W      D7, D3          *move to utility
00001DCE  0243 0007               1454              ANDI.W      #$7, D3         *isolate
00001DD2  14FC 0028               1455              MOVE.B      #$28,(A2)+      *'(' to buffer            
00001DD6  14FC 0041               1456              MOVE.B      #$41,(A2)+      *'A' to buffer
00001DDA  0603 0030               1457              ADD.B       #$30, D3        *convert register number to ascii
00001DDE  14C3                    1458              MOVE.B      D3,(A2)+        *to buffer  
00001DE0  14FC 0029               1459              MOVE.B      #$29,(A2)+      *')' to buffe
00001DE4  4E75                    1460  endea010    RTS                         *return
00001DE6                          1461  *Address with Postincrement*********************************
00001DE6  3607                    1462  eacode011   MOVE.W      D7, D3          *move to utility
00001DE8  0243 0007               1463              ANDI.W      #$7, D3         *isolate
00001DEC  14FC 0028               1464              MOVE.B      #$28,(A2)+      *'(' to buffer            
00001DF0  14FC 0041               1465              MOVE.B      #$41,(A2)+      *'A' to buffer
00001DF4  0603 0030               1466              ADD.B       #$30, D3        *convert register number to ascii
00001DF8  14C3                    1467              MOVE.B      D3,(A2)+        *to buffer  
00001DFA  14FC 0029               1468              MOVE.B      #$29,(A2)+      *')' to buffer
00001DFE  14FC 002B               1469              MOVE.B      #$2B, (A2)+     *'+' to buffer
00001E02  4E75                    1470  endea011    RTS                         *return
00001E04                          1471  *Address with Predecrement**********************************
00001E04  3607                    1472  eacode100   MOVE.W      D7, D3          *move to utility
00001E06  0243 0007               1473              ANDI.W      #$7, D3         *isolate
00001E0A  14FC 002D               1474              MOVE.B      #$2D,(A2)+      *'-' to buffer 
00001E0E  14FC 0028               1475              MOVE.B      #$28,(A2)+      *'(' to buffer            
00001E12  14FC 0041               1476              MOVE.B      #$41,(A2)+      *'A' to buffer
00001E16  0603 0030               1477              ADD.B       #$30, D3        *convert register number to ascii
00001E1A  14C3                    1478              MOVE.B      D3,(A2)+        *to buffer  
00001E1C  14FC 0029               1479              MOVE.B      #$29,(A2)+      *')' to buffe
00001E20  4E75                    1480  endea100    RTS                         *return
00001E22                          1481  *Bad Instruction********************************************
00001E22  4EF9 0000204E           1482  eacode101   JMP         BADINST
00001E28                          1483  *Bad Instruction********************************************
00001E28  4EF9 0000204E           1484  eacode110   JMP         BADINST
00001E2E                          1485  *Immediate*Absolute*****************************************
00001E2E  4EB9 00001E56           1486  eacode111   JSR         GETREGISTER     *isolate register bit
00001E34  0C03 0000               1487              CMPI.B      #$0, D3         *word?
00001E38  6700 0166               1488              BEQ         WORD2BUFFER
00001E3C  0C03 0001               1489              CMPI.B      #$1, D3         *long?
00001E40  6700 018A               1490              BEQ         LONG2BUFFER
00001E44  0C03 0004               1491              CMPI.B      #$4, D3         *Immediate Data?
00001E48  6700 01AE               1492              BEQ         IMM2BUFER
00001E4C  0C03 0002               1493              CMPI.B      #$2, D3         *PC?
00001E50  6700 01FC               1494              BEQ         BADINST
00001E54  4E75                    1495  endea111    RTS                         *return
00001E56                          1496  *===========================================================
00001E56                          1497  
00001E56                          1498  ************************************************************
00001E56                          1499  *GETREGISTER
00001E56                          1500  *Description: Converts register bit and stores in D3
00001E56                          1501  ************************************************************ 
00001E56                          1502  GETREGISTER:
00001E56  3607                    1503              MOVE.W  D7, D3
00001E58  0243 0007               1504              ANDI.W  #$07, D3
00001E5C  4E75                    1505  endrb       RTS
00001E5E                          1506  *===========================================================
00001E5E                          1507  
00001E5E                          1508  ************************************************************
00001E5E                          1509  *GETSIZE
00001E5E                          1510  *Description: Returns the size of the bit in 6-7 (.B, .W, .L)
00001E5E                          1511  * 1001 0110 0100 0001
00001E5E                          1512  *       ^^--------->|
00001E5E                          1513  *Registers Used:
00001E5E                          1514  *D3 - size bit
00001E5E                          1515  *D7 - copy of instruction
00001E5E                          1516  ************************************************************
00001E5E                          1517  GETSIZE:
00001E5E  3607                    1518              MOVE.W  D7, D3          *move to utility
00001E60  EC4B                    1519              LSR.W   #6, D3          *shift
00001E62  0243 0003               1520              ANDI.W  #$0003, D3      *isolate
00001E66  4E75                    1521  endGS       RTS                     *return
00001E68                          1522  *===========================================================
00001E68                          1523  
00001E68                          1524  ************************************************************
00001E68                          1525  *GETDIRECTION
00001E68                          1526  *Description: Finds direction of the instruction and sets it to the utility register
00001E68                          1527  * 1001 0110 0100 0001
00001E68                          1528  *         ^-------->|
00001E68                          1529  *Registers Used:
00001E68                          1530  *D3 - size bit
00001E68                          1531  *D7 - copy of instruction 
00001E68                          1532  ************************************************************
00001E68                          1533  GETDIRECTION:
00001E68  3607                    1534              MOVE.W  D7, D3          *move to utility
00001E6A  E08B                    1535              LSR.L   #8, D3          *shift 8
00001E6C  0203 0001               1536              ANDI.B  #01, D3         *isolate 8th bit
00001E70  4E75                    1537  endgd       RTS                     *return
00001E72                          1538  *===========================================================
00001E72                          1539  
00001E72                          1540  ************************************************************
00001E72                          1541  *GETIRCOUNTER
00001E72                          1542  *Description: Finds i/r field of the instruction and sets it
00001E72                          1543  *             to the utility register.
00001E72                          1544  * 1001 0110 0100 0001
00001E72                          1545  *              ^
00001E72                          1546  *Registers Used:
00001E72                          1547  *D3 - size bit
00001E72                          1548  *D7 - copy of instruction 
00001E72                          1549  ************************************************************
00001E72                          1550  GETIRCOUNTER:
00001E72  3607                    1551              MOVE.W  D7, D3          *move to utility
00001E74  EA8B                    1552              LSR.L   #5, D3          *shift
00001E76  0243 0001               1553              ANDI.W  #$0001, D3      *isolate
00001E7A  0C03 0000               1554              CMPI.B  #%0, D3         *
00001E7E  6700 000C               1555              BEQ     IRCOUNT
00001E82  14FC 0044               1556              MOVE.B  #$44, (A2)+     *'D' to buffer
00001E86  4EF9 00001E90           1557              JMP     IRSIZE
00001E8C  14FC 0023               1558  IRCOUNT     MOVE.B  #$23, (A2)+     *'#' to buffer
00001E90  4EB9 00001F20           1559  IRSIZE      JSR     REG2BUFFER
00001E96  14FC 002C               1560              MOVE.B  #$2C, (A2)+     *',' to buffer
00001E9A  14FC 0044               1561              MOVE.B  #$44, (A2)+     *'D' to buffer
00001E9E  3607                    1562              MOVE.W  D7, D3          *move to utility
00001EA0  0243 0007               1563              ANDI.W  #$0007, D3
00001EA4  0603 0030               1564              ADD.B   #$30, D3
00001EA8  14C3                    1565              MOVE.B  D3, (A2)+
00001EAA  4E75                    1566  endIRC      RTS                     *return
00001EAC                          1567  *===========================================================
00001EAC                          1568  
00001EAC                          1569  ************************************************************
00001EAC                          1570  *SWAPREG         
00001EAC                          1571  *Description: For double EA move instructions, swaps registers to use EA jump table
00001EAC                          1572  *Registers Used:
00001EAC                          1573  *D3 - size bit
00001EAC                          1574  *D4 - hold register for swap bits
00001EAC                          1575  *D7 - swapped EA mode 
00001EAC                          1576  SWAPREG:
00001EAC  4283                    1577              CLR.L   D3              *
00001EAE  3607                    1578              MOVE.W  D7,D3           *move to utility
00001EB0  E04B                    1579              LSR.W   #8,D3           *shift
00001EB2  E24B                    1580              LSR.W   #1,D3           *shift
00001EB4  0243 0007               1581              ANDI.W  #$0007,D3       *
00001EB8  8843                    1582              OR.W    D3,D4           *store bits for swap
00001EBA  3607                    1583              MOVE.W  D7,D3           *move to utility
00001EBC  E64B                    1584              LSR.W   #3,D3           *shift bits 6-8 to normal ea position
00001EBE  0243 0038               1585              ANDI.W  #$0038, D3
00001EC2  8843                    1586              OR.W    D3,D4           *
00001EC4  4EB9 00001ECE           1587              JSR     srSize          *get mode size
00001ECA  3E04                    1588              MOVE.W  D4,D7           *load swap register
00001ECC  4E75                    1589  endswap     RTS                     *return
00001ECE                          1590  
00001ECE  3607                    1591  srSize      MOVE.W  D7,D3           *move to utility
00001ED0  E04B                    1592              LSR.W   #8,D3           *shift
00001ED2  E84B                    1593              LSR.W   #4,D3           *
00001ED4  0243 0003               1594              ANDI.W  #$0003,D3       *isolate
00001ED8  B63C 0001               1595              CMP.B   #$1,D3          *byte?
00001EDC  6700 0020               1596              BEQ     endsr           *yes
00001EE0  B63C 0002               1597              CMP.B   #$2,D3          *long?
00001EE4  6700 0014               1598              BEQ     srL             *yes
00001EE8  B63C 0003               1599              CMP.B   #$3,D3          *word?
00001EEC  6600 0160               1600              BNE     BADINST         *No? bad instrustion        
00001EF0  0044 0040               1601  srW         ORI.W   #$0040,D4       *add size
00001EF4  4EF9 00001EFE           1602              JMP     endsr           *
00001EFA  0044 0080               1603  srL         ORI.W   #$0080,D4       *add size
00001EFE  4E75                    1604  endsr       RTS                     *return
00001F00                          1605  *===========================================================
00001F00                          1606  
00001F00                          1607  SHIFT:       
00001F00  E8AB                    1608              LSR.L   D4,D3               
00001F02  0243 000F               1609              ANDI.W  #$000F,D3
00001F06  4E75                    1610  endSHFIT    RTS
00001F08                          1611  
00001F08                          1612  ************************************************************
00001F08                          1613  *  ____  _   _ _____ _____ _____ ____ 
00001F08                          1614  * | __ )| | | |  ___|  ___| ____|  _ \ 
00001F08                          1615  * |  _ \| | | | |_  | |_  |  _| | |_) | 
00001F08                          1616  * | |_) | |_| |  _| |  _| | |___|  _ <  
00001F08                          1617  * |____/ \___/|_|   |_|   |_____|_| \_\ 
00001F08                          1618  *
00001F08                          1619  *BUFFER SUBROUTINES                                                                                 
00001F08                          1620  *Description: Puts word to print buffer
00001F08                          1621  *D3 - Utility register
00001F08                          1622  *D6 - Counter
00001F08                          1623  *A0 - Utility address
00001F08                          1624  *A2 - Address buffer
00001F08                          1625  *NOTES:
00001F08                          1626  *Adding chars to the buffer a byte at a time seems to work the best
00001F08                          1627  *Adding words or longwords can sometimes land on odd memory address
00001F08                          1628  *which do no allow memory to be written to.  To combat this, move
00001F08                          1629  *chars as bytes.  Tideous, but effective.
00001F08                          1630  *EXAMPLE:   MOVE.B  #$20, (A2)+     *' ' to buffer
00001F08                          1631  *----------------------------------------------------------- 
00001F08                          1632  
00001F08                          1633  ************************************************************
00001F08                          1634  *HEX2ASCII
00001F08                          1635  *Description: Converts bit to ASCII and send to buffer
00001F08                          1636  ************************************************************            
00001F08                          1637  HEX2ASCII:  
00001F08  B63C 000A               1638              CMP.B       #$A, D3     *hex char?
00001F0C  6C00 000A               1639              BGE         letter      *letter?
00001F10  0603 0030               1640  number      ADDI.B      #$30,D3     *convert to ASCII
00001F14  6000 0006               1641              BRA         W2B         *
00001F18  0603 0037               1642  letter      ADDI.B      #$37,D3     *
00001F1C  14C3                    1643  W2B         MOVE.B      D3,(A2)+    *to buffer
00001F1E  4E75                    1644  endH2A      RTS                     *return
00001F20                          1645  *===========================================================   
00001F20                          1646  
00001F20                          1647  ************************************************************
00001F20                          1648  *REG2BUFFER
00001F20                          1649  *Description: Finds the register size and sends it to the output buffer
00001F20                          1650  * 1001 0110 0100 0001
00001F20                          1651  *      ^-^--------->|
00001F20                          1652  *Registers Used:
00001F20                          1653  *D3 - size bit
00001F20                          1654  *D7 - copy of instruction
00001F20                          1655  *A2 - buffer address of decoded instruction          
00001F20                          1656  ************************************************************
00001F20                          1657  REG2BUFFER:
00001F20  3607                    1658              MOVE.W  D7,D3            *move to utility
00001F22  E08B                    1659              LSR.L   #8,D3            *shift
00001F24  E28B                    1660              LSR.L   #1,D3            *shift
00001F26  0203 0007               1661              ANDI.B  #$7,D3           *isolate last 7 bits for register number
00001F2A  0603 0030               1662              ADD.B   #$30,D3          *convert register number to ascii
00001F2E  14C3                    1663              MOVE.B  D3,(A2)+         *to buffer
00001F30  4E75                    1664  endR2B      RTS                      *return
00001F32                          1665  *===========================================================
00001F32                          1666  
00001F32                          1667  ************************************************************
00001F32                          1668  *SIZE2BUFFER
00001F32                          1669  *Description: Isolates and converts the instruction size and sends it to the output buffer
00001F32                          1670  *             Byte, word, long read word in memory for instructions that utilize immediate
00001F32                          1671  *             data.  At the end of the instruction, the working memory address is advanced.
00001F32                          1672  *Registers Used:
00001F32                          1673  *D3 - size bit
00001F32                          1674  *A2 - buffer address of decoded instruction
00001F32                          1675  ************************************************************
00001F32                          1676  SIZE2BUFFER:
00001F32  4EB8 1E5E               1677              JSR     GETSIZE         *get the size of bit
00001F36  B63C 0000               1678              CMP.B   #%00, D3        *byte
00001F3A  6700 001E               1679              BEQ     s2bB            *
00001F3E  B63C 0001               1680              CMP.B   #%01, D3        *word
00001F42  6700 0020               1681              BEQ     s2bW            *
00001F46  B63C 0002               1682              CMP.B   #%10, D3        *long
00001F4A  6700 0022               1683              BEQ     s2bL            *
00001F4E  4EF9 0000204E           1684              JMP     BADINST         *bad instruction
00001F54  4EF9 00001F72           1685              JMP     ends2b          *
00001F5A                          1686              
00001F5A  14FC 0042               1687  s2bB        MOVE.B  #$42,(A2)+      *'B' to buffer
00001F5E  4EF9 00001F72           1688              JMP     ends2b          *
00001F64  14FC 0057               1689  s2bW        MOVE.B  #$57,(A2)+      *'W' to buffer
00001F68  4EF9 00001F72           1690              JMP     ends2b          *
00001F6E  14FC 004C               1691  s2bL        MOVE.B  #$4C,(A2)+      *'L' to buffer
00001F72  4E75                    1692  ends2b      RTS                     *return
00001F74                          1693  *===========================================================
00001F74                          1694  
00001F74                          1695  ************************************************************
00001F74                          1696  *BYTE2BUFFER
00001F74                          1697  *Description: Converts a byte in memory to ASCII and sends it
00001F74                          1698  *            to the buffer.
00001F74                          1699  *Buffer: $XX
00001F74                          1700  *Registers Used:
00001F74                          1701  *D2 - utility register
00001F74                          1702  *D3 - utility register
00001F74                          1703  *D4 - counter
00001F74                          1704  *A0 - working address
00001F74                          1705  *A2 - buffer address of decoded instruction
00001F74                          1706  ************************************************************
00001F74                          1707  BYTE2BUFFER:  
00001F74  14FC 0024               1708              MOVE.B  #$24, (A2)+     *'$' to buffer
00001F78  4284                    1709              CLR.L       D4                  *clear counter
00001F7A                          1710              *ADDQ.W      #2, A0
00001F7A  3410                    1711              MOVE.W      (A0), D2
00001F7C  183C 0002               1712              MOVE.B      #2, D4              *load counter
00001F80                          1713  **LOOP******************************************************
00001F80                          1714  B2BLoop                 
00001F80  B83C 0000               1715              CMP.B      #$0, D4            *end?
00001F84  6700 0014               1716              BEQ         endB2B             *
00001F88  E91A                    1717              ROL.B       #4, D2             *roll bits
00001F8A  3602                    1718              MOVE.W      D2, D3             *move to utility
00001F8C  0243 000F               1719              ANDI.W      #$000F, D3          *isolate  
00001F90  4EB8 1F08               1720              JSR         HEX2ASCII           *load ascii char into buffer            
00001F94  5304                    1721              SUBQ.B      #$1, D4             *subtract from counter
00001F96  4EF8 1F80               1722              JMP         B2BLoop             *keep looping until counter hits zero
00001F9A                          1723              
00001F9A  3607                    1724  endB2B      MOVE.W      D7, D3              *load from utility            
00001F9C  5448                    1725              ADDQ.W      #2, A0              *advancing memory pointer by word  
00001F9E  4E75                    1726              RTS                             *return
00001FA0                          1727  *===========================================================
00001FA0                          1728  
00001FA0                          1729  ************************************************************
00001FA0                          1730  *WORD2BUFFER
00001FA0                          1731  *Description: Converts a word in memory to ASCII and sends it
00001FA0                          1732  *            to the buffer.
00001FA0                          1733  *Buffer: $XXXX
00001FA0                          1734  *Registers Used:
00001FA0                          1735  *D2 - utility register
00001FA0                          1736  *D3 - utility register
00001FA0                          1737  *D4 - counter
00001FA0                          1738  *A0 - working address
00001FA0                          1739  *A2 - buffer address of decoded instruction
00001FA0                          1740  ************************************************************
00001FA0                          1741  WORD2BUFFER: 
00001FA0  14FC 0024               1742              MOVE.B  #$24, (A2)+     *'$' to buffer
00001FA4  4284                    1743              CLR.L   D4
00001FA6                          1744              *ADDQ.W  #2, A0                  *clear counter
00001FA6  3410                    1745              MOVE.W  (A0), D2            
00001FA8  183C 0004               1746              MOVE.B  #4, D4              *load counter
00001FAC                          1747  **LOOP******************************************************
00001FAC                          1748  W2BLoop                 
00001FAC  B83C 0000               1749              CMP.B       #$00, D4            *end?
00001FB0  6700 0014               1750              BEQ         endW2B              *
00001FB4  E95A                    1751              ROL.W       #4, D2              *roll the bits in D2 to the left
00001FB6  3602                    1752              MOVE.W      D2, D3              *move rolled bits into temp storage
00001FB8  0243 000F               1753              ANDI.W      #$000F, D3          *and the bits to isolate ascii char   
00001FBC  4EB8 1F08               1754              JSR         HEX2ASCII           *load ascii char into buffer            
00001FC0  5304                    1755              SUBQ.B      #$1, D4             *subtract from counter
00001FC2  4EF8 1FAC               1756              JMP         W2BLoop             *keep looping until counter hits zero
00001FC6                          1757         
00001FC6  3607                    1758  endW2B      MOVE.W      D7, D3              *load from utility            
00001FC8  5448                    1759              ADDQ.W      #2, A0              *advancing memory pointer by word   
00001FCA  4E75                    1760              RTS                             *return
00001FCC                          1761  *===========================================================
00001FCC                          1762   
00001FCC                          1763  ************************************************************
00001FCC                          1764  *LONG2BUFFER
00001FCC                          1765  *Description: Converts a long word in memory to ASCII and sends
00001FCC                          1766  *            it to the buffer.
00001FCC                          1767  *Buffer: $XXXXXXXX
00001FCC                          1768  *Registers Used:
00001FCC                          1769  *D2 - utility register
00001FCC                          1770  *D3 - utility register
00001FCC                          1771  *D4 - counter
00001FCC                          1772  *A0 - working address
00001FCC                          1773  *A2 - buffer address of decoded instruction
00001FCC                          1774  ************************************************************           
00001FCC                          1775  LONG2BUFFER:
00001FCC  14FC 0024               1776              MOVE.B  #$24, (A2)+     *'$' to buffer
00001FD0  4284                    1777              CLR.L       D4          *clear counter
00001FD2                          1778              *ADDQ.W      #2, A0     *clear counter
00001FD2  2410                    1779              MOVE.L      (A0), D2 
00001FD4  183C 0008               1780              MOVE.B      #8, D4      *load counter
00001FD8                          1781  **LOOP******************************************************
00001FD8                          1782  L2BLoop                 
00001FD8  B83C 0000               1783              CMP.B       #$00, D4    *end?
00001FDC  6700 0014               1784              BEQ         endL2B      *
00001FE0  E99A                    1785              ROL.L       #4, D2      *
00001FE2  3602                    1786              MOVE.W      D2, D3      *
00001FE4  0243 000F               1787              ANDI.W      #$000F, D3  *isolate
00001FE8  4EB8 1F08               1788              JSR         HEX2ASCII   *to buffer           
00001FEC  5304                    1789              SUBQ.B      #$1, D4     *subtract from counter
00001FEE  4EF8 1FD8               1790              JMP         L2BLoop     *loop
00001FF2                          1791              
00001FF2  3607                    1792  endL2B      MOVE.W      D7, D3      *load from utility           
00001FF4  5848                    1793              ADDQ.W      #4, A0      *advancing memory pointer by word  
00001FF6  4E75                    1794              RTS  
00001FF8                          1795  *===========================================================
00001FF8                          1796             
00001FF8                          1797  ************************************************************
00001FF8                          1798  *IMM2BUFER
00001FF8                          1799  *Description: Converts immediate data and sends to buffer
00001FF8                          1800  *Registers Used:
00001FF8                          1801  *D3 - utility register
00001FF8                          1802  *A2 - buffer address of decoded instruction
00001FF8                          1803  ************************************************************ 
00001FF8                          1804  IMM2BUFER:
00001FF8  14FC 0023               1805              MOVE.B  #$23, (A2)+     *'#' to buffer
00001FFC  4EB8 1ECE               1806              JSR     srSize          *get bit size
00002000  0C03 0001               1807              CMPI.B  #%01, D3        *byte?
00002004  6700 FF6E               1808              BEQ     BYTE2BUFFER     *
00002008  0C03 0003               1809              CMPI.B  #%11, D3        *word?
0000200C  6792                    1810              BEQ     WORD2BUFFER     *
0000200E  0C03 0002               1811              CMPI.B  #%10, D3        *long?
00002012  67B8                    1812              BEQ     LONG2BUFFER     *
00002014  4E75                    1813  endI2B      RTS                     *return
00002016                          1814  *===========================================================  
00002016                          1815  
00002016                          1816  ************************************************************
00002016                          1817  *ADDR2BUFFER
00002016                          1818  *Description: Converts immediate data and sends to buffer
00002016                          1819  *Registers Used:
00002016                          1820  *D3 - utility register
00002016                          1821  *A2 - buffer address of decoded instruction
00002016                          1822  ************************************************************ 
00002016                          1823  ADDR2BUFFER:
00002016  14FC 0023               1824              MOVE.B  #$23, (A2)+     *'#' to buffer
0000201A  0C03 0000               1825              CMPI.B  #%00, D3        *byte?
0000201E  6700 FF54               1826              BEQ     BYTE2BUFFER     *
00002022  0C03 0001               1827              CMPI.B  #%01, D3        *word?
00002026  6700 FF78               1828              BEQ     WORD2BUFFER     *
0000202A  0C03 0003               1829              CMPI.B  #%11, D3        *long?
0000202E  679C                    1830              BEQ     LONG2BUFFER     *
00002030  4E75                    1831  endA2B      RTS                     *return
00002032                          1832  *=========================================================== 
00002032                          1833  
00002032                          1834  ************************************************************
00002032                          1835  *DIR2BUFFER
00002032                          1836  *Description: Send direction to buffer
00002032                          1837  *Registers Used:
00002032                          1838  *D3 - utility register
00002032                          1839  *A2 - buffer address of decoded instruction
00002032                          1840  ************************************************************ 
00002032                          1841  DIR2BUFFER:
00002032  4EB8 1E68               1842              JSR     GETDIRECTION
00002036  0C03 0000               1843              CMPI.B  #%0, D3
0000203A  6700 000C               1844              BEQ     D2DR
0000203E  14FC 004C               1845              MOVE.B  #$4C, (A2)+     *'L' to buffer
00002042  4EF9 0000204C           1846              JMP     endD2B      
00002048  14FC 0052               1847  D2DR        MOVE.B  #$52, (A2)+     *'R' to buffer
0000204C  4E75                    1848  endD2B      RTS                     *return
0000204E                          1849  *===========================================================       
0000204E                          1850  
0000204E                          1851  ************************************************************
0000204E                          1852  *BADINST
0000204E                          1853  *Description: A bad instruction has been called, print to console
0000204E                          1854  *Buffer: '$0x00000000   DATA    BadWord'
0000204E                          1855  *Registers Used:
0000204E                          1856  *D3 - utility register
0000204E                          1857  *D5 - flag condition
0000204E                          1858  *A2 - buffer address of decoded instruction
0000204E                          1859  *A2 - working address
0000204E                          1860  ************************************************************
0000204E                          1861  BADINST:
0000204E                          1862  **ADDRESS***************************************************
0000204E  1A3C 0000               1863              MOVE.B  #0, D5          *set flag to bad for double EA check
00002052  45F9 00009000           1864              LEA     buf, A2         *reload buffer
00002058  4EB8 11FE               1865              JSR     ADDRESS         *address to buffer
0000205C                          1866  **DATA******************************************************        
0000205C  14FC 0044               1867              MOVE.B  #$44,(A2)+      *'D' to buffer
00002060  14FC 0041               1868              MOVE.B  #$41,(A2)+      *'A' to buffer
00002064  14FC 0054               1869              MOVE.B  #$54,(A2)+      *'T' to buffer
00002068  14FC 0041               1870              MOVE.B  #$41,(A2)+      *'A' to buffer
0000206C  14FC 0009               1871              MOVE.B  #$9, (A2)+      *tab buffer
00002070  14FC 0024               1872              MOVE.B  #$24,(A2)+      *'$' to buffer
00002074                          1873  **BAD WORD**************************************************            
00002074  3610                    1874              MOVE.W  (A0), D3        *
00002076  183C 000C               1875              MOVE.B  #12, D4         *$1254
0000207A  4EB8 1F00               1876              JSR     SHIFT           * ^
0000207E  4EB8 1F08               1877              JSR     Hex2ASCII       *to ASCII
00002082  3610                    1878              MOVE.W  (A0), D3        *
00002084  183C 0008               1879              MOVE.B  #8, D4          *$1254
00002088  4EB8 1F00               1880              JSR     SHIFT           *  ^
0000208C  4EB8 1F08               1881              JSR     Hex2ASCII       *to ASCII
00002090  3610                    1882              MOVE.W  (A0), D3        *
00002092  183C 0004               1883              MOVE.B  #4, D4          *$1254
00002096  4EB8 1F00               1884              JSR     SHIFT           *   ^
0000209A  4EB8 1F08               1885              JSR     Hex2ASCII       *to ASCII
0000209E  3610                    1886              MOVE.W  (A0), D3        *$1254
000020A0  0243 000F               1887              ANDI.W  #$000F, D3      *    ^
000020A4  4EB8 1F08               1888              JSR     Hex2ASCII       *to ASCII
000020A8                          1889              
000020A8  5278 0900               1890              ADD     #1, badInstCount    
000020AC  4E75                    1891  endbadinst  RTS                     *return
000020AE                          1892  *===========================================================    
000020AE                          1893  
000020AE                          1894  ************************************************************
000020AE                          1895  *  _____ _   _ ____      ____ ___ __  __ 
000020AE                          1896  * | ____| \ | |  _ \    / ___|_ _|  \/  |
000020AE                          1897  * |  _| |  \| | | | |   \___ \| || |\/| |
000020AE                          1898  * | |___| |\  | |_| |    ___) | || |  | |
000020AE                          1899  * |_____|_| \_|____/    |____/___|_|  |_|
000020AE                          1900  *                                       
000020AE                          1901  *END
000020AE                          1902  *Description: Ends program
000020AE                          1903  ************************************************************          
000020AE                          1904  END:        
000020AE  103C 000E               1905              MOVE.B  #14, D0         *load bad instruction count
000020B2  43F9 00002BB7           1906              LEA     strBadInst, A1  
000020B8  4E4F                    1907              TRAP    #15
000020BA                          1908  
000020BA  1238 0900               1909              MOVE.B  badInstCount, D1 *display
000020BE  103C 0003               1910              MOVE.B  #3, D0
000020C2  4E4F                    1911              TRAP    #15
000020C4                          1912              
000020C4  4EB8 107E               1913              JSR     dis_cr          *carriage return
000020C8                          1914              
000020C8  4EB8 10B2               1915              JSR     dis_yncont 
000020CC  B23C 0059               1916              CMP.B   #$59, D1
000020D0  6700 000E               1917              BEQ     therealend
000020D4  B23C 0079               1918              CMP.B   #$79, D1
000020D8  6700 0006               1919              BEQ     therealend
000020DC  4EF8 1004               1920              JMP     main
000020E0                          1921              
000020E0  103C 000D               1922  therealend  MOVE.B  #13,D0          *load end string
000020E4  43F9 000027BA           1923              LEA     str_end,A1      *load string
000020EA  4E4F                    1924              TRAP    #15             *display
000020EC  FFFF FFFF               1925              SIMHALT              
000020F0                          1926  *===========================================================
000020F0                          1927           
000020F0                          1928  *-----------------------------------------------------------
000020F0                          1929  *variables
000020F0                          1930  *-----------------------------------------------------------
000020F0= 20 20 20 20 20 20 ...   1931  intro       dc.b '          66666666        888888888     KKKKKKKKK    KKKKKKK',CR,LF 
0000212E= 20 20 20 20 20 20 ...   1932              dc.b '         6::::::6       88:::::::::88   K:::::::K    K:::::K',CR,LF
0000216C= 20 20 20 20 20 20 ...   1933              dc.b '        6::::::6      88:::::::::::::88 K:::::::K    K:::::K',CR,LF
000021AA= 20 20 20 20 20 20 ...   1934              dc.b '       6::::::6      8::::::88888::::::8K:::::::K   K::::::K',CR,LF
000021E8= 20 20 20 20 20 20 ...   1935              dc.b '      6::::::6       8:::::8     8:::::8KK::::::K  K:::::KKK',CR,LF
00002226= 20 20 20 20 20 36 ...   1936              dc.b '     6::::::6        8:::::8     8:::::8  K:::::K K:::::K   ',CR,LF
00002264= 20 20 20 20 36 3A ...   1937              dc.b '    6::::::6          8:::::88888:::::8   K::::::K:::::K    ',CR,LF
000022A2= 20 20 20 36 3A 3A ...   1938              dc.b '   6::::::::66666      8:::::::::::::8    K:::::::::::K     ',CR,LF
000022E0= 20 20 36 3A 3A 3A ...   1939              dc.b '  6::::::::::::::66   8:::::88888:::::8   K:::::::::::K     ',CR,LF
0000231E= 20 20 36 3A 3A 3A ...   1940              dc.b '  6::::::66666:::::6 8:::::8     8:::::8  K::::::K:::::K    ',CR,LF
0000235C= 20 20 36 3A 3A 3A ...   1941              dc.b '  6:::::6     6:::::68:::::8     8:::::8  K:::::K K:::::K   ',CR,LF    
0000239A= 20 20 36 3A 3A 3A ...   1942              dc.b '  6:::::6     6:::::68:::::8     8:::::8KK::::::K  K:::::KKK',CR,LF     
000023D8= 20 20 36 3A 3A 3A ...   1943              dc.b '  6::::::66666::::::68::::::88888::::::8K:::::::K   K::::::K',CR,LF     
00002416= 20 20 20 36 36 3A ...   1944              dc.b '   66:::::::::::::66  88:::::::::::::88 K:::::::K    K:::::K',CR,LF
00002454= 20 20 20 20 20 36 ...   1945              dc.b '     66:::::::::66      88:::::::::88   K:::::::K    K:::::K',CR,LF
00002492= 20 20 20 20 20 20 ...   1946              dc.b '       666666666          888888888     KKKKKKKKK    KKKKKKK',CR,LF
000024D0= 20 20 20 20 20 20 ...   1947              dc.b '                                                            ',CR,LF  
0000250E= 20 20 20 20 20 20 ...   1948              dc.b '                                                            ',CR,LF  
0000254C= 20 20 20 5F 5F 5F ...   1949              dc.b '   ___  ___________   ______________  ______  __   _______  ',CR,LF 
0000258A= 20 20 2F 20 5F 20 ...   1950              dc.b '  / _ \/  _/ __/ _ | / __/ __/ __/  |/  / _ )/ /  / __/ _ \ ',CR,LF 
000025C8= 20 2F 20 2F 2F 20 ...   1951              dc.b ' / // // /_\ \/ __ |_\ \_\ \/ _// /|_/ / _  / /__/ _// , _/ ',CR,LF 
00002606= 2F 5F 5F 5F 5F 2F ...   1952              dc.b '/____/___/___/_/ |_/___/___/___/_/  /_/____/____/___/_/|_|  ',CR,LF 
00002644= 20 20 20 20 20 20 ...   1953              dc.b '                                                            ',CR,LF                                        
00002682= 20 20 20 20 20 20 ...   1954              dc.b '                                                            ',0,CR,LF 
000026C1                          1955              
000026C2= 05D2                    1956  i_length    dc.w    i_length-intro
000026C4                          1957  
000026C4= 45 6E 74 65 72 20 ...   1958  srt_addr    dc.b    'Enter starting address: $',0
000026DE= 001A                    1959  s_len       dc.w    s_len-srt_addr
000026E0                          1960  
000026E0= 45 6E 74 65 72 20 ...   1961  end_addr    dc.b    'Enter ending address: $',0
000026F8= 0018                    1962  e_len       dc.w    e_len-end_addr
000026FA                          1963  
000026FA= 54 68 65 20 73 74 ...   1964  t_str_start dc.b    'The start address is: $',0
00002712= 0018                    1965  t_start     dc.w    t_start-t_str_start
00002714                          1966  
00002714= 54 68 65 20 65 6E ...   1967  t_str_end   dc.b    'The end address is: $',0
0000272A= 0016                    1968  t_end       dc.w    t_end-t_str_end
0000272C                          1969  
0000272C= 45 72 72 6F 72 3A ...   1970  str_error   dc.b    'Error: starting or ending address has error',0
00002758= 002C                    1971  err_len     dc.w    err_len-str_error 
0000275A                          1972  
0000275A= 50 72 65 73 73 20 ...   1973  str_cont    dc.b    'Press enter to continue.',0
00002774= 001A                    1974  cont_len    dc.w    cont_len-str_cont
00002776                          1975  
00002776= 00                      1976  str_cr      dc.b    '',0
00002778= 0002                    1977  cr_len      dc.w    cr_len-str_cr
0000277A                          1978  
0000277A= 57 6F 75 6C 64 20 ...   1979  str_yncont  dc.b    'Would you like to enter a new decode more memory? Y/N?',0
000027B1                          1980  
000027B1= 01                      1981  bufferend   dc.b    1
000027B2                          1982  print_stack ds.b    8
000027BA                          1983  
000027BA= 20 20 20 20 20 20 ...   1984  str_end     dc.b '                                                                                   ',CR,LF  
0000280F= 20 20 20 20 20 20 ...   1985              dc.b '                                                                                   ',CR,LF 
00002864= 20 20 20 20 20 20 ...   1986              dc.b '                                                                                   ',CR,LF 
000028B9= 20 20 20 20 20 20 ...   1987              dc.b '                                                                                   ',CR,LF 
0000290E= 20 20 2F 24 24 24 ...   1988              dc.b '  /$$$$$$   /$$$$$$  /$$      /$$ /$$$$$$$  /$$       /$$$$$$$$ /$$$$$$$$ /$$$$$$$$',CR,LF
00002963= 20 2F 24 24 5F 5F ...   1989              dc.b ' /$$__  $$ /$$__  $$| $$$    /$$$| $$__  $$| $$      | $$_____/|__  $$__/| $$_____/',CR,LF
000029B8= 7C 20 24 24 20 20 ...   1990              dc.b '| $$  \__/| $$  \ $$| $$$$  /$$$$| $$  \ $$| $$      | $$         | $$   | $$      ',CR,LF
00002A0D= 7C 20 24 24 20 20 ...   1991              dc.b '| $$      | $$  | $$| $$ $$/$$ $$| $$$$$$$/| $$      | $$$$$      | $$   | $$$$$   ',CR,LF
00002A62= 7C 20 24 24 20 20 ...   1992              dc.b '| $$      | $$  | $$| $$  $$$| $$| $$____/ | $$      | $$__/      | $$   | $$__/   ',CR,LF
00002AB7= 7C 20 24 24 20 20 ...   1993              dc.b '| $$    $$| $$  | $$| $$\  $ | $$| $$      | $$      | $$         | $$   | $$      ',CR,LF
00002B0C= 7C 20 20 24 24 24 ...   1994              dc.b '|  $$$$$$/|  $$$$$$/| $$ \/  | $$| $$      | $$$$$$$$| $$$$$$$$   | $$   | $$$$$$$$',CR,LF
00002B61= 20 5C 5F 5F 5F 5F ...   1995              dc.b ' \______/  \______/ |__/     |__/|__/      |________/|________/   |__/   |________/',0,CR,LF
00002BB7                          1996  
00002BB7= 20 20 20 20 20 20 ...   1997  strBadInst      dc.b    '                            ',CR,LF
00002BD5= 20 20 20 20 20 20 ...   1998                  dc.b    '                            ',CR,LF
00002BF3= 20 20 20 20 20 20 ...   1999                  dc.b    '                            ',CR,LF
00002C11= 4E 75 6D 62 65 72 ...   2000                  dc.b    'Number of bad instructions: ',0
00002C2E                          2001  *badInstCount    ds.w    0
00002C2E                          2002  *v_srt_add   ds.l    1               *store start address
00002C2E                          2003  *v_end_add   ds.l    1               *store end address
00002C2E                          2004  *v_test      ds.l    1               *start a temp value
00002C2E                          2005  
00002C2E                          2006  
00002C2E                          2007      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDR2BUFFER         2016
ADDRESS             11FE
ADDRFILL            1226
ADDRLOOP            122C
ASCII2HEX           113C
B2BLOOP             1F80
BADFLAG             0
BADINST             204E
BADINSTCOUNT        900
BUF                 9000
BUFFEREND           27B1
BYTE2BUFFER         1F74
CLEAR               10C6
CODE0010_CONT       13E8
CODE0010_CONT2      13F0
CODE0011_CONT       143C
CODE0011_CONT2      1444
CONT_LEN            2774
CR                  D
CR_LEN              2778
D2DR                2048
DECODE              11D8
DECODECONT          11F8
DIR2BUFFER          2032
DISP16              191A
DISP32              18F8
DISP8               1930
DIS_BADINPUT        1064
DIS_CONT            1092
DIS_CR              107E
DIS_INTRO_MSG       1050
DIS_YNCONT          10B2
EACODE000           1DA8
EACODE001           1DBA
EACODE010           1DCC
EACODE011           1DE6
EACODE100           1E04
EACODE101           1E22
EACODE110           1E28
EACODE111           1E2E
EA_TABLE            1D78
END                 20AE
ENDA2B              2030
ENDA2H              11CC
ENDADDR             124A
ENDB2B              1F9A
ENDBADINST          20AC
ENDBF               124C
ENDBI               107A
ENDCLEAR            10D6
ENDD2B              204C
ENDDC               10B0
ENDDECODE           11FC
ENDEA000            1DB8
ENDEA001            1DCA
ENDEA010            1DE4
ENDEA011            1E02
ENDEA100            1E20
ENDEA111            1E54
ENDGD               1E70
ENDGETMWORD         169C
ENDGOP              126A
ENDGS               1E66
ENDH2A              1F1E
ENDI2B              2014
ENDINPUT            113A
ENDINTRO            1062
ENDIRC              1EAA
ENDL2B              1FF2
ENDMS2B             1564
ENDOP0000           1382
ENDOP0001           13C2
ENDOP0010           1416
ENDOP0011           146A
ENDOP0100           14C4
ENDOP0100TABLE      16FE
ENDOP0100_0000      1706
ENDOP0100_0001      170E
ENDOP0100_0010      1734
ENDOP0100_0011      173C
ENDOP0100_0100      1762
ENDOP0100_0101      176A
ENDOP0100_0110      1790
ENDOP0100_0111      1798
ENDOP0100_1000      17A0
ENDOP0100_1001      17A8
ENDOP0100_1010      17B0
ENDOP0100_1011      17B8
ENDOP0100_1100      17C0
ENDOP0100_1101      17C8
ENDOP0100_1110      183C
ENDOP0100_1111      1844
ENDOP0101           184C
ENDOP0110           1942
ENDOP0111           194A
ENDOP1000           19B8
ENDOP1001           1A62
ENDOP1010           1A6A
ENDOP1011           1B06
ENDOP1100           1B92
ENDOP1101           1C48
ENDOP111            1D58
ENDOP1110           1D50
ENDOPADDI           1348
ENDOPANDI           1330
ENDOPASD            1CAE
ENDOPASM            1D0C
ENDOPCMPI           1310
ENDOPEORI           135A
ENDOPJMP            183A
ENDOPJSR            1822
ENDOPLEA            14EA
ENDOPLSD            1C9A
ENDOPLSM            1CF8
ENDOPNOP            17FC
ENDOPORI            131E
ENDOPROD            1C86
ENDOPROM            1CE4
ENDOPRTS            180A
ENDOPSMEM           1CD2
ENDOPSREG           1C74
ENDOPSUBI           1336
ENDR2B              1F30
ENDRB               1E5C
ENDREG2MEM          1598
ENDS2B              1F72
ENDSHFIT            1F06
ENDSR               1EFE
ENDSWAP             1ECC
ENDW2B              1FC6
END_ADDR            26E0
END_CR              1090
END_LOOP            1698
ERROR               11AA
ERR_LEN             2758
E_LEN               26F8
GETDIRECTION        1E68
GETEA               1D5A
GETIRCOUNTER        1E72
GETMWORD            169A
GETOPCODE           124E
GETREGISTER         1E56
GETSIZE             1E5E
GET_POST_AREG_LIST  162C
GET_POST_DREG_LIST  1666
GET_PRE_AREG_LIST   15F4
GET_PRE_DREG_LIST   15C2
GOODFLAG            1
HEX2ASCII           1F08
IMM2BUFER           1FF8
INTRO               20F0
IRCOUNT             1E8C
IRSIZE              1E90
I_LENGTH            26C2
L2BLOOP             1FD8
LENGTH              0
LETTER              1F18
LF                  A
LONG2BUFFER         1FCC
LOOP                114C
LOOPPOST_ALIST      1636
LOOPPOST_DLIST      1670
LOOPPRE_ALIST       15FE
LOOPPRE_DLIST       15CE
LOWER2HEX           119E
MAIN                1004
MAIN_CONT           1042
MAIN_END            104C
MAIN_INPUT          1016
MAIN_LOOP           1022
MAIN_NEXT           1034
MAXADD              FFFFFF
MEM2REG             159A
MINADD              0
MOVEMEM_TABLE       1566
MOVEMSIZE2BUFFER    153A
MS2BL               1560
MS2BW               1556
NOTMOVEM            1496
NUM2HEX             1186
NUMBER              1F10
OP0000CONT          1360
OP0100MOVEM         14EC
OP0100TABLE         169E
OP0100_0000         1700
OP0100_0001         1708
OP0100_0010         1710
OP0100_0011         1736
OP0100_0100         173E
OP0100_0101         1764
OP0100_0110         176C
OP0100_0111         1792
OP0100_1000         179A
OP0100_1001         17A2
OP0100_1010         17AA
OP0100_1011         17B2
OP0100_1100         17BA
OP0100_1101         17C2
OP0100_1110         17CA
OP0100_1111         183E
OP1110DS            1D12
OP1110MS            1D32
OPADD               1BFA
OPADD01             1C34
OPADDA              1BD4
OPADDI              133C
OPADDL              1BD0
OPAND01             1B7E
OPANDI              1324
OPASD               1CA0
OPASM               1CFE
OPBCC               186E
OPBGT               189C
OPBLE               18CA
OPCMP               1AB8
OPCMPA              1A7A
OPCMPI              1304
OPCODE0000          12CC
OPCODE0001          1384
OPCODE0010          13C4
OPCODE0011          1418
OPCODE0100          146C
OPCODE0101          1846
OPCODE0110          184E
OPCODE0111          1944
OPCODE1000          194C
OPCODE1001          19BA
OPCODE1010          1A64
OPCODE1011          1A6C
OPCODE1100          1B08
OPCODE1101          1B94
OPCODE1110          1C4A
OPCODE1111          1D52
OPEOR               1B00
OPEORI              134E
OPJMP               1824
OPJSR               180C
OPLEA               14C6
OPLSD               1C8C
OPLSM               1CEA
OPNOP               17F0
OPOR                1962
OPOR01              19A4
OPORI               1316
OPROD               1C78
OPROM               1CD6
OPRTS               17FE
OPSMEM              1CB4
OPSREG              1C58
OPSUBI              1336
OPSUBL              19F2
OPSUBSUB            1A18
OPSUBSUBA           19F6
OPSUBSUBR           1A4E
OP_TABLE            126C
PRINTCOUNT          A
PRINTPOST_AREG_LIST  1652
PRINTPOST_DREG_LIST  1684
PRINTPRE_AREG_LIST  161A
PRINTPRE_DREG_LIST  15E2
PRINT_B             11EE
PRINT_STACK         27B2
REG2BUFFER          1F20
REG2MEM             1574
RESUME              11B4
S2BB                1F5A
S2BL                1F6E
S2BW                1F64
SHIFT               1F00
SIZE2BUFFER         1F32
SRL                 1EFA
SRSIZE              1ECE
SRT_ADDR            26C4
SRW                 1EF0
STACK               A000
START               1000
STRBADINST          2BB7
STR_CONT            275A
STR_CR              2776
STR_END             27BA
STR_ERROR           272C
STR_YNCONT          277A
SWAPREG             1EAC
S_LEN               26DE
TASK0               0
TASK1               1
TASK13              D
TASK14              E
TASK2               2
TASK3               3
THEREALEND          20E0
T_END               272A
T_START             2712
T_STR_END           2714
T_STR_START         26FA
UPPER2HEX           1192
U_INPUT             10D8
W2B                 1F1C
W2BLOOP             1FAC
WORD2BUFFER         1FA0
