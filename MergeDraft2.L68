00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 06/05/20 3:38:24 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Scott Shirley, Carl Howing, Daniel Yakovlev
00000000                             4  * Date       : June 6, 2020
00000000                             5  * Description: This program is written in Motorola 68000 assembly 
00000000                             6  *              language (M68k), and its purpose is to disassemble 
00000000                             7  *              data back into human readable opcodes and effective 
00000000                             8  *              addresses.
00000000                             9  ************************************************************
00000000                            10  
00000000                            11  ************************************************************
00000000                            12  *  ____            _     _                
00000000                            13  * |  _ \ ___  __ _(_)___| |_ ___ _ __ ___ 
00000000                            14  * | |_) / _ \/ _` | / __| __/ _ \ '__/ __|
00000000                            15  * |  _ <  __/ (_| | \__ \ ||  __/ |  \__ \
00000000                            16  * |_| \_\___|\__, |_|___/\__\___|_|  |___/
00000000                            17  *            |___/                        
00000000                            18  *Register Use
00000000                            19  *For consistency, please utilize registers in the following way.
00000000                            20  *
00000000                            21  *D0 - Copy of mask
00000000                            22  *D1 - Instruction Mask
00000000                            23  *D2 - 
00000000                            24  *D3 - utility register
00000000                            25  *D4 -
00000000                            26  *D5 - flag condition
00000000                            27  *D6 - counter
00000000                            28  *D7 - copy of working address
00000000                            29  *
00000000                            30  *A0 - temp address holder
00000000                            31  *A1 - trap address
00000000                            32  *A2 - buffer address of decoded instruction
00000000                            33  *A3 -
00000000                            34  *A4 - starting address
00000000                            35  *A5 - ending address
00000000                            36  *A6 - jump tables
00000000                            37  *A7 -
00000000                            38  ************************************************************
00000000                            39  
00000000                            40  ************************************************************
00000000                            41  * __     __         _       _     _                               _     _____ ___  _   _ 
00000000                            42  * \ \   / /_ _ _ __(_) __ _| |__ | | ___  ___      __ _ _ __   __| |   | ____/ _ \| | | |
00000000                            43  *  \ \ / / _` | '__| |/ _` | '_ \| |/ _ \/ __|    / _` | '_ \ / _` |   |  _|| | | | | | |
00000000                            44  *   \ V / (_| | |  | | (_| | |_) | |  __/\__ \   | (_| | | | | (_| |   | |__| |_| | |_| |
00000000                            45  *    \_/ \__,_|_|  |_|\__,_|_.__/|_|\___||___/    \__,_|_| |_|\__,_|   |_____\__\_\\___/ 
00000000                            46  *                                                                                        
00000000                            47  * Variables and EQUs
00000000                            48  ************************************************************
00000000  =00001000                 49  start       EQU     $1000               *start address
00000000  =0000A000                 50  stack       EQU     $A000               *stack address  
00000000  =00009000                 51  buf         EQU     $9000
00000000                            52  
00000000  =00000000                 53  minAdd      EQU     $00000000           *start of address space
00000000  =00FFFFFF                 54  maxAdd      EQU     $00FFFFFF           *end of address space
00000000                            55  
00000000  =0000000D                 56  CR          EQU     $0D                 *carriage return
00000000  =0000000A                 57  LF          EQU     $0A                 *line feed
00000000  =00000900                 58  badInstCount EQU    $900
00000000  =00000001                 59  goodflag    EQU     1                   *good flag condition
00000000  =00000000                 60  badflag     EQU     0                   *bad flag condition
00000000  =00000000                 61  length      EQU     0                   *
00000000                            62  
00000000  =0000000A                 63  printCount  EQU     10                  *number of lines printed to console before user input
00000000                            64  
00000000                            65  *TRAP tasks for preload
00000000  =00000000                 66  task0       EQU     00                  *Display string at (A1), D1.W bytes long (max 255) with carriage return and line feed (CR, LF)
00000000  =00000001                 67  task1       EQU     01                  *Display string at (A1), D1.W bytes long (max 255) without CR, LF
00000000  =00000002                 68  task2       EQU     02                  *Read string from keyboard and store at (A1), NULL terminated, length retuned in D1.W (max 80)
00000000  =00000003                 69  task3       EQU     03                  *Display signed number in D1.L in decimal in smallest field
00000000  =0000000D                 70  task13      EQU     13                  *Display the NULL terminated string at (A1) with CR, LF
00000000  =0000000E                 71  task14      EQU     14                  *Display the NULL terminated string at (A1) without CR, LF
00000000                            72  ************************************************************
00000000                            73  
00000000                            74  ************************************************************
00000000                            75  *  __  __       _       
00000000                            76  * |  \/  | __ _(_)_ __  
00000000                            77  * | |\/| |/ _` | | '_ \ 
00000000                            78  * | |  | | (_| | | | | |
00000000                            79  * |_|  |_|\__,_|_|_| |_|
00000000                            80  *                      
00000000                            81  ************************************************************
00001000                            82              ORG     start
00001000  6100 004E                 83              BSR     dis_intro_msg       *print intro message
00001004                            84              
00001004  6100 00AC                 85  main        BSR     CLEAR               *clear all registers
00001008  4FF9 0000A000             86              LEA     stack, SP           *load stack pointer
0000100E  45F9 00009000             87              LEA     buf, A2          *set buffer for input
00001014  2C4A                      88              MOVEA.L A2,A6    
00001016                            89              
00001016  6100 00AC                 90  main_input  BSR     U_INPUT             *branch to input
0000101A  BA3C 0000                 91              CMP.B   #$0, D5             *check if bad input
0000101E  6700 0044                 92              BEQ     dis_badInput        *bad flag, reinput 
00001022                            93              
00001022                            94               
00001022                            95                          
00001022  4EB9 000011C4             96  main_loop   JSR     DECODE         *prep buffer
00001028                            97  *loop checking **********************************************  
00001028  BA3C 0000                 98              CMP.B   #%0, D5
0000102C  6600 0006                 99              BNE     main_next
00001030  5278 0900                100              ADD     #1, (badInstCount)
00001034  BBC8                     101  main_next   CMPA.L  A0, A5              * have we reached the end of our address range?
00001036  6F00 0014                102              BLE     main_end  
0000103A                           103              
0000103A  5246                     104              ADDI    #1, D6              *add counter
0000103C  BC7C 000A                105              CMP     #printcount, D6     *check loop progress
00001040  66E0                     106              BNE     main_loop
00001042                           107  
00001042  4EB9 00001092            108  main_cont   JSR     dis_cont
00001048  4EF8 1022                109              JMP     main_loop
0000104C                           110  
0000104C  6100 104C                111  main_end    BSR     END
00001050                           112  *===========================================================
00001050                           113  
00001050                           114  *-----------------------------------------------------------
00001050                           115  *display subroutines
00001050                           116  *intro message, bad inputs, carriage return, enter2return, input test
00001050                           117  *-----------------------------------------------------------
00001050                           118  *intro message display
00001050                           119  ************************************************************
00001050                           120  dis_intro_msg
00001050  103C 000D                121              MOVE.B  #13,D0              *load task
00001054  43F9 000020F0            122              LEA     intro,A1            *load string
0000105A  3239 000026C2            123              MOVE.W  i_length,D1         *load string length 
00001060  4E4F                     124              TRAP    #15                 *display
00001062  4E75                     125  endIntro    RTS                         *return
00001064                           126  *bad input error message display****************************
00001064                           127  dis_badInput
00001064  103C 0000                128              MOVE.B  #task0,D0           *load task
00001068  43F9 0000272C            129              LEA     str_error, A1       *load string
0000106E  3239 00002758            130              MOVE.W  err_len, D1         *load string length
00001074  4E4F                     131              TRAP    #15                 *display
00001076  1A3C 0000                132              MOVE.B  #badFlag,D5         *set flag condition to bad
0000107A  4EB8 1016                133  endBI       JSR     main_input          *return to main_input
0000107E                           134  *dsiplay carriage return************************************
0000107E                           135  dis_cr
0000107E  103C 000D                136              MOVE.B  #task13, D0         *load task
00001082  43F9 00002776            137              LEA     str_cr, A1          *load string
00001088  3239 00002778            138              MOVE.W  cr_len, D1          *load string length
0000108E  4E4F                     139              TRAP    #15                 *display
00001090  4E75                     140  end_cr      RTS                         *return
00001092                           141  *enter2return***********************************************
00001092                           142  dis_cont   
00001092  103C 000E                143              MOVE.B  #task14, D0         *load task
00001096  43F9 0000275A            144              LEA     str_cont, A1        *load string
0000109C  3239 00002774            145              MOVE.W  cont_len, D1        *load string length
000010A2  4E4F                     146              TRAP    #15                 *display
000010A4                           147              
000010A4  103C 0002                148              MOVE.B  #task2,D0           *load task
000010A8  4E4F                     149              TRAP    #15                 *get input
000010AA                           150              
000010AA  12BC 0050                151              MOVE.B  #$50,(A1)           *reset A1
000010AE                           152              
000010AE  4246                     153              CLR     D6                  *clear counter, reset loop
000010B0  4E75                     154  endDC       RTS                         *return
000010B2                           155  
000010B2                           156  *===========================================================
000010B2                           157  
000010B2                           158  ************************************************************ 
000010B2                           159  *  _   _ _____ _     ____  _____ ____  
000010B2                           160  * | | | | ____| |   |  _ \| ____|  _ \ 
000010B2                           161  * | |_| |  _| | |   | |_) |  _| | |_) |
000010B2                           162  * |  _  | |___| |___|  __/| |___|  _ < 
000010B2                           163  * |_| |_|_____|_____|_|   |_____|_| \_\
000010B2                           164  *                                      
000010B2                           165  *HELPER SUBROUTINES
000010B2                           166  *Description: These subroutines are called during teh opcode translation
000010B2                           167  ************************************************************
000010B2                           168  
000010B2                           169  ************************************************************   
000010B2                           170  *CLEAR
000010B2                           171  *Description: Clears registers of values
000010B2                           172  ************************************************************        
000010B2                           173  CLEAR:
000010B2  4240                     174              CLR     D0
000010B4  4241                     175              CLR     D1
000010B6  4242                     176              CLR     D2
000010B8  4243                     177              CLR     D3
000010BA  4244                     178              CLR     D4
000010BC  4245                     179              CLR     D5
000010BE  4246                     180              CLR     D6
000010C0  4247                     181              CLR     D7
000010C2  4E75                     182  endClear    RTS
000010C4                           183  *===========================================================
000010C4                           184  
000010C4                           185  ************************************************************
000010C4                           186  *U_INPUT
000010C4                           187  *Description: Gets input address from user for program
000010C4                           188  *D5 - Return Status
000010C4                           189  *D7 - Temparary register to store address value
000010C4                           190  *A0 - Working Address
000010C4                           191  *A4 - Start Address
000010C4                           192  *A5 - End Address
000010C4                           193  ************************************************************
000010C4                           194  U_INPUT:
000010C4  103C 0001                195              MOVE.B  #task1,D0           *
000010C8  43F9 000026C4            196              LEA     srt_addr,A1         *
000010CE  3239 000026DE            197              MOVE.W  s_len,D1            *
000010D4  4E4F                     198              TRAP    #15                 *
000010D6  D3FC 000026DE            199              ADDA.L  #s_len,A1           *
000010DC  103C 0002                200              MOVE.B  #task2,D0           *
000010E0  4E4F                     201              TRAP    #15                 *
000010E2  4EB9 00001128            202              JSR     ASCII2HEX
000010E8  BA3C 0000                203              CMP.B   #$00,D5             *bad input?
000010EC  6700 0038                204              BEQ     endInput
000010F0                           205              *MOVE.L  D7, v_srt_add       *store to varable
000010F0  4247                     206              CLR     D7
000010F2                           207              
000010F2  2848                     208              MOVEA.L A0,A4       
000010F4  103C 0001                209              MOVE.B  #task1,D0
000010F8  43F9 000026E0            210              LEA     end_addr,A1
000010FE  3239 000026F8            211              MOVE.W  e_len,D1         
00001104  4E4F                     212              TRAP    #15         
00001106  D3FC 000026F8            213              ADDA.L  #e_len,A1
0000110C  103C 0002                214              MOVE.B  #task2,D0
00001110  4E4F                     215              TRAP    #15
00001112  4EB9 00001128            216              JSR     ASCII2HEX
00001118  BA3C 0000                217              CMP.B   #$00,D5             *bad input?
0000111C  6700 0008                218              BEQ     endInput
00001120                           219              *MOVE.L  D7, v_end_add        *store to varable
00001120  4247                     220              CLR     D7
00001122                           221  
00001122                           222  
00001122  2A48                     223              MOVEA.L A0,A5               *store ending to A5
00001124  204C                     224              MOVEA.L A4,A0               *store starting in A0  
00001126                           225                    
00001126  4E75                     226  endInput    RTS
00001128                           227  *===========================================================
00001128                           228  
00001128                           229  ************************************************************
00001128                           230  *ASCII2HEX 
00001128                           231  *Description: Converts an ASCII character to HEX - see flowchart for logic
00001128                           232  *D3 - Placeholder for current ascii byte
00001128                           233  *D4 - Translated address
00001128                           234  *D5 - Return status
00001128                           235  *D6 - Counter (6)
00001128                           236  *D7 - Temparary register to store address value
00001128                           237  *A0 - Stored address at end of subroutine
00001128                           238  ************************************************************
00001128                           239  ASCII2HEX:
00001128  48E7 F800                240              MOVEM.L D0-D4,-(SP)         *save data registers to the stack
0000112C  4EB8 10B2                241              JSR     CLEAR
00001130  1A3C 0001                242              MOVE.B  #$01,D5             *preset flag condition to good
00001134  3C3C 0000                243              MOVE    #length,D6
00001138                           244  
00001138                           245  loop
00001138  1619                     246              MOVE.B  (A1)+,D3            *
0000113A  B63C 0030                247              CMP.B   #$30,D3             *byte < 30??
0000113E  6D00 0056                248              BLT     error               *
00001142                           249              
00001142  B63C 003A                250              CMP.B   #$3A,D3             *byte < 3A??
00001146  6D00 002A                251              BLT     num2hex             *
0000114A                           252              
0000114A  B63C 0041                253              CMP.B   #$41,D3             *byte < 41??
0000114E  6D00 0046                254              BLT     error               *
00001152                           255              
00001152  B63C 0047                256              CMP.B   #$47,D3             *byte < 47?
00001156  6D00 0026                257              BLT     upper2hex           *
0000115A                           258              
0000115A  B63C 0061                259              CMP.B   #$61,D3             *byte < 61??
0000115E  6D00 0036                260              BLT     error               *
00001162                           261              
00001162  B63C 0067                262              CMP.B   #$67,D3             *byte < 67??
00001166  6D00 0022                263              BLT     lower2hex           *
0000116A                           264              
0000116A  B63C 0066                265              CMP.B   #$66,D3             *byte > 66??
0000116E  6E00 0026                266              BGT     error               *
00001172                           267  
00001172                           268  num2hex
00001172  0403 0030                269              SUBI.B  #$30,D3             *subracthex value of 0 to get correct value of input
00001176  D803                     270              ADD.B   D3,D4               *
00001178  4EF9 000011A0            271              JMP     resume              *return to top
0000117E                           272              
0000117E                           273  upper2hex
0000117E  0403 0037                274              SUBI.B  #$37,D3             *subracthex value of A to get correct value of input
00001182  D803                     275              ADD.B   D3,D4               *
00001184  4EF9 000011A0            276              JMP     resume              *return to top
0000118A                           277              
0000118A                           278  lower2hex
0000118A  0403 0057                279              SUBI.B  #$57,D3             *subracthex value of a to get correct value of input
0000118E  D803                     280              ADD.B   D3,D4               *
00001190  4EF9 000011A0            281              JMP     resume              *return to top
00001196                           282  error
00001196  1A3C 0000                283              MOVE.B  #$00,D5             *flag as bad input and return
0000119A  4EF9 000011B8            284              JMP     endA2H              *return to top
000011A0                           285  resume
000011A0  5246                     286              ADD     #1,D6               *increment length counter
000011A2  BC7C 0006                287              CMP     #6,D6               *check if done
000011A6  6700 0010                288              BEQ     endA2H              *
000011AA  0C11 0000                289              CMP.B   #$00,(A1)           *end of string??
000011AE  6700 0008                290              BEQ     endA2H              *
000011B2  E984                     291              ASL.L   #4,D4               *shiftleft by 4 bits to get next value            
000011B4  4EF8 1138                292              JMP     loop                *return to top
000011B8                           293  
000011B8                           294  endA2H
000011B8  2044                     295              MOVE.L  D4,A0               *
000011BA  2E04                     296              MOVE.L  D4,D7               *move address to temp register
000011BC  4246                     297              CLR     D6                  *clear counter
000011BE  4CDF 001F                298              MOVEM.L (SP)+,D0-D4         *load data registers from stack      
000011C2  4E75                     299              RTS                         *
000011C4                           300  *===========================================================
000011C4                           301  
000011C4                           302  ************************************************************
000011C4                           303  *DECODE
000011C4                           304  *Description: Decodes an operation instruction from memory
000011C4                           305  ************************************************************
000011C4                           306  DECODE:
000011C4  45F9 00009000            307              LEA     buf, A2             *load buffer
000011CA  224A                     308              MOVEA.L A2,A1               *load trap address with buffer 
000011CC  4EB9 000011EA            309              JSR     ADDRESS             *current address to buffer
000011D2  3E18                     310              MOVE.W  (A0)+, D7            *move A0 value to test
000011D4                           311  
000011D4  4EB9 0000123A            312              JSR     GETOPCODE           *decode instruction
000011DA  14BC 0000                313  print_b     MOVE.B  #00,(A2)            *null terminator
000011DE  103C 000D                314              MOVE.B  #task13,D0
000011E2  4E4F                     315              TRAP    #15 
000011E4                           316              
000011E4                           317              *CMPI.B  #%0, D5
000011E4                           318              *BNE     decodeCont 
000011E4                           319              *ADDI    #1, badInstCount
000011E4  1A3C 0000                320  decodeCont  MOVE.B  #0, D5
000011E8                           321              *ADDQ.W      #2, A0
000011E8                           322              
000011E8  4E75                     323  endDECODE   RTS
000011EA                           324  *===========================================================                       
000011EA                           325  
000011EA                           326  ************************************************************
000011EA                           327  *ADDRESS
000011EA                           328  *Description: Fills the buffer with the current address
000011EA                           329  ************************************************************
000011EA                           330  ADDRESS:    
000011EA  4283                     331              CLR.L   D3
000011EC  4284                     332              CLR.L   D4
000011EE  4287                     333              CLR.L   D7
000011F0  14FC 0024                334              MOVE.B  #$24, (A2)+     *'$' to buffer
000011F4  14FC 0030                335              MOVE.B  #$30, (A2)+     *'0' to buffer
000011F8  14FC 0078                336              MOVE.B  #$78, (A2)+     *'x' to buffer       
000011FC  7600                     337              MOVE.L  #$00000000, D3
000011FE  2E08                     338              MOVE.L  A0, D7
00001200  D647                     339              ADD.W   D7, D3
00001202  4EB9 00001212            340              JSR     addrFill   
00001208  14FC 0009                341              MOVE.B  #$09,(A2)+   *tab
0000120C  4EF9 00001236            342              JMP     endaddr
00001212                           343              
00001212  2403                     344  addrFill    MOVE.L      D3, D2            *move current word into D2 for rolling purposes
00001214  183C 0008                345              MOVE.B      #8, D4              *load counter
00001218                           346  
00001218                           347  addrLoop                 
00001218  B83C 0000                348              CMP.B       #$00, D4            *compare counter with 0
0000121C  6700 0018                349              BEQ         endaddr      *if 0, return
00001220  E99A                     350              ROL.L       #4, D2              *
00001222  2602                     351              MOVE.L      D2, D3              *
00001224  0283 0000000F            352              ANDI.L      #$000F, D3          *isolate
0000122A  4EB9 00001EF4            353              JSR         HEX2ASCII           *to buffer           
00001230  5304                     354              SUBQ.B      #$1, D4             *subtract from counter
00001232  4EF8 1218                355              JMP         addrLoop                 *loop
00001236                           356              
00001236  2607                     357  endaddr     MOVE.L      D7, D3              *load from utility                             
00001238  4E75                     358  endbf       RTS
0000123A                           359  *===========================================================
0000123A                           360  
0000123A                           361  ************************************************************ 
0000123A                           362  *   ___  ____   ____ ___  ____  _____ ____  
0000123A                           363  *  / _ \|  _ \ / ___/ _ \|  _ \| ____/ ___| 
0000123A                           364  * | | | | |_) | |  | | | | | | |  _| \___ \ 
0000123A                           365  * | |_| |  __/| |__| |_| | |_| | |___ ___) |
0000123A                           366  *  \___/|_|    \____\___/|____/|_____|____/ 
0000123A                           367  * 
0000123A                           368  *GETOPCODE:
0000123A                           369  *Description: Gets the first four bits of instruction to decode 
0000123A                           370  *  
0000123A                           371  *Naming conventions for opcode subroutines
0000123A                           372  *opcode####
0000123A                           373  *op[opmode][operation]
0000123A                           374  *endop####
0000123A                           375  *                              
0000123A                           376  *Registers Used:
0000123A                           377  *For consistency, please utilize registers in the following way.
0000123A                           378  *
0000123A                           379  *D1 - utility register
0000123A                           380  *D3 - utility register
0000123A                           381  *D7 - copy of working address
0000123A                           382  *
0000123A                           383  *A2 - buffer address of decoded instruction
0000123A                           384  *A6 - jump table               
0000123A                           385  ************************************************************
0000123A                           386  GETOPCODE:   
0000123A  1A3C 0001                387              MOVE.B  #%01, D5
0000123E  3607                     388              MOVE.W  D7, D3              *move to utility
00001240  123C 000C                389              MOVE.B  #12, D1             *
00001244  E26B                     390              LSR.W   D1, D3              *shift
00001246  C6FC 0006                391              MULU    #6, D3              *offset          
0000124A  4DF9 00001258            392              LEA     OP_TABLE, A6        *                                                                                  
00001250  4EB6 3000                393              JSR     00(A6,D3)           *jump indirect with index (00 indicates word movement)
00001254  260A                     394              MOVE.L  A2, D3
00001256                           395              *MOVE.L  D3, bufferend   
00001256  4E75                     396  endgop      RTS                         *return
00001258                           397  *===========================================================
00001258                           398  
00001258                           399  ************************************************************
00001258                           400  *OPCODE Table
00001258                           401  *Description: Table of OPCODES
00001258                           402  ************************************************************ 
00001258                           403  OP_TABLE
00001258  4EF9 000012B8            404              JMP         opcode0000      *ANDI
0000125E  4EF9 00001370            405              JMP         opcode0001      *MOVE.B 
00001264  4EF9 000013B0            406              JMP         opcode0010      *MOVE/A.L 
0000126A  4EF9 00001404            407              JMP         opcode0011      *MOVE/A.W 
00001270  4EF9 00001458            408              JMP         opcode0100      *CLR,LEA,JMP,JSR,MOVEM,NEG*,NOP*,NOT*,RTS *testing*
00001276  4EF9 00001832            409              JMP         opcode0101      *BADINST
0000127C  4EF9 0000183A            410              JMP         opcode0110      *Bcc
00001282  4EF9 00001930            411              JMP         opcode0111      *BADINST
00001288  4EF9 00001938            412              JMP         opcode1000      *OR
0000128E  4EF9 000019A6            413              JMP         opcode1001      *SUB,SUBA
00001294  4EF9 00001A50            414              JMP         opcode1010      *BADINST
0000129A  4EF9 00001A58            415              JMP         opcode1011      *CMP,CMPA
000012A0  4EF9 00001AF4            416              JMP         opcode1100      *AND
000012A6  4EF9 00001B80            417              JMP         opcode1101      *ADD,ADDA
000012AC  4EF9 00001C36            418              JMP         opcode1110      *ASR/LSL **incomplete**
000012B2  4EF9 00001D3E            419              JMP         opcode1111      *BADINST
000012B8                           420              
000012B8                           421  ************************************************************
000012B8                           422  *OPCODES
000012B8                           423  *Description: OPCODE subroutines used to decode instructions
000012B8                           424  *
000012B8                           425  ************************************************************  
000012B8                           426  *OPCODE: 0000
000012B8                           427  *ORI,ANDI,SUBI,ADDI,EORI,CMPI
000012B8                           428  opcode0000: 
000012B8  1607                     429              MOVE.B  D7, D3
000012BA  0243 0F00                430              ANDI.W  #$0F00, D3
000012BE  E08B                     431              LSR.L   #8, D3
000012C0  B63C 0000                432              CMP.B   #$0, D3         *ORI?
000012C4  6700 003C                433              BEQ     opORI           *
000012C8  B63C 0002                434              CMP.B   #$2, D3         *ANDI?
000012CC  6700 0042                435              BEQ     opANDI          *
000012D0  B63C 0004                436              CMP.B   #$4, D3         *SUBI?
000012D4  6700 004C                437              BEQ     opSUBI          *
000012D8  B63C 0006                438              CMP.B   #$6, D3         *ADDI?
000012DC  6700 004A                439              BEQ     opADDI          *
000012E0  B63C 000A                440              CMP.B   #$A, D3         *EORI?
000012E4  6700 0054                441              BEQ     opEORI          *
000012E8  B63C 000C                442              CMP.B   #$C, D3         *CMPI?
000012EC  6600 0D4C                443              BNE     BADINST         *BADINST  
000012F0                           444  
000012F0                           445  **CMP Immediate Data****************************************          
000012F0  14FC 0043                446  opCMPI      MOVE.B  #$43, (A2)+     *'C' to buffer
000012F4  14FC 004D                447              MOVE.B  #$4D, (A2)+     *'M' to buffer
000012F8  14FC 0050                448              MOVE.B  #$50, (A2)+     *'P' to buffer
000012FC  4EF9 0000134C            449  endopCMPI   JMP     op0000cont
00001302                           450  
00001302                           451  **OR Immediate Data*****************************************          
00001302  14FC 004F                452  opORI       MOVE.B  #$4F, (A2)+     *'O' to buffer
00001306  14FC 0052                453              MOVE.B  #$52, (A2)+     *'R' to buffer
0000130A  4EF9 0000134C            454  endopORI    JMP     op0000cont
00001310                           455  **AND Immediate Data****************************************
00001310  14FC 0041                456  opANDI      MOVE.B  #$41, (A2)+     *'A' to buffer
00001314  14FC 004E                457              MOVE.B  #$4E, (A2)+     *'N' to buffer
00001318  14FC 0044                458              MOVE.B  #$44, (A2)+     *'D' to buffer
0000131C  4EF9 0000134C            459  endopANDI   JMP     op0000cont
00001322                           460  **SUB Immediate Data****************************************
00001322                           461  opSUBI
00001322  4EF9 0000134C            462  endopSUBI   JMP     op0000cont
00001328                           463  **ADD Immediate Data****************************************
00001328  14FC 0041                464  opADDI      MOVE.B  #$41, (A2)+     *'A' to buffer
0000132C  14FC 0044                465              MOVE.B  #$44, (A2)+     *'D' to buffer
00001330  14FC 0044                466              MOVE.B  #$44, (A2)+     *'D' to buffer
00001334  4EF9 0000134C            467  endopADDI   JMP     op0000cont
0000133A                           468  **EOR Immediate Data****************************************
0000133A  14FC 0045                469  opEORI      MOVE.B  #$45, (A2)+     *'E' to buffer
0000133E  14FC 004F                470              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001342  14FC 0052                471              MOVE.B  #$52, (A2)+     *'R' to buffer
00001346  4EF9 0000134C            472  endopEORI   JMP     op0000cont
0000134C                           473  **Fill in the rest******************************************
0000134C  14FC 0049                474  op0000cont  MOVE.B  #$49, (A2)+     *'I' to buffer
00001350  14FC 002E                475              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001354  4EB9 00001F1E            476              JSR     SIZE2BUFFER
0000135A  14FC 0009                477              MOVE.B  #$9, (A2)+      *tab to buffer
0000135E                           478              *MOVE.B  #$20, (A2)+     *' ' to buffer
0000135E  4EB9 00002002            479              JSR     ADDR2BUFFER
00001364  14FC 002C                480              MOVE.B  #$2C, (A2)+     *',' to buffer
00001368  4EB9 00001D46            481              JSR     GETEA
0000136E  4E75                     482  endop0000   RTS
00001370                           483  *===========================================================
00001370                           484  
00001370                           485  
00001370                           486  ************************************************************  
00001370                           487  *OPCODE: 0001
00001370                           488  *MOVE.B
00001370                           489  opcode0001:
00001370  14FC 004D                490              MOVE.B  #$4D, (A2)+     *'M' to buffer
00001374  14FC 004F                491              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001378  14FC 0056                492              MOVE.B  #$56, (A2)+     *'V' to buffer
0000137C  14FC 0045                493              MOVE.B  #$45, (A2)+     *'E' to buffer
00001380  14FC 002E                494              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001384  14FC 0042                495              MOVE.B  #$42, (A2)+     *'B' to buffer
00001388  14FC 0020                496              MOVE.B  #$20, (A2)+     *' ' to buffer
0000138C  14FC 0020                497              MOVE.B  #$20, (A2)+     *' ' to buffer
00001390  4EB9 00001D46            498              JSR     GETEA
00001396  0C05 0000                499              CMPI.B  #%0, D5
0000139A  6700 0012                500              BEQ     endop0001   
0000139E  14FC 002C                501              MOVE.B  #$2C, (A2)+     *',' to buffer
000013A2  4EB9 00001E98            502              JSR     SWAPREG         *swap destination and source regs
000013A8  4EB9 00001D46            503              JSR     GETEA  
000013AE  4E75                     504  endop0001   RTS                     *return
000013B0                           505  
000013B0                           506  *===========================================================
000013B0                           507  
000013B0                           508  ************************************************************  
000013B0                           509  *OPCODE: 0010
000013B0                           510  *MOVE.L, MOVEA.L
000013B0                           511  opcode0010:
000013B0  14FC 004D                512              MOVE.B  #$4D, (A2)+     *'M' to buffer
000013B4  14FC 004F                513              MOVE.B  #$4F, (A2)+     *'O' to buffer
000013B8  14FC 0056                514              MOVE.B  #$56, (A2)+     *'V' to buffer
000013BC  14FC 0045                515              MOVE.B  #$45, (A2)+     *'E' to buffer
000013C0  3607                     516              MOVE.W   D7, D3         *Check the destination mode to see if addressing*
000013C2  C6BC 000001C0            517              AND.L    #$01C0, D3 
000013C8  0C83 00000040            518              CMPI.L   #$0040, D3     *compares to see if addressing mode
000013CE  6604                     519              BNE.S    code0010_cont  *branches if destination mode is not addressing register
000013D0  14FC 0041                520              MOVE.B  #$41, (A2)+     *'A' to buffer               
000013D4                           521  code0010_cont  
000013D4  14FC 002E                522              MOVE.B  #$2E, (A2)+     *'.' to buffer
000013D8  14FC 004C                523              MOVE.B  #$4C, (A2)+     *'L' to buffer 
000013DC                           524                 
000013DC                           525  code0010_cont2  
000013DC  14FC 0020                526              MOVE.B  #$20, (A2)+     *' ' to buffer
000013E0  14FC 0020                527              MOVE.B  #$20, (A2)+     *' ' to buffer    
000013E4  4EB9 00001D46            528              JSR     GETEA
000013EA  0C05 0000                529              CMPI.B  #%0, D5         *check if bad ea
000013EE  6700 0012                530              BEQ     endop0010   
000013F2  14FC 002C                531              MOVE.B  #$2C, (A2)+     *',' to buffer
000013F6  4EB9 00001E98            532              JSR     SWAPREG         *swap destination and source regs
000013FC  4EB9 00001D46            533              JSR     GETEA 
00001402                           534  
00001402  4E75                     535  endop0010   RTS
00001404                           536  *===========================================================
00001404                           537  
00001404                           538  ************************************************************  
00001404                           539  *OPCODE: 0011
00001404                           540  *MOVE.W,MOVEA.W
00001404                           541  opcode0011:
00001404  14FC 004D                542              MOVE.B  #$4D, (A2)+     *'M' to buffer
00001408  14FC 004F                543              MOVE.B  #$4F, (A2)+     *'O' to buffer
0000140C  14FC 0056                544              MOVE.B  #$56, (A2)+     *'V' to buffer
00001410  14FC 0045                545              MOVE.B  #$45, (A2)+     *'E' to buffer
00001414  3607                     546              MOVE.W   D7, D3         *Check the destination mode to see if addressing*
00001416  C6BC 000001C0            547              AND.L    #$01C0, D3 
0000141C  0C83 00000040            548              CMPI.L   #$0040, D3     *compares to see if addressing mode
00001422  6604                     549              BNE.S    code0011_cont  *branches if destination mode is not addressing register
00001424  14FC 0041                550              MOVE.B  #$41, (A2)+     *'A' to buffer
00001428                           551  code0011_cont  
00001428  14FC 002E                552              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000142C  14FC 0057                553              MOVE.B  #$57, (A2)+     *'W' to buffer
00001430                           554              
00001430                           555  code0011_cont2 
00001430  14FC 0020                556              MOVE.B  #$20, (A2)+     *' ' to buffer
00001434  14FC 0020                557              MOVE.B  #$20, (A2)+     *' ' to buffer
00001438  4EB9 00001D46            558              JSR      GETEA
0000143E  0C05 0000                559              CMPI.B  #%0, D5         *check if bad ea
00001442  6700 0012                560              BEQ     endop0011   
00001446  14FC 002C                561              MOVE.B   #$2C, (A2)+     *',' to buffer
0000144A  4EB9 00001E98            562              JSR      SWAPREG         *swap destination and source regs
00001450  4EB9 00001D46            563              JSR      GETEA 
00001456  4E75                     564  endop0011   RTS
00001458                           565  *===========================================================
00001458                           566  
00001458                           567  ************************************************************  
00001458                           568  *OPCODE: 0100
00001458                           569  *CLR,LEA,JMP,JSR,MOVEM,NEG*,NOP*,NOT*,RTS
00001458                           570  * '*' - instructions, not required but included 
00001458                           571  opcode0100: 
00001458                           572  **MOVEM Check***********************************************
00001458  2607                     573              MOVE.L  D7, D3
0000145A  C67C 0200                574              AND.W   #%0000001000000000, D3 *isolate bit 9
0000145E  EC43                     575              ASR.W   #$6, D3 
00001460  0C03 0000                576              CMPI.B  #%0, D3
00001464  6600 001C                577              BNE     notMOVEM             *check JSR bit 
00001468  2607                     578              MOVE.L  D7, D3
0000146A  C67C 0E00                579              AND.W   #%0000111000000000, D3    *isolate bits 11 - 9
0000146E  EC43                     580              ASR.W   #$6, D3
00001470  E843                     581              ASR.W   #$4, D3
00001472  0C43 0003                582              CMPI.W  #%011, D3
00001476  6700 0060                583              BEQ     op0100MOVEM
0000147A  0C43 0002                584              CMPI.W  #%010, D3
0000147E  6700 0058                585              BEQ     op0100MOVEM
00001482                           586              
00001482                           587                                 
00001482                           588  
00001482  2607                     589  notMOVEM    MOVE.L  D7, D3
00001484  0243 0100                590              ANDI.W  #$0100,D3           * Test isolate 8th bit for LEA
00001488  B67C 0100                591              CMP.W   #$0100,D3           * Test if LEA
0000148C  6700 0024                592              BEQ     opLEA               * Yes finish testing for LEA
00001490  3607                     593              MOVE.W  D7,D3               * Copy fresh copy of instruction to shift
00001492  183C 0008                594              MOVE.B  #8,D4          * Load 8 bit shifter
00001496  E86B                     595              LSR.W   D4,D3               * Shift current instruction
00001498  0243 000F                596              ANDI.W  #$000F,D3           * Isolate last 4 bits (LSB)
0000149C  C6FC 0006                597              MULU    #6,D3               * Form offset for next JMP table
000014A0  4DF9 0000168A            598              LEA     op0100table,A6         * Load next JMP table 
000014A6  4EB6 3000                599              JSR     00(A6,D3)           * Jump to next instruction per next 4 bits
000014AA  4EF9 000014B0            600              JMP     endop0100            * Once returned from jump table, skip to end
000014B0  4E75                     601  endop0100   RTS         
000014B2                           602  **LEA******************************************************* 
000014B2  14FC 004C                603  opLEA       MOVE.B  #$4C, (A2)+     *'L' to buffer
000014B6  14FC 0045                604              MOVE.B  #$45, (A2)+     *'E' to buffer
000014BA  14FC 0041                605              MOVE.B  #$41, (A2)+     *'A' to buffer
000014BE  14FC 0009                606              MOVE.B  #$9, (A2)+      *tab to buffer
000014C2                           607              *MOVE.B  #$20, (A2)+     *' ' to buffer
000014C2  4EB9 00001D46            608              JSR     GETEA
000014C8  14FC 002C                609              MOVE.B  #$2C,(A2)+      *',' to buffer
000014CC  14FC 0041                610              MOVE.B  #$41,(A2)+      *'A' to buffer
000014D0  4EB9 00001F0C            611              JSR     REG2BUFFER
000014D6  4E75                     612  endopLEA    RTS                     *return   
000014D8                           613  **0100 MOVEM***********************************************
000014D8                           614  op0100MOVEM     
000014D8  4242                     615              CLR D2
000014DA  4243                     616              CLR D3
000014DC  3607                     617              MOVE.W D7, D3
000014DE  3603                     618              MOVE.W D3, D3
000014E0  14FC 004D                619              MOVE.B  #$4D, (A2)+     *'M' to buffer
000014E4  14FC 004F                620              MOVE.B  #$4F, (A2)+     *'O' to buffer
000014E8  14FC 0056                621              MOVE.B  #$56, (A2)+     *'V' to buffer
000014EC  14FC 0045                622              MOVE.B  #$45, (A2)+     *'E' to buffer
000014F0  14FC 004D                623              MOVE.B  #$4D, (A2)+     *'M' to buffer
000014F4  14FC 002E                624              MOVE.B  #$2E, (A2)+     *'.' to buffer
000014F8                           625              
000014F8  C67C 0040                626              AND.W #%0000000001000000, D3   *isolate 6 bit
000014FC  EC43                     627              ASR.W #$6, D3
000014FE  4EB9 00001526            628              JSR    MOVEMSIZE2BUFFER
00001504  14FC 0020                629              MOVE.B  #$20, (A2)+     *' ' to buffer
00001508  14FC 0020                630              MOVE.B  #$20, (A2)+     *' ' to buffer
0000150C  3607                     631              MOVE D7, D3
0000150E  C67C 0400                632              AND.W #%0000010000000000, D3 *Checks the direction
00001512  E043                     633              ASR.W #$8, D3
00001514  E443                     634              ASR.W #$2, D3
00001516  C6FC 0006                635              MULU #$6, D3
0000151A  4DF9 00001552            636              LEA MOVEmem_table, A6
00001520  4EB6 3000                637              JSR 0(A6, D3)           *memory direction jump table
00001524                           638              *JMP     print_b         *RTS is broken
00001524  4E75                     639              RTS
00001526                           640              
00001526                           641  ************************************************************
00001526                           642  *MOVEMSIZE2BUFFER
00001526                           643  *Description: Isolates and converts the instruction size for MOVEM 
00001526                           644  *             and sends it to the output buffer. bit 6
00001526                           645  *Registers Used:
00001526                           646  *D3 - size bit
00001526                           647  *A2 - buffer address of decoded instruction
00001526                           648  ************************************************************
00001526                           649  MOVEMSIZE2BUFFER:
00001526                           650              
00001526  B63C 0000                651              CMP.B   #%00, D3        *word
0000152A  6700 0016                652              BEQ     ms2bW            *
0000152E  B63C 0001                653              CMP.B   #%01, D3        *long
00001532  6700 0018                654              BEQ     ms2bL           *
00001536  4EF9 0000203A            655              JMP     BADINST         *bad instruction
0000153C  4EF9 00001550            656              JMP     endms2b          *
00001542                           657                                      *
00001542  14FC 0057                658  ms2bW       MOVE.B  #$57,(A2)+      *'W' to buffer
00001546  4EF9 00001550            659              JMP     endms2b          *
0000154C  14FC 004C                660  ms2bL       MOVE.B  #$4C,(A2)+      *'L' to buffer
00001550  4E75                     661  endms2b     RTS                     *return
00001552                           662   
00001552                           663  **MOVEM Direction Table************************************ 
00001552                           664  MOVEmem_table  
00001552  4EF9 00001560            665                  JMP Reg2Mem
00001558  4EF9 00001586            666                  JMP Mem2Reg
0000155E  4E75                     667                  RTS   
00001560                           668  **MOVEM Register to Memory*********************************
00001560                           669  Reg2Mem
00001560                           670                 *MOVE.W D1, D0             
00001560  4EB9 00001686            671                 JSR GETMWORD             *loads next word (A0) to D1
00001566  4EB9 000015AE            672                 JSR Get_PRE_DReg_List    *get bits 7 - 0
0000156C  4EB9 000015E0            673                 JSR Get_PRE_AReg_List    *get bits 15 - 8
00001572                           674                 
00001572  153C 00FF                675                 MOVE.B #$FF, -(A2)
00001576  14FC 002C                676                 MOVE.B #$2C, (A2)+
0000157A  14FC 0020                677                 MOVE.B #$20, (A2)+
0000157E                           678                 
0000157E  4EB9 00001D46            679                 JSR      GETEA
00001584  4E75                     680  endReg2Mem     RTS
00001586                           681  **MOVEM Memory to Register********************************* 
00001586                           682  Mem2Reg
00001586  4EB9 00001D46            683                 JSR      GETEA
0000158C  14FC 002C                684                 MOVE.B #$2C, (A2)+ *',' to buffer
00001590  14FC 0020                685                 MOVE.B #$20, (A2)+   *' ' to buffer
00001594                           686                 
00001594  4EB9 00001686            687                 JSR GETMWORD
0000159A  3001                     688                 MOVE.W D1, D0        *D1 mask, D0 copy of mask
0000159C                           689        
0000159C  4EB9 00001618            690                 JSR Get_POST_AReg_List
000015A2                           691                 *MOVE.W D0, D1
000015A2  4EB9 00001652            692                 JSR Get_POST_DReg_List
000015A8  153C 00FF                693                 MOVE.B #$FF, -(A2)
000015AC  4E75                     694                 RTS    
000015AE                           695  **Predec Register*****************************************
000015AE                           696  Get_PRE_DReg_List
000015AE  3001                     697                 MOVE.W D1, D0
000015B0  E048                     698                 LSR #$8, D0 ** Data Register mask **
000015B2  143C 0000                699                 MOVE.B #$00, D2 ** Preps D2
000015B6  183C 0009                700                 MOVE.B #$09, D4 ** Sets the counter **
000015BA                           701                 
000015BA                           702  loopPRE_Dlist     
000015BA  5304                     703                 SUB.B #$1, D4    *sub from counter
000015BC  B83C 0000                704                 CMP.B #$00, D4   *end?
000015C0  6700 00C2                705                 BEQ end_loop
000015C4  E308                     706                 LSL.B #1, D0
000015C6  6500 0006                707                 BCS printPRE_DReg_List
000015CA  60EE                     708                 BRA loopPRE_Dlist
000015CC  4E75                     709                 RTS
000015CE                           710  
000015CE                           711  printPRE_DReg_List
000015CE  143C 0038                712                 MOVE.B #$38, D2
000015D2  9404                     713                 SUB.B D4, D2         
000015D4  14FC 0044                714                 MOVE.B #$44, (A2)+
000015D8  14C2                     715                 MOVE.B D2, (A2)+
000015DA  14FC 002F                716                 MOVE.B #$2F, (A2)+
000015DE  60DA                     717                 BRA loopPRE_Dlist
000015E0                           718  *Predec Address*********************************************               
000015E0                           719  Get_PRE_AReg_List
000015E0  1001                     720                 MOVE.B D1, D0     ***Moves the address list mask to d4 ***
000015E2  143C 0000                721                 MOVE.B #$00, D2  ** Preps D5
000015E6  183C 0009                722                 MOVE.B #9, D4    ** Sets the counter to 8 
000015EA                           723                 **ASR #8, D4      ** Shifts the mask for Address Registers **
000015EA                           724  loopPRE_Alist
000015EA  5304                     725                 SUB.B #$01, D4  ** Decrements the counter **
000015EC  B03C 0000                726                 CMP.B #$00, D0
000015F0  6700 0092                727                 BEQ end_loop
000015F4  B83C 0000                728                 CMP.B #$00, D4  ** Checks the counter **
000015F8  6700 008A                729                 BEQ end_loop   ** Ends the loop when counter is = 0 **
000015FC  E308                     730                 LSL.B #1, D0  ** Shifts mask to the left by one **
000015FE  6500 0006                731                 BCS printPRE_AReg_List ** Checks the carry Set bit **
00001602  60E6                     732                 BRA loopPRE_Alist
00001604  4E75                     733                 RTS
00001606                           734  
00001606                           735  printPRE_AReg_List
00001606  143C 0038                736                 MOVE.B #$38, D2
0000160A  9404                     737                 SUB.B D4, D2
0000160C  14FC 0041                738                 MOVE.B #$41, (A2)+
00001610  14C2                     739                 MOVE.B D2, (A2)+
00001612  14FC 002F                740                 MOVE.B #$2F, (A2)+
00001616  60D2                     741                 BRA loopPRE_Alist
00001618                           742  **Post Address*********************************************
00001618                           743  Get_POST_AReg_List
00001618                           744                 
00001618  E040                     745                 ASR #8, D0
0000161A  143C 0000                746                 MOVE.B #$00, D2  ** Preps D2
0000161E  183C 0009                747                 MOVE.B #9, D4    ** Sets the counter to 8 
00001622                           748  loopPOST_Alist
00001622  5304                     749                 SUB.B #$01, D4  ** Decrements the counter **
00001624  B03C 0000                750                 CMP.B #$00, D0
00001628  6700 005A                751                 BEQ end_loop
0000162C  B83C 0000                752                 CMP.B #$00, D4  ** Checks the counter **
00001630  6700 0052                753                 BEQ end_loop   ** Ends the loop when counter is = 0 **
00001634  E308                     754                 LSL.B #1, D0  ** Shifts mask to the left by one **
00001636  6500 0006                755                 BCS printPOST_AReg_List ** Checks the carry Set bit **
0000163A  60E6                     756                 BRA loopPOST_Alist
0000163C  4E75                     757                 RTS      
0000163E                           758                 
0000163E                           759  printPOST_AReg_List
0000163E  143C 0030                760                 MOVE.B #$30, D2
00001642  D404                     761                 ADD.B D4, D2
00001644  5302                     762                 SUB.B #$1, D2
00001646  14FC 0041                763                 MOVE.B #$41, (A2)+
0000164A  14C2                     764                 MOVE.B D2, (A2)+
0000164C  14FC 002F                765                 MOVE.B #$2F, (A2)+
00001650  60D0                     766                 BRA loopPOST_Alist
00001652                           767  *Post Register*********************************************
00001652                           768  Get_POST_DReg_List
00001652                           769                  
00001652  1001                     770                 MOVE.B D1, D0
00001654  143C 0000                771                 MOVE.B #$00, D2 ** Preps D2
00001658  183C 0009                772                 MOVE.B #$09, D4 ** Sets the counter **
0000165C                           773                 
0000165C                           774  loopPOST_Dlist     
0000165C  5304                     775                 SUB.B #$1, D4
0000165E  B03C 0000                776                 CMP.B #$00, D0
00001662  6700 0020                777                 BEQ end_loop
00001666  E308                     778                 LSL.B #1, D0
00001668  6500 0006                779                 BCS printPOST_DReg_List
0000166C  60EE                     780                 BRA loopPOST_Dlist
0000166E  4E75                     781                 RTS
00001670                           782  
00001670                           783                 
00001670                           784  printPOST_DReg_List
00001670  143C 0030                785                 MOVE.B #$30, D2
00001674  D404                     786                 ADD.B D4, D2
00001676  5302                     787                 SUB.B #$1, D2
00001678  14FC 0044                788                 MOVE.B #$44, (A2)+
0000167C  14C2                     789                 MOVE.B D2, (A2)+
0000167E  14FC 002F                790                 MOVE.B #$2F, (A2)+
00001682  60D8                     791                 BRA loopPOST_Dlist
00001684                           792  
00001684  4E75                     793  end_loop        RTS              
00001686                           794  ***********************************************************
00001686                           795  *GETMWORD
00001686                           796  *Description: Get the next word in memory for MOVEM Mask             
00001686                           797  GETMWORD
00001686  3218                     798              MOVE.W (A0)+, D1
00001688  4E75                     799  endGETMWORD RTS
0000168A                           800                  
0000168A                           801  *==========================================================
0000168A                           802  *  ___ _____ _   ___ _____   _____ _   ___ _    ___ 
0000168A                           803  * / __|_   _/_\ | _ \_   _| |_   _/_\ | _ ) |  | __|
0000168A                           804  * \__ \ | |/ _ \|   / | |     | |/ _ \| _ \ |__| _| 
0000168A                           805  * |___/ |_/_/ \_\_|_\ |_|     |_/_/ \_\___/____|___|
0000168A                           806  *                                                  
0000168A                           807  *0100 SECOND LAYER OPCODE TABLE SUBROUTINES 
0000168A                           808  op0100table
0000168A  4EF9 000016EC            809              JMP     op0100_0000   *BADINST          
00001690  4EF9 000016F4            810              JMP     op0100_0001   *BADINST           
00001696  4EF9 000016FC            811              JMP     op0100_0010   *CLR
0000169C  4EF9 00001722            812              JMP     op0100_0011   *BADINST
000016A2  4EF9 0000172A            813              JMP     op0100_0100   *NEG*
000016A8  4EF9 00001750            814              JMP     op0100_0101   *BADINST
000016AE  4EF9 00001758            815              JMP     op0100_0110   *NOT*
000016B4  4EF9 0000177E            816              JMP     op0100_0111   *BADINST
000016BA  4EF9 00001786            817              JMP     op0100_1000   *SWAP*
000016C0  4EF9 0000178E            818              JMP     op0100_1001   *BADINST
000016C6  4EF9 00001796            819              JMP     op0100_1010   *BADINST
000016CC  4EF9 0000179E            820              JMP     op0100_1011   *BADINST
000016D2  4EF9 000017A6            821              JMP     op0100_1100   *BADINST
000016D8  4EF9 000017AE            822              JMP     op0100_1101   *BADINST
000016DE  4EF9 000017B6            823              JMP     op0100_1110   *NOP*,JMP,JSR,RTS
000016E4  4EF9 0000182A            824              JMP     op0100_1111   *BADINST
000016EA                           825  endop0100table   
000016EA  4E75                     826              RTS                   *return
000016EC                           827  **0000 BADINST**********************************************
000016EC  4EB9 0000203A            828  op0100_0000 JSR     BADINST
000016F2                           829  endop0100_0000
000016F2  4E75                     830              RTS
000016F4                           831  **0001 BADINST**********************************************          
000016F4  4EB9 0000203A            832  op0100_0001 JSR     BADINST          
000016FA                           833  endop0100_0001
000016FA  4E75                     834              RTS            
000016FC                           835  **0010 CLR************************************************** 
000016FC  14FC 0043                836  op0100_0010 MOVE.B  #$43, (A2)+     *'C' to buffer
00001700  14FC 004C                837              MOVE.B  #$4C, (A2)+     *'L' to buffer
00001704  14FC 0052                838              MOVE.B  #$52, (A2)+     *'R' to buffer
00001708  14FC 002E                839              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000170C  4EB9 00001F1E            840              JSR     SIZE2BUFFER
00001712  14FC 0020                841              MOVE.B  #$20, (A2)+     *' ' to buffer
00001716  14FC 0020                842              MOVE.B  #$20, (A2)+     *' ' to buffer
0000171A  4EB9 00001D46            843              JSR     GETEA
00001720                           844  endop0100_0010    
00001720  4E75                     845              RTS                     *return
00001722                           846  **0011 BADINST**********************************************          
00001722  4EB9 0000203A            847  op0100_0011 JSR     BADINST          
00001728                           848  endop0100_0011
00001728  4E75                     849              RTS  
0000172A                           850  **0100 NEG************************************************** 
0000172A  14FC 004E                851  op0100_0100 MOVE.B  #$4E, (A2)+     *'N' to buffer
0000172E  14FC 0045                852              MOVE.B  #$45, (A2)+     *'E' to buffer
00001732  14FC 0047                853              MOVE.B  #$47, (A2)+     *'G' to buffer
00001736  14FC 002E                854              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000173A  4EB9 00001F1E            855              JSR     SIZE2BUFFER
00001740  14FC 0020                856              MOVE.B  #$20, (A2)+     *' ' to buffer
00001744  14FC 0020                857              MOVE.B  #$20, (A2)+     *' ' to buffer
00001748  4EB9 00001D46            858              JSR     GETEA
0000174E                           859  endop0100_0100   
0000174E  4E75                     860              RTS                     *return
00001750                           861  **0101 BADINST**********************************************          
00001750  4EB9 0000203A            862  op0100_0101 JSR     BADINST          
00001756                           863  endop0100_0101
00001756  4E75                     864              RTS  
00001758                           865  **0110 NOT************************************************** 
00001758                           866  op0100_0110 
00001758  14FC 004E                867              MOVE.B  #$4E, (A2)+     *'N' to buffer
0000175C  14FC 004F                868              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001760  14FC 0054                869              MOVE.B  #$54, (A2)+     *'T' to buffer
00001764  14FC 002E                870              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001768  4EB9 00001F1E            871              JSR     SIZE2BUFFER
0000176E  14FC 0020                872              MOVE.B  #$20, (A2)+     *' ' to buffer
00001772  14FC 0020                873              MOVE.B  #$20, (A2)+     *' ' to buffer
00001776  4EB9 00001D46            874              JSR     GETEA
0000177C                           875  endop0100_0110
0000177C  4E75                     876              RTS                     *return
0000177E                           877  **0111 BADINST**********************************************          
0000177E  4EB9 0000203A            878  op0100_0111 JSR     BADINST          
00001784                           879  endop0100_0111
00001784  4E75                     880              RTS 
00001786                           881  **1000 SWAP*************************************************          
00001786  4EB9 0000203A            882  op0100_1000 JSR     BADINST     *SWAP not supported     
0000178C                           883  endop0100_1000
0000178C  4E75                     884              RTS  
0000178E                           885  **1001 BADINST**********************************************           
0000178E  4EB9 0000203A            886  op0100_1001 JSR     BADINST          
00001794                           887  endop0100_1001
00001794  4E75                     888              RTS 
00001796                           889  **1010 BADINST**********************************************           
00001796  4EB9 0000203A            890  op0100_1010 JSR     BADINST          
0000179C                           891  endop0100_1010
0000179C  4E75                     892              RTS 
0000179E                           893  **1011 BADINST**********************************************           
0000179E  4EB9 0000203A            894  op0100_1011 JSR     BADINST          
000017A4                           895  endop0100_1011
000017A4  4E75                     896              RTS 
000017A6                           897  **1100 BADINST**********************************************           
000017A6  4EB9 0000203A            898  op0100_1100 JSR     BADINST          
000017AC                           899  endop0100_1100
000017AC  4E75                     900              RTS 
000017AE                           901  **1101 BADINST**********************************************           
000017AE  4EB9 0000203A            902  op0100_1101 JSR     BADINST          
000017B4                           903  endop0100_1101
000017B4  4E75                     904              RTS 
000017B6                           905  ***1110 NOP*,RTS,JSR,JMP************************************
000017B6                           906  op0100_1110:                       
000017B6  4EB9 00001E4A            907              JSR     GETSIZE
000017BC  0C03 0002                908              CMPI.B  #%10, D3
000017C0  6700 0036                909              BEQ     opJSR
000017C4  0C03 0003                910              CMPI.B  #%11, D3
000017C8  6700 0046                911              BEQ     opJMP
000017CC  BE7C 4E75                912              CMP.W   #$4E75, D7      *absolute binary value
000017D0  6700 0018                913              BEQ     opRTS           * 0100 1110 0111 0101
000017D4  BE7C 4E71                914              CMP.W   #$4E71, D7      *absolute binary value
000017D8  6600 0860                915              BNE     BADINST         * 0100 1110 0111 0001
000017DC                           916  **NOP*******************************************************            
000017DC  14FC 004E                917  opNOP       MOVE.B  #$4E, (A2)+     *'N' to buffer
000017E0  14FC 004F                918              MOVE.B  #$4F, (A2)+     *'O' to buffer
000017E4  14FC 0050                919              MOVE.B  #$50, (A2)+     *'P' to buffer
000017E8  4E75                     920  endopNOP    RTS                     *return
000017EA                           921  **RTS*******************************************************
000017EA  14FC 0052                922  opRTS       MOVE.B  #$52, (A2)+     *'R' to buffer
000017EE  14FC 0054                923              MOVE.B  #$54, (A2)+     *'T' to buffer
000017F2  14FC 0053                924              MOVE.B  #$53, (A2)+     *'S' to buffer
000017F6  4E75                     925  endopRTS    RTS                     *return
000017F8                           926  **JSR*******************************************************           
000017F8  14FC 004A                927  opJSR       MOVE.B  #$4A, (A2)+     *'J' to buffer
000017FC  14FC 0053                928              MOVE.B  #$53, (A2)+     *'S' to buffer
00001800  14FC 0052                929              MOVE.B  #$52, (A2)+     *'R' to buffer
00001804  14FC 0009                930              MOVE.B  #$9, (A2)+      *tab to buffer
00001808  4EB9 00001D46            931              JSR     GETEA
0000180E  4E75                     932  endopJSR    RTS                     *return
00001810                           933  **JMP*******************************************************
00001810  14FC 004A                934  opJMP       MOVE.B  #$4A, (A2)+     *'J' to buffer
00001814  14FC 004D                935              MOVE.B  #$4D, (A2)+     *'M' to buffer
00001818  14FC 0050                936              MOVE.B  #$50, (A2)+     *'P' to buffer
0000181C  14FC 0020                937              MOVE.B  #$20, (A2)+     *' ' to buffer
00001820  4EB9 00001D46            938              JSR     GETEA
00001826  4E75                     939  endopJMP    RTS                     *return                                 
00001828                           940  endop0100_1110          
00001828  4E75                     941              RTS                     *return           
0000182A                           942  **1111 BADINST*********************************************          
0000182A  4EB9 0000203A            943  op0100_1111 JSR     BADINST          
00001830                           944  endop0100_1111
00001830  4E75                     945              RTS 
00001832                           946  ***********************************************************
00001832                           947  *  ___ _  _ ___    _____ _   ___ _    ___ 
00001832                           948  * | __| \| |   \  |_   _/_\ | _ ) |  | __|
00001832                           949  * | _|| .` | |) |   | |/ _ \| _ \ |__| _| 
00001832                           950  * |___|_|\_|___/    |_/_/ \_\___/____|___|
00001832                           951  *                                                 
00001832                           952  ************************************************************  
00001832                           953  *OPCODE: 0101
00001832                           954  *BAD INSTRUCTION
00001832  4EF9 0000203A            955  opcode0101: JMP     BADINST
00001838  4E75                     956  endop0101   RTS
0000183A                           957  *===========================================================
0000183A                           958  
0000183A                           959  ************************************************************  
0000183A                           960  *OPCODE: 0110
0000183A                           961  *BCC,BGT,BLE
0000183A                           962  opcode0110: 
0000183A  3607                     963              MOVE.W  D7, D3          *move to utility
0000183C  C67C 0F00                964              AND.W   #%0000111100000000, D3  *isoltate condition, bits 11 - 8
00001840  E043                     965              ASR     #$8, D3         *shifts
00001842  B67C 0004                966              CMP     #$4, D3         *BCC?
00001846  6700 0012                967              BEQ     opBCC
0000184A  B67C 000E                968              CMP     #$E, D3         *BGT?
0000184E  6700 0038                969              BEQ     opBGT
00001852  B67C 000F                970              CMP     #$F, D3         *BLE?
00001856  6700 005E                971              BEQ     opBLE
0000185A                           972  
0000185A                           973  **BCC*******************************************************
0000185A  14FC 0042                974  opBCC       MOVE.B #$42, (A2)+
0000185E  14FC 0043                975              MOVE.B #$43, (A2)+
00001862  14FC 0043                976              MOVE.B #$43, (A2)+
00001866  14FC 0009                977              MOVE.B #$09, (A2)+
0000186A                           978                
0000186A  4243                     979              CLR D3
0000186C  3607                     980              MOVE.W D7, D3
0000186E  C67C 00FF                981              AND.W #%0000000011111111, D3
00001872  2808                     982              MOVE.L A0, D4
00001874  B67C 0000                983              CMP #$00, D3
00001878  6700 008C                984              BEQ DISP16
0000187C  B67C 00FF                985              CMP #$FF, D3
00001880  6700 0062                986              BEQ DISP32
00001884  6D00 0096                987              BLT DISP8
00001888                           988  **BGT*******************************************************  
00001888  14FC 0042                989  opBGT       MOVE.B #$42, (A2)+
0000188C  14FC 0047                990              MOVE.B #$47, (A2)+
00001890  14FC 0054                991              MOVE.B #$54, (A2)+
00001894  14FC 0009                992              MOVE.B #$09, (A2)+
00001898                           993                
00001898  4243                     994              CLR D3
0000189A  3607                     995              MOVE.W D7, D3
0000189C  C67C 00FF                996              AND.W #%0000000011111111, D3
000018A0  2808                     997              MOVE.L A0, D4
000018A2  B67C 0000                998              CMP #$00, D3
000018A6  6700 005E                999              BEQ DISP16
000018AA  B67C 00FF               1000              CMP #$FF, D3
000018AE  6700 0034               1001              BEQ DISP32
000018B2  6D00 0068               1002              BLT DISP8
000018B6                          1003  **BLE******************************************************* 
000018B6  14FC 0042               1004  opBLE       MOVE.B #$42, (A2)+
000018BA  14FC 004C               1005              MOVE.B #$4C, (A2)+
000018BE  14FC 0045               1006              MOVE.B #$45, (A2)+
000018C2  14FC 0009               1007              MOVE.B #$09, (A2)+
000018C6                          1008                
000018C6  4243                    1009              CLR D3
000018C8  3607                    1010              MOVE.W D7, D3
000018CA  C67C 00FF               1011              AND.W #%0000000011111111, D3
000018CE  2808                    1012              MOVE.L A0, D4
000018D0  B67C 0000               1013              CMP #$00, D3
000018D4  6700 0030               1014              BEQ DISP16
000018D8  B67C 00FF               1015              CMP #$FF, D3
000018DC  6700 0006               1016              BEQ DISP32
000018E0  6D00 003A               1017              BLT DISP8
000018E4                          1018  **Displacement 32 bits***************************************               
000018E4  4EB8 1686               1019  DISP32      JSR GETMWORD
000018E8  3001                    1020              MOVE.W D1, D0
000018EA  E180                    1021              ASL.L #$8, D0
000018EC  E180                    1022              ASL.L #$8, D0
000018EE  4EB8 1686               1023              JSR GETMWORD
000018F2  D280                    1024              ADD.L D0, D1
000018F4  D881                    1025              ADD.L D1, D4
000018F6  2648                    1026              MOVEA.L   A0, A3  *store  A0
000018F8  3044                    1027              MOVEA.W   D4, A0
000018FA  4EB8 11EA               1028              JSR       ADDRESS
000018FE  204B                    1029              MOVEA.L   A3, A0
00001900                          1030  
00001900  4EF9 0000192E           1031              JMP       endop0110
00001906                          1032  **Displacement 16 bits***************************************             
00001906  4EB8 1686               1033  DISP16      JSR GETMWORD
0000190A  D841                    1034              ADD.W D1, D4
0000190C  2648                    1035              MOVEA.L   A0, A3  *store  A0
0000190E  3044                    1036              MOVEA.W   D4, A0
00001910  4EB8 11EA               1037              JSR       ADDRESS
00001914  204B                    1038              MOVEA.L   A3, A0
00001916  4EF9 0000192E           1039              JMP       endop0110   
0000191C                          1040  **Displacement 8 bits**************************************** 
0000191C  9843                    1041  DISP8       SUB D3, D4
0000191E  2648                    1042              MOVEA.L   A0, A3  *store  A0
00001920  3044                    1043              MOVEA.W   D4, A0
00001922  4EB8 11EA               1044              JSR       ADDRESS
00001926  204B                    1045              MOVEA.L   A3, A0
00001928                          1046  
00001928  4EF9 0000192E           1047              JMP       endop0110  
0000192E                          1048  **END********************************************************               
0000192E  4E75                    1049  endop0110   RTS
00001930                          1050  *===========================================================
00001930                          1051  
00001930                          1052  ************************************************************  
00001930                          1053  *OPCODE: 0111
00001930                          1054  *BAD INSTRUCTION
00001930  4EF9 0000203A           1055  opcode0111: JMP     BADINST
00001936  4E75                    1056  endop0111   RTS
00001938                          1057  *===========================================================
00001938                          1058  
00001938                          1059  ************************************************************  
00001938                          1060  *OPCODE: 1000
00001938                          1061  *OR 
00001938                          1062  opcode1000: 
00001938  2607                    1063              MOVE.L  D7, D3
0000193A  EC8B                    1064              LSR.L   #6, D3
0000193C  0243 0003               1065              ANDI.W  #$03, D3
00001940  B63C 0003               1066              CMP.B   #$3, D3
00001944  6600 0008               1067              BNE     opOR
00001948  4EF9 0000203A           1068              JMP     BADINST
0000194E  14FC 004F               1069  opOR        MOVE.B  #$4F, (A2)+     *'O' to buffer
00001952  14FC 0052               1070              MOVE.B  #$52, (A2)+     *'R' to buffer
00001956  14FC 002E               1071              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000195A  4EB9 00001F1E           1072              JSR     SIZE2BUFFER     *size to buffer
00001960  14FC 0020               1073              MOVE.B  #$20, (A2)+     *' ' to buffer
00001964  14FC 0020               1074              MOVE.B  #$20, (A2)+     *' ' to buffer
00001968  4EB9 00001E54           1075              JSR     GETDIRECTION    *direction bit 0 = EA; 1 = regs
0000196E  0C03 0000               1076              CMPI.B  #%0, D3         *EA first?
00001972  6600 001C               1077              BNE     opOR01          
00001976  4EB9 00001D46           1078              JSR     GETEA
0000197C  14FC 002C               1079              MOVE.B  #$2C,(A2)+      *',' to buffer
00001980  14FC 0044               1080              MOVE.B  #$44,(A2)+      *'D' to buffer
00001984  4EB9 00001F0C           1081              JSR     REG2BUFFER
0000198A  4EF9 000019A4           1082              JMP     endop1000
00001990                          1083   
00001990  14FC 0044               1084  opOR01      MOVE.B  #$44,(A2)+      *'D' to buffer
00001994  4EB9 00001F0C           1085              JSR     REG2BUFFER            
0000199A  14FC 002C               1086              MOVE.B  #$2C,(A2)+      *',' to buffer
0000199E  4EB9 00001D46           1087              JSR     GETEA
000019A4  4E75                    1088  endop1000   RTS
000019A6                          1089  *===========================================================
000019A6                          1090  
000019A6                          1091  ************************************************************ 
000019A6                          1092  *OPCODE: 1001
000019A6                          1093  *SUB, SUBA
000019A6                          1094  opcode1001:
000019A6  14FC 0053               1095              MOVE.B  #$53, (A2)+     *'S' to buffer
000019AA  14FC 0055               1096              MOVE.B  #$55, (A2)+     *'U' to buffer
000019AE  14FC 0042               1097              MOVE.B  #$42, (A2)+     *'B' to buffer
000019B2  4EB9 00001E4A           1098              JSR     GETSIZE         *get the instruction size (OPMODE)
000019B8  B63C 0003               1099              CMP.B   #%11, D3        *11 = SUBA  
000019BC  6600 0046               1100              BNE     opsubSub
000019C0  14FC 0041               1101              MOVE.B  #$41, (A2)+     *'A' to buffer
000019C4  14FC 002E               1102              MOVE.B  #$2E, (A2)+     *'.' to buffer
000019C8  3607                    1103              MOVE.W  D7, D3          *move to utility
000019CA  E08B                    1104              LSR.L   #8, D3          *shift for opmode
000019CC  0243 0001               1105              ANDI.W  #$0001, D3      *isolate 8 to determine size
000019D0  B63C 0001               1106              CMP.B   #%1, D3         *long?
000019D4  6700 0008               1107              BEQ     opsubL          *it's a longword
000019D8  4EF9 000019E2           1108              JMP     opsubSuba
000019DE                          1109  **SUBA******************************************************            
000019DE  14FC 004C               1110  opsubL      MOVE.B  #$4C, (A2)+     *'L' to buffer
000019E2  14FC 0020               1111  opsubSuba   MOVE.B  #$20, (A2)+     *' ' to buffer    
000019E6  14FC 0020               1112              MOVE.B  #$20, (A2)+     *' ' to buffer
000019EA  4EB9 00001D46           1113              JSR     GETEA           *get effective address
000019F0  14FC 002C               1114              MOVE.B  #$2C,(A2)+      *',' to buffer
000019F4  14FC 0041               1115              MOVE.B  #$41,(A2)+      *'A' to buffer
000019F8  4EB9 00001F0C           1116              JSR     REG2BUFFER      *get the register number
000019FE  4EF9 00001A4E           1117              JMP     endop1001       *return
00001A04                          1118  **SUB*EA>>Register****************************************** 
00001A04  14FC 002E               1119  opsubSub    MOVE.B  #$2E, (A2)+     *'.' to buffer
00001A08  4EB9 00001F1E           1120              JSR     SIZE2BUFFER     *send size to buffer
00001A0E  14FC 0009               1121              MOVE.B  #$09, (A2)+     *tab
00001A12  4EB9 00001E54           1122              JSR     GETDIRECTION    *isolate
00001A18  B63C 0000               1123              CMP.B   #%0, D3         *direction bit 0 = EA; 1 = regs
00001A1C  6600 001C               1124              BNE     opsubSubR         
00001A20  4EB9 00001D46           1125              JSR     GETEA           *get effective address
00001A26  14FC 002C               1126              MOVE.B  #$2C,(A2)+      *',' to buffer   
00001A2A  14FC 0044               1127              MOVE.B  #$44,(A2)+      *'D' to buffer
00001A2E  4EB9 00001F0C           1128              JSR     REG2BUFFER      *get the register number
00001A34  4EF9 00001A4E           1129              JMP     endop1001       *return
00001A3A                          1130  **SUB*Register>>EA******************************************            
00001A3A  14FC 0044               1131  opsubSubR   MOVE.B  #$44,(A2)+      *'D' to buffer
00001A3E  4EB9 00001F0C           1132              JSR     REG2BUFFER      *get the register number
00001A44  14FC 002C               1133              MOVE.B  #$2C,(A2)+      *',' to buffer
00001A48  4EB9 00001D46           1134              JSR     GETEA           *get effective address
00001A4E  4E75                    1135  endop1001   RTS                     *return
00001A50                          1136  *===========================================================
00001A50                          1137                                                         
00001A50                          1138  ************************************************************  
00001A50                          1139  *OPCODE: 1010
00001A50                          1140  *BAD INSTRUCTION
00001A50  4EF9 0000203A           1141  opcode1010: JMP     BADINST
00001A56  4E75                    1142  endop1010   RTS
00001A58                          1143  *===========================================================
00001A58                          1144  
00001A58                          1145  ************************************************************  
00001A58                          1146  *OPCODE: 1011
00001A58                          1147  *CMP,CMPA
00001A58                          1148  *EOR is not applicable to this assignment and will be 
00001A58                          1149  *regarded as a bad instruction
00001A58                          1150  opcode1011: 
00001A58  4EB9 00001E4A           1151              JSR     GETSIZE
00001A5E  0C03 0003               1152              CMPI.B   #%11, D3
00001A62  6600 0040               1153              BNE     opcmp
00001A66                          1154  **CMPA******************************************************             
00001A66  14FC 0043               1155  opCMPA      MOVE.B  #$43, (A2)+     *'C' to buffer
00001A6A  14FC 004D               1156              MOVE.B  #$4D, (A2)+     *'M' to buffer
00001A6E  14FC 0050               1157              MOVE.B  #$50, (A2)+     *'P' to buffer
00001A72  14FC 0041               1158              MOVE.B  #$41, (A2)+     *'A' to buffer
00001A76  14FC 002E               1159              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001A7A  2607                    1160              MOVE.L  D7, D3
00001A7C  14FC 0020               1161              MOVE.B  #$20, (A2)+     *' ' to buffer
00001A80  14FC 0020               1162              MOVE.B  #$20, (A2)+     *' ' to buffer
00001A84                          1163              
00001A84  4EB9 00001F1E           1164              JSR     SIZE2BUFFER
00001A8A  4EB9 00001D46           1165              JSR     GETEA
00001A90  14FC 002C               1166              MOVE.B  #$2C, (A2)+     *',' to buffer
00001A94  14FC 0041               1167              MOVE.B  #$41, (A2)+     *'A' to buffer
00001A98  4EB9 00001F0C           1168              JSR     REG2BUFFER
00001A9E  4EF9 00001AF2           1169              JMP     endop1011
00001AA4                          1170  **CMP*******************************************************             
00001AA4  2607                    1171  opCMP       MOVE.L  D7, D3
00001AA6  4EB9 00001E54           1172              JSR     GETDIRECTION
00001AAC  0C03 0000               1173              CMPI.B   #%0, D3
00001AB0  6600 003A               1174              BNE     opeor
00001AB4                          1175  
00001AB4  14FC 0043               1176              MOVE.B  #$43, (A2)+     *'C' to buffer
00001AB8  14FC 004D               1177              MOVE.B  #$4D, (A2)+     *'M' to buffer
00001ABC  14FC 0050               1178              MOVE.B  #$50, (A2)+     *'P' to buffer
00001AC0  14FC 002E               1179              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001AC4  4EB9 00001F1E           1180              JSR     SIZE2BUFFER
00001ACA  14FC 0020               1181              MOVE.B  #$20, (A2)+     *' ' to buffer
00001ACE  14FC 0020               1182              MOVE.B  #$20, (A2)+     *' ' to buffer
00001AD2  4EB9 00001D46           1183              JSR     GETEA
00001AD8  14FC 002C               1184              MOVE.B  #$2C, (A2)+     *',' to buffer
00001ADC  14FC 0044               1185              MOVE.B  #$44, (A2)+     *'D' to buffer
00001AE0  4EB9 00001F0C           1186              JSR     REG2BUFFER
00001AE6  4EF9 00001AF2           1187              JMP     endop1011
00001AEC                          1188  **EOR*******************************************************            
00001AEC  4EF9 0000203A           1189  opEOR       JMP     BADINST              
00001AF2  4E75                    1190  endop1011   RTS
00001AF4                          1191  *===========================================================
00001AF4                          1192  
00001AF4                          1193  ************************************************************  
00001AF4                          1194  *OPCODE: 1100
00001AF4                          1195  *AND
00001AF4                          1196  *MULU, EXG are not applicable to this assignment and will be 
00001AF4                          1197  *regarded as a bad instruction
00001AF4                          1198  opcode1100:
00001AF4  3607                    1199              MOVE.W  D7, D3          *move to utility
00001AF6  EC8B                    1200              LSR.L   #6, D3          *shift
00001AF8  0243 0003               1201              ANDI.W  #$3, D3         *isolate
00001AFC  B63C 0003               1202              CMP.B   #$3, D3         *MULU/MULS?
00001B00  6700 0538               1203              BEQ     BADINST         *instruction not supported
00001B04  3607                    1204              MOVE.W  D7, D3          *move to utility
00001B06  E68B                    1205              LSR.L   #3, D3          *shift
00001B08  0203 001F               1206              ANDI.B  #$1F, D3        *isolate
00001B0C  B63C 0008               1207              CMP.B   #$08, D3        *EXG?
00001B10  6700 0528               1208              BEQ     BADINST         *instruction not supported
00001B14  B63C 0009               1209              CMP.B   #$09, D3        *EXG?
00001B18  6700 0520               1210              BEQ     BADINST         *instruction not supported
00001B1C  B63C 0011               1211              CMP.B   #$11, D3        *EXG?
00001B20  6700 0518               1212              BEQ     BADINST         *ok, phew made it to AND
00001B24                          1213              
00001B24  14FC 0041               1214              MOVE.B  #$41, (A2)+     *'A' to buffer
00001B28  14FC 004E               1215              MOVE.B  #$4E, (A2)+     *'N' to buffer
00001B2C  14FC 0044               1216              MOVE.B  #$44, (A2)+     *'D' to buffer
00001B30  14FC 002E               1217              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001B34  4EB9 00001F1E           1218              JSR     SIZE2BUFFER     *send size to buffer
00001B3A  14FC 0020               1219              MOVE.B  #$20, (A2)+     *' ' to buffer
00001B3E  14FC 0020               1220              MOVE.B  #$20, (A2)+     *' ' to buffer
00001B42  4EB9 00001E54           1221              JSR     GETDIRECTION    *isolate bit for direction
00001B48  0C03 0000               1222              CMPI.B  #%0, D3         *direction bit 0 = EA; 1 = regs
00001B4C  6600 001C               1223              BNE     opAND01         *
00001B50  4EB9 00001D46           1224              JSR     GETEA           *get effective address
00001B56  14FC 002C               1225              MOVE.B  #$2C, (A2)+     *',' to buffer
00001B5A  14FC 0044               1226              MOVE.B  #$44, (A2)+     *'D' to buffer
00001B5E  4EB9 00001F0C           1227              JSR     REG2BUFFER      *get the register number
00001B64  4EF9 00001B7E           1228              JMP     endop1100     
00001B6A                          1229           
00001B6A  14FC 0044               1230  opAND01     MOVE.B  #$44, (A2)+     *'D' to buffer
00001B6E  4EB9 00001F0C           1231              JSR     REG2BUFFER      *get the register number
00001B74  14FC 002C               1232              MOVE.B  #$2C, (A2)+     *',' to buffer
00001B78  4EB9 00001D46           1233              JSR     GETEA           *get effective address 
00001B7E  4E75                    1234  endop1100   RTS                     *return
00001B80                          1235  *===========================================================
00001B80                          1236  
00001B80                          1237  ************************************************************  
00001B80                          1238  *OPCODE: 1101
00001B80                          1239  *ADD,ADDA
00001B80                          1240  opcode1101: 
00001B80  14FC 0041               1241              MOVE.B  #$41, (A2)+     *'A' to buffer
00001B84  14FC 0044               1242              MOVE.B  #$44, (A2)+     *'D' to buffer
00001B88  14FC 0044               1243              MOVE.B  #$44, (A2)+     *'D' to buffer
00001B8C  4EB9 00001E4A           1244              JSR     GETSIZE         *
00001B92  0C03 0003               1245              CMPI.B  #%11, D3        *11?
00001B96  6600 004E               1246              BNE     opadd           *
00001B9A  14FC 0041               1247              MOVE.B  #$41, (A2)+     *'A' to buffer
00001B9E  14FC 002E               1248              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001BA2  3607                    1249              MOVE.W  D7, D3          *move to utility
00001BA4  E08B                    1250              LSR.L   #8, D3          *shift
00001BA6  0243 0001               1251              ANDI.W  #$0001, D3      *isolate
00001BAA  0C03 0001               1252              CMPI.B  #%1, D3         *long?
00001BAE  6700 000C               1253              BEQ     opaddL          *
00001BB2  14FC 0057               1254              MOVE.B  #$57,(A2)+      *'W' to buffer
00001BB6  4EF9 00001BC0           1255              JMP     opadda  
00001BBC                          1256  **ADD.L*****************************************************
00001BBC  14FC 004C               1257  opADDL      MOVE.B  #$4C,(A2)+      *'L' to buffer
00001BC0                          1258  *ADDA*******************************************************
00001BC0  14FC 0020               1259  opADDA      MOVE.B  #$20, (A2)+     *' ' to buffer
00001BC4  14FC 0020               1260              MOVE.B  #$20, (A2)+     *' ' to buffer
00001BC8  14FC 0020               1261              MOVE.B  #$20, (A2)+     *' ' to buffer
00001BCC  4EB9 00001D46           1262              JSR     GETEA           *get effective address 
00001BD2  14FC 002C               1263              MOVE.B  #$2C, (A2)+     *',' to buffer
00001BD6  14FC 0041               1264              MOVE.B  #$41, (A2)+     *'A' to buffer
00001BDA  4EB9 00001F0C           1265              JSR     REG2BUFFER      *get the register number
00001BE0  4EF9 00001C34           1266              JMP     endop1101
00001BE6                          1267  **ADD*******************************************************
00001BE6  14FC 002E               1268  opADD       MOVE.B  #$2E, (A2)+     *'.' to buffer  
00001BEA  4EB9 00001F1E           1269              JSR     SIZE2BUFFER     *send size to buffer
00001BF0  14FC 0020               1270              MOVE.B  #$20, (A2)+     *' ' to buffer
00001BF4  14FC 0020               1271              MOVE.B  #$20, (A2)+     *' ' to buffer
00001BF8  4EB9 00001E54           1272              JSR     GETDIRECTION    *isolate bit for direction
00001BFE  0C03 0000               1273              CMPI.B   #%0, D3        *direction bit 0 = EA; 1 = regs
00001C02  6600 001C               1274              BNE     opADD01         *
00001C06  4EB9 00001D46           1275              JSR     GETEA           *get effective address
00001C0C  14FC 002C               1276              MOVE.B  #$2C, (A2)+     *',' to buffer
00001C10  14FC 0044               1277              MOVE.B  #$44, (A2)+     *'D' to buffer
00001C14  4EB9 00001F0C           1278              JSR     REG2BUFFER      *get the register number
00001C1A  4EF9 00001C34           1279              JMP     endop1101   
00001C20                          1280  **EA first************************************************** 
00001C20  14FC 0044               1281  opADD01    MOVE.B  #$44, (A2)+     *'D' to buffer
00001C24  4EB9 00001F0C           1282              JSR     REG2BUFFER      *get the register number
00001C2A  14FC 002C               1283              MOVE.B  #$2C, (A2)+     *',' to buffer
00001C2E  4EB9 00001D46           1284              JSR     GETEA           *get effective address
00001C34  4E75                    1285  endop1101   RTS                     *return           
00001C36                          1286  *===========================================================
00001C36                          1287  
00001C36                          1288  ************************************************************  
00001C36                          1289  *OPCODE: 1110
00001C36                          1290  *AS(L/R), LS(L/R), RO(L/R)
00001C36                          1291  opcode1110:
00001C36  4EB9 00001E4A           1292              JSR     GETSIZE
00001C3C  0C03 0003               1293              CMPI.B  #%11, D3        *memory?
00001C40  6700 005E               1294              BEQ     opSMEM
00001C44                          1295              
00001C44                          1296  **Register shift********************************************
00001C44  3607                    1297  opSREG      MOVE.W  D7, D3          *move to utility
00001C46  E60B                    1298              LSR.B   #3, D3          *isolate 3-4
00001C48  0203 0003               1299              ANDI.B  #$03, D3
00001C4C  0C03 0000               1300              CMPI.B  #%00, D3        *AS(L/R)?
00001C50  6700 003A               1301              BEQ     opASD
00001C54  0C03 0001               1302              CMPI.B  #%01, D3        *LS(L/R)?
00001C58  6700 001E               1303              BEQ     opLSD
00001C5C  0C03 0003               1304              CMPI.B  #%11, D3        *RO(L/R)?
00001C60  6600 03D8               1305  endopSREG   BNE     BADINST
00001C64                          1306  **Roll Shift Register**************************************
00001C64  14FC 0052               1307  opROD       MOVE.B  #$52, (A2)+     *'R' to buffer
00001C68  14FC 004F               1308              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001C6C  4EB9 00001CFE           1309              JSR     op1110DS
00001C72  4EF9 00001D3C           1310  endopROD    JMP     endop1110   
00001C78                          1311  **Left Shift Register**************************************
00001C78  14FC 004C               1312  opLSD       MOVE.B  #$4C, (A2)+     *'L' to buffer
00001C7C  14FC 0053               1313              MOVE.B  #$53, (A2)+     *'S' to buffer
00001C80  4EB9 00001CFE           1314              JSR     op1110DS        *Direction and size to buffer
00001C86  4EF9 00001D3C           1315  endopLSD    JMP     endop1110 
00001C8C                          1316  **Right Shift Register*************************************
00001C8C  14FC 0041               1317  opASD       MOVE.B  #$41, (A2)+     *'A' to buffer
00001C90  14FC 0053               1318              MOVE.B  #$53, (A2)+     *'S' to buffer
00001C94  4EB9 00001CFE           1319              JSR     op1110DS        *Direction and size to buffer
00001C9A                          1320              
00001C9A  4EF9 00001D3C           1321  endopASD    JMP     endop1110 
00001CA0                          1322  **Memory shift**********************************************      
00001CA0  3607                    1323  opSMEM      MOVE.W  D7, D3          *move to utility
00001CA2  E08B                    1324              LSR.L   #8, D3          *isolate
00001CA4  E28B                    1325              LSR.L   #1, D3
00001CA6  0203 0007               1326              ANDI.B  #$0007, D3
00001CAA  0C03 0000               1327              CMPI.B  #%00, D3        *AS(L/R)?
00001CAE  6700 003A               1328              BEQ     opASM
00001CB2  0C03 0001               1329              CMPI.B  #%01, D3        *LS(L/R)?
00001CB6  6700 001E               1330              BEQ     opLSM
00001CBA  0C03 0003               1331              CMPI.B  #%11, D3        *RO(L/R)?
00001CBE  6600 037A               1332  endopSMEM   BNE     BADINST
00001CC2                          1333  **Roll Shift Memory***************************************
00001CC2  14FC 0052               1334  opROM       MOVE.B  #$52, (A2)+     *'R' to buffer
00001CC6  14FC 004F               1335              MOVE.B  #$4F, (A2)+     *'O' to buffer
00001CCA  4EB9 00001D1E           1336              JSR     op1110MS
00001CD0  4EF9 00001D3C           1337  endopROM    JMP     endop1110 
00001CD6                          1338  **Left Shift Memory**************************************
00001CD6  14FC 004C               1339  opLSM       MOVE.B  #$4C, (A2)+     *'L' to buffer
00001CDA  14FC 0053               1340              MOVE.B  #$53, (A2)+     *'S' to buffer
00001CDE  4EB9 00001D1E           1341              JSR     op1110MS            
00001CE4  4EF9 00001D3C           1342  endopLSM    JMP     endop1110 
00001CEA                          1343  **Right Shift Memory*************************************
00001CEA  14FC 0041               1344  opASM       MOVE.B  #$41, (A2)+     *'A' to buffer
00001CEE  14FC 0053               1345              MOVE.B  #$53, (A2)+     *'S' to buffer
00001CF2  4EB9 00001D1E           1346              JSR     op1110MS 
00001CF8  4EF9 00001D3C           1347  endopASM    JMP     endop1110 
00001CFE                          1348  
00001CFE  4EB9 0000201E           1349  op1110DS    JSR     DIR2BUFFER
00001D04  14FC 002E               1350              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001D08  4EB9 00001F1E           1351              JSR     SIZE2BUFFER
00001D0E  14FC 0020               1352              MOVE.B  #$20, (A2)+     *' ' to buffer
00001D12  14FC 0020               1353              MOVE.B  #$20, (A2)+     *' ' to buffer
00001D16  4EB9 00001E5E           1354              JSR     GETIRCOUNTER
00001D1C  4E75                    1355              RTS
00001D1E                          1356              
00001D1E  4EB9 0000201E           1357  op1110MS    JSR     DIR2BUFFER
00001D24  14FC 002E               1358              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001D28  14FC 0057               1359              MOVE.B  #$57, (A2)+     *'W' to buffer
00001D2C  14FC 0020               1360              MOVE.B  #$20, (A2)+     *' ' to buffer
00001D30  14FC 0020               1361              MOVE.B  #$20, (A2)+     *' ' to buffer
00001D34  4EB9 00001D46           1362              JSR     GETEA
00001D3A  4E75                    1363              RTS
00001D3C                          1364  
00001D3C  4E75                    1365  endop1110   RTS
00001D3E                          1366  *===========================================================
00001D3E                          1367  
00001D3E                          1368  ************************************************************  
00001D3E                          1369  *OPCODE: 1111
00001D3E                          1370  *BAD INSTRUCTION
00001D3E  4EF9 0000203A           1371  opcode1111: JMP     BADINST
00001D44  4E75                    1372  endop111    RTS
00001D46                          1373   *===========================================================             
00001D46                          1374  
00001D46                          1375  ************************************************************
00001D46                          1376  *  _____ _____ _____ _____ ____ _____ _____     _______      _    ____  ____  ____  _____ ____ ____  
00001D46                          1377  * | ____|  ___|  ___| ____/ ___|_   _|_ _\ \   / / ____|    / \  |  _ \|  _ \|  _ \| ____/ ___/ ___| 
00001D46                          1378  * |  _| | |_  | |_  |  _|| |     | |  | | \ \ / /|  _|     / _ \ | | | | | | | |_) |  _| \___ \___ \ 
00001D46                          1379  * | |___|  _| |  _| | |__| |___  | |  | |  \ V / | |___   / ___ \| |_| | |_| |  _ <| |___ ___) |__) |
00001D46                          1380  * |_____|_|   |_|   |_____\____| |_| |___|  \_/  |_____| /_/   \_\____/|____/|_| \_\_____|____/____/ 
00001D46                          1381  *                                                                                                   
00001D46                          1382  *GETEA
00001D46                          1383  *Description: Converts the opcode instruction EA
00001D46                          1384  * 1001 0110 0100 0001
00001D46                          1385  *             ^-----^
00001D46                          1386  *Registers Used:
00001D46                          1387  *For consistency, please utilize registers in the following way.
00001D46                          1388  *
00001D46                          1389  *D1 - utility register
00001D46                          1390  *D3 - utility register
00001D46                          1391  *D7 - copy of working address
00001D46                          1392  *
00001D46                          1393  *A2 - buffer address of decoded instruction
00001D46                          1394  *A6 - jump table
00001D46                          1395  ************************************************************
00001D46                          1396  GETEA:
00001D46  4DF9 00001D64           1397              LEA     EA_TABLE, A6
00001D4C  4283                    1398              CLR.L   D3
00001D4E  3607                    1399              MOVE.W  D7, D3
00001D50  0243 003F               1400              ANDI.W  #$003F, D3
00001D54  123C 0003               1401              MOVE.B  #3, D1
00001D58  E26B                    1402              LSR.W   D1, D3
00001D5A  C6FC 0006               1403              MULU    #6, D3
00001D5E  4EB6 3000               1404              JSR     0(A6, D3)
00001D62  4E75                    1405              RTS                     *return
00001D64                          1406  *===========================================================
00001D64                          1407  
00001D64                          1408  ************************************************************
00001D64                          1409  *GET_TABLE
00001D64                          1410  *Description: Jump table of Effective Address Modes
00001D64                          1411  ************************************************************
00001D64                          1412  EA_TABLE:       
00001D64  4EF9 00001D94           1413              JMP     eacode000
00001D6A  4EF9 00001DA6           1414              JMP     eacode001
00001D70  4EF9 00001DB8           1415              JMP     eacode010
00001D76  4EF9 00001DD2           1416              JMP     eacode011
00001D7C  4EF9 00001DF0           1417              JMP     eacode100
00001D82  4EF9 00001E0E           1418              JMP     eacode101
00001D88  4EF9 00001E14           1419              JMP     eacode110
00001D8E  4EF9 00001E1A           1420              JMP     eacode111
00001D94                          1421  *===========================================================
00001D94                          1422  
00001D94                          1423  ************************************************************
00001D94                          1424  *EA CODES
00001D94                          1425  *Description: Lsit of Effective Address Subrotines
00001D94                          1426  *000,001,010,011,100,[101],[110],111
00001D94                          1427  *Registers Used:
00001D94                          1428  *TODO
00001D94                          1429  *
00001D94                          1430  *Data Register**********************************************
00001D94  3607                    1431  eacode000   MOVE.W      D7, D3          *move to utility
00001D96  0243 0007               1432              ANDI.W      #$7, D3         *isolate
00001D9A  14FC 0044               1433              MOVE.B      #$44,(A2)+      *'D' to buffer
00001D9E  0603 0030               1434              ADD.B       #$30, D3        *convert register number to ascii
00001DA2  14C3                    1435              MOVE.B      D3,(A2)+        *to buffer                  
00001DA4  4E75                    1436  endea000    RTS                         *return
00001DA6                          1437  *Address Register*******************************************
00001DA6  3607                    1438  eacode001   MOVE.W      D7, D3          *move to utility
00001DA8  0243 0007               1439              ANDI.W      #$7, D3         *isolate
00001DAC  14FC 0041               1440              MOVE.B      #$41, (A2)+     *'A' to buffer
00001DB0  0603 0030               1441              ADD.B       #$30, D3        *convert register number to ascii
00001DB4  14C3                    1442              MOVE.B      D3,(A2)+        *to buffer  
00001DB6  4E75                    1443  endea001    RTS                         *return
00001DB8                          1444  *Address
00001DB8  3607                    1445  eacode010   MOVE.W      D7, D3          *move to utility
00001DBA  0243 0007               1446              ANDI.W      #$7, D3         *isolate
00001DBE  14FC 0028               1447              MOVE.B      #$28,(A2)+      *'(' to buffer            
00001DC2  14FC 0041               1448              MOVE.B      #$41,(A2)+      *'A' to buffer
00001DC6  0603 0030               1449              ADD.B       #$30, D3        *convert register number to ascii
00001DCA  14C3                    1450              MOVE.B      D3,(A2)+        *to buffer  
00001DCC  14FC 0029               1451              MOVE.B      #$29,(A2)+      *')' to buffe
00001DD0  4E75                    1452  endea010    RTS                         *return
00001DD2                          1453  *Address with Postincrement*********************************
00001DD2  3607                    1454  eacode011   MOVE.W      D7, D3          *move to utility
00001DD4  0243 0007               1455              ANDI.W      #$7, D3         *isolate
00001DD8  14FC 0028               1456              MOVE.B      #$28,(A2)+      *'(' to buffer            
00001DDC  14FC 0041               1457              MOVE.B      #$41,(A2)+      *'A' to buffer
00001DE0  0603 0030               1458              ADD.B       #$30, D3        *convert register number to ascii
00001DE4  14C3                    1459              MOVE.B      D3,(A2)+        *to buffer  
00001DE6  14FC 0029               1460              MOVE.B      #$29,(A2)+      *')' to buffer
00001DEA  14FC 002B               1461              MOVE.B      #$2B, (A2)+     *'+' to buffer
00001DEE  4E75                    1462  endea011    RTS                         *return
00001DF0                          1463  *Address with Predecrement**********************************
00001DF0  3607                    1464  eacode100   MOVE.W      D7, D3          *move to utility
00001DF2  0243 0007               1465              ANDI.W      #$7, D3         *isolate
00001DF6  14FC 002D               1466              MOVE.B      #$2D,(A2)+      *'-' to buffer 
00001DFA  14FC 0028               1467              MOVE.B      #$28,(A2)+      *'(' to buffer            
00001DFE  14FC 0041               1468              MOVE.B      #$41,(A2)+      *'A' to buffer
00001E02  0603 0030               1469              ADD.B       #$30, D3        *convert register number to ascii
00001E06  14C3                    1470              MOVE.B      D3,(A2)+        *to buffer  
00001E08  14FC 0029               1471              MOVE.B      #$29,(A2)+      *')' to buffe
00001E0C  4E75                    1472  endea100    RTS                         *return
00001E0E                          1473  *Bad Instruction********************************************
00001E0E  4EF9 0000203A           1474  eacode101   JMP         BADINST
00001E14                          1475  *Bad Instruction********************************************
00001E14  4EF9 0000203A           1476  eacode110   JMP         BADINST
00001E1A                          1477  *Immediate*Absolute*****************************************
00001E1A  4EB9 00001E42           1478  eacode111   JSR         GETREGISTER     *isolate register bit
00001E20  0C03 0000               1479              CMPI.B      #$0, D3         *word?
00001E24  6700 0166               1480              BEQ         WORD2BUFFER
00001E28  0C03 0001               1481              CMPI.B      #$1, D3         *long?
00001E2C  6700 018A               1482              BEQ         LONG2BUFFER
00001E30  0C03 0004               1483              CMPI.B      #$4, D3         *Immediate Data?
00001E34  6700 01AE               1484              BEQ         IMM2BUFER
00001E38  0C03 0002               1485              CMPI.B      #$2, D3         *PC?
00001E3C  6700 01FC               1486              BEQ         BADINST
00001E40  4E75                    1487  endea111    RTS                         *return
00001E42                          1488  *===========================================================
00001E42                          1489  
00001E42                          1490  ************************************************************
00001E42                          1491  *GETREGISTER
00001E42                          1492  *Description: Converts register bit and stores in D3
00001E42                          1493  ************************************************************ 
00001E42                          1494  GETREGISTER:
00001E42  3607                    1495              MOVE.W  D7, D3
00001E44  0243 0007               1496              ANDI.W  #$07, D3
00001E48  4E75                    1497  endrb       RTS
00001E4A                          1498  *===========================================================
00001E4A                          1499  
00001E4A                          1500  ************************************************************
00001E4A                          1501  *GETSIZE
00001E4A                          1502  *Description: Returns the size of the bit in 6-7 (.B, .W, .L)
00001E4A                          1503  * 1001 0110 0100 0001
00001E4A                          1504  *       ^^--------->|
00001E4A                          1505  *Registers Used:
00001E4A                          1506  *D3 - size bit
00001E4A                          1507  *D7 - copy of instruction
00001E4A                          1508  ************************************************************
00001E4A                          1509  GETSIZE:
00001E4A  3607                    1510              MOVE.W  D7, D3          *move to utility
00001E4C  EC4B                    1511              LSR.W   #6, D3          *shift
00001E4E  0243 0003               1512              ANDI.W  #$0003, D3      *isolate
00001E52  4E75                    1513  endGS       RTS                     *return
00001E54                          1514  *===========================================================
00001E54                          1515  
00001E54                          1516  ************************************************************
00001E54                          1517  *GETDIRECTION
00001E54                          1518  *Description: Finds direction of the instruction and sets it to the utility register
00001E54                          1519  * 1001 0110 0100 0001
00001E54                          1520  *         ^-------->|
00001E54                          1521  *Registers Used:
00001E54                          1522  *D3 - size bit
00001E54                          1523  *D7 - copy of instruction 
00001E54                          1524  ************************************************************
00001E54                          1525  GETDIRECTION:
00001E54  3607                    1526              MOVE.W  D7, D3          *move to utility
00001E56  E08B                    1527              LSR.L   #8, D3          *shift 8
00001E58  0203 0001               1528              ANDI.B  #01, D3         *isolate 8th bit
00001E5C  4E75                    1529  endgd       RTS                     *return
00001E5E                          1530  *===========================================================
00001E5E                          1531  
00001E5E                          1532  ************************************************************
00001E5E                          1533  *GETIRCOUNTER
00001E5E                          1534  *Description: Finds i/r field of the instruction and sets it
00001E5E                          1535  *             to the utility register.
00001E5E                          1536  * 1001 0110 0100 0001
00001E5E                          1537  *              ^
00001E5E                          1538  *Registers Used:
00001E5E                          1539  *D3 - size bit
00001E5E                          1540  *D7 - copy of instruction 
00001E5E                          1541  ************************************************************
00001E5E                          1542  GETIRCOUNTER:
00001E5E  3607                    1543              MOVE.W  D7, D3          *move to utility
00001E60  EA8B                    1544              LSR.L   #5, D3          *shift
00001E62  0243 0001               1545              ANDI.W  #$0001, D3      *isolate
00001E66  0C03 0000               1546              CMPI.B  #%0, D3         *
00001E6A  6700 000C               1547              BEQ     IRCOUNT
00001E6E  14FC 0044               1548              MOVE.B  #$44, (A2)+     *'D' to buffer
00001E72  4EF9 00001E7C           1549              JMP     IRSIZE
00001E78  14FC 0023               1550  IRCOUNT     MOVE.B  #$23, (A2)+     *'#' to buffer
00001E7C  4EB9 00001F0C           1551  IRSIZE      JSR     REG2BUFFER
00001E82  14FC 002C               1552              MOVE.B  #$2C, (A2)+     *',' to buffer
00001E86  14FC 0044               1553              MOVE.B  #$44, (A2)+     *'D' to buffer
00001E8A  3607                    1554              MOVE.W  D7, D3          *move to utility
00001E8C  0243 0007               1555              ANDI.W  #$0007, D3
00001E90  0603 0030               1556              ADD.B   #$30, D3
00001E94  14C3                    1557              MOVE.B  D3, (A2)+
00001E96  4E75                    1558  endIRC      RTS                     *return
00001E98                          1559  *===========================================================
00001E98                          1560  
00001E98                          1561  ************************************************************
00001E98                          1562  *SWAPREG         
00001E98                          1563  *Description: For double EA move instructions, swaps registers to use EA jump table
00001E98                          1564  *Registers Used:
00001E98                          1565  *D3 - size bit
00001E98                          1566  *D4 - hold register for swap bits
00001E98                          1567  *D7 - swapped EA mode 
00001E98                          1568  SWAPREG:
00001E98  4283                    1569              CLR.L   D3              *
00001E9A  3607                    1570              MOVE.W  D7,D3           *move to utility
00001E9C  E04B                    1571              LSR.W   #8,D3           *shift
00001E9E  E24B                    1572              LSR.W   #1,D3           *shift
00001EA0  0243 0007               1573              ANDI.W  #$0007,D3       *
00001EA4  8843                    1574              OR.W    D3,D4           *store bits for swap
00001EA6  3607                    1575              MOVE.W  D7,D3           *move to utility
00001EA8  E64B                    1576              LSR.W   #3,D3           *shift bits 6-8 to normal ea position
00001EAA  0243 0038               1577              ANDI.W  #$0038, D3
00001EAE  8843                    1578              OR.W    D3,D4           *
00001EB0  4EB9 00001EBA           1579              JSR     srSize          *get mode size
00001EB6  3E04                    1580              MOVE.W  D4,D7           *load swap register
00001EB8  4E75                    1581  endswap     RTS                     *return
00001EBA                          1582  
00001EBA  3607                    1583  srSize      MOVE.W  D7,D3           *move to utility
00001EBC  E04B                    1584              LSR.W   #8,D3           *shift
00001EBE  E84B                    1585              LSR.W   #4,D3           *
00001EC0  0243 0003               1586              ANDI.W  #$0003,D3       *isolate
00001EC4  B63C 0001               1587              CMP.B   #$1,D3          *byte?
00001EC8  6700 0020               1588              BEQ     endsr           *yes
00001ECC  B63C 0002               1589              CMP.B   #$2,D3          *long?
00001ED0  6700 0014               1590              BEQ     srL             *yes
00001ED4  B63C 0003               1591              CMP.B   #$3,D3          *word?
00001ED8  6600 0160               1592              BNE     BADINST         *No? bad instrustion        
00001EDC  0044 0040               1593  srW         ORI.W   #$0040,D4       *add size
00001EE0  4EF9 00001EEA           1594              JMP     endsr           *
00001EE6  0044 0080               1595  srL         ORI.W   #$0080,D4       *add size
00001EEA  4E75                    1596  endsr       RTS                     *return
00001EEC                          1597  *===========================================================
00001EEC                          1598  
00001EEC                          1599  SHIFT:       
00001EEC  E8AB                    1600              LSR.L   D4,D3               
00001EEE  0243 000F               1601              ANDI.W  #$000F,D3
00001EF2  4E75                    1602  endSHFIT    RTS
00001EF4                          1603  
00001EF4                          1604  ************************************************************
00001EF4                          1605  *  ____  _   _ _____ _____ _____ ____ 
00001EF4                          1606  * | __ )| | | |  ___|  ___| ____|  _ \ 
00001EF4                          1607  * |  _ \| | | | |_  | |_  |  _| | |_) | 
00001EF4                          1608  * | |_) | |_| |  _| |  _| | |___|  _ <  
00001EF4                          1609  * |____/ \___/|_|   |_|   |_____|_| \_\ 
00001EF4                          1610  *
00001EF4                          1611  *BUFFER SUBROUTINES                                                                                 
00001EF4                          1612  *Description: Puts word to print buffer
00001EF4                          1613  *D3 - Utility register
00001EF4                          1614  *D6 - Counter
00001EF4                          1615  *A0 - Utility address
00001EF4                          1616  *A2 - Address buffer
00001EF4                          1617  *NOTES:
00001EF4                          1618  *Adding chars to the buffer a byte at a time seems to work the best
00001EF4                          1619  *Adding words or longwords can sometimes land on odd memory address
00001EF4                          1620  *which do no allow memory to be written to.  To combat this, move
00001EF4                          1621  *chars as bytes.  Tideous, but effective.
00001EF4                          1622  *EXAMPLE:   MOVE.B  #$20, (A2)+     *' ' to buffer
00001EF4                          1623  *----------------------------------------------------------- 
00001EF4                          1624  
00001EF4                          1625  ************************************************************
00001EF4                          1626  *HEX2ASCII
00001EF4                          1627  *Description: Converts bit to ASCII and send to buffer
00001EF4                          1628  ************************************************************            
00001EF4                          1629  HEX2ASCII:  
00001EF4  B63C 000A               1630              CMP.B       #$A, D3     *hex char?
00001EF8  6C00 000A               1631              BGE         letter      *letter?
00001EFC  0603 0030               1632  number      ADDI.B      #$30,D3     *convert to ASCII
00001F00  6000 0006               1633              BRA         W2B         *
00001F04  0603 0037               1634  letter      ADDI.B      #$37,D3     *
00001F08  14C3                    1635  W2B         MOVE.B      D3,(A2)+    *to buffer
00001F0A  4E75                    1636  endH2A      RTS                     *return
00001F0C                          1637  *===========================================================   
00001F0C                          1638  
00001F0C                          1639  ************************************************************
00001F0C                          1640  *REG2BUFFER
00001F0C                          1641  *Description: Finds the register size and sends it to the output buffer
00001F0C                          1642  * 1001 0110 0100 0001
00001F0C                          1643  *      ^-^--------->|
00001F0C                          1644  *Registers Used:
00001F0C                          1645  *D3 - size bit
00001F0C                          1646  *D7 - copy of instruction
00001F0C                          1647  *A2 - buffer address of decoded instruction          
00001F0C                          1648  ************************************************************
00001F0C                          1649  REG2BUFFER:
00001F0C  3607                    1650              MOVE.W  D7,D3            *move to utility
00001F0E  E08B                    1651              LSR.L   #8,D3            *shift
00001F10  E28B                    1652              LSR.L   #1,D3            *shift
00001F12  0203 0007               1653              ANDI.B  #$7,D3           *isolate last 7 bits for register number
00001F16  0603 0030               1654              ADD.B   #$30,D3          *convert register number to ascii
00001F1A  14C3                    1655              MOVE.B  D3,(A2)+         *to buffer
00001F1C  4E75                    1656  endR2B      RTS                      *return
00001F1E                          1657  *===========================================================
00001F1E                          1658  
00001F1E                          1659  ************************************************************
00001F1E                          1660  *SIZE2BUFFER
00001F1E                          1661  *Description: Isolates and converts the instruction size and sends it to the output buffer
00001F1E                          1662  *             Byte, word, long read word in memory for instructions that utilize immediate
00001F1E                          1663  *             data.  At the end of the instruction, the working memory address is advanced.
00001F1E                          1664  *Registers Used:
00001F1E                          1665  *D3 - size bit
00001F1E                          1666  *A2 - buffer address of decoded instruction
00001F1E                          1667  ************************************************************
00001F1E                          1668  SIZE2BUFFER:
00001F1E  4EB8 1E4A               1669              JSR     GETSIZE         *get the size of bit
00001F22  B63C 0000               1670              CMP.B   #%00, D3        *byte
00001F26  6700 001E               1671              BEQ     s2bB            *
00001F2A  B63C 0001               1672              CMP.B   #%01, D3        *word
00001F2E  6700 0020               1673              BEQ     s2bW            *
00001F32  B63C 0002               1674              CMP.B   #%10, D3        *long
00001F36  6700 0022               1675              BEQ     s2bL            *
00001F3A  4EF9 0000203A           1676              JMP     BADINST         *bad instruction
00001F40  4EF9 00001F5E           1677              JMP     ends2b          *
00001F46                          1678              
00001F46  14FC 0042               1679  s2bB        MOVE.B  #$42,(A2)+      *'B' to buffer
00001F4A  4EF9 00001F5E           1680              JMP     ends2b          *
00001F50  14FC 0057               1681  s2bW        MOVE.B  #$57,(A2)+      *'W' to buffer
00001F54  4EF9 00001F5E           1682              JMP     ends2b          *
00001F5A  14FC 004C               1683  s2bL        MOVE.B  #$4C,(A2)+      *'L' to buffer
00001F5E  4E75                    1684  ends2b      RTS                     *return
00001F60                          1685  *===========================================================
00001F60                          1686  
00001F60                          1687  ************************************************************
00001F60                          1688  *BYTE2BUFFER
00001F60                          1689  *Description: Converts a byte in memory to ASCII and sends it
00001F60                          1690  *            to the buffer.
00001F60                          1691  *Buffer: $XX
00001F60                          1692  *Registers Used:
00001F60                          1693  *D2 - utility register
00001F60                          1694  *D3 - utility register
00001F60                          1695  *D4 - counter
00001F60                          1696  *A0 - working address
00001F60                          1697  *A2 - buffer address of decoded instruction
00001F60                          1698  ************************************************************
00001F60                          1699  BYTE2BUFFER:  
00001F60  14FC 0024               1700              MOVE.B  #$24, (A2)+     *'$' to buffer
00001F64  4284                    1701              CLR.L       D4                  *clear counter
00001F66                          1702              *ADDQ.W      #2, A0
00001F66  3410                    1703              MOVE.W      (A0), D2
00001F68  183C 0002               1704              MOVE.B      #2, D4              *load counter
00001F6C                          1705  **LOOP******************************************************
00001F6C                          1706  B2BLoop                 
00001F6C  B83C 0000               1707              CMP.B      #$0, D4            *end?
00001F70  6700 0014               1708              BEQ         endB2B             *
00001F74  E91A                    1709              ROL.B       #4, D2             *roll bits
00001F76  3602                    1710              MOVE.W      D2, D3             *move to utility
00001F78  0243 000F               1711              ANDI.W      #$000F, D3          *isolate  
00001F7C  4EB8 1EF4               1712              JSR         HEX2ASCII           *load ascii char into buffer            
00001F80  5304                    1713              SUBQ.B      #$1, D4             *subtract from counter
00001F82  4EF8 1F6C               1714              JMP         B2BLoop             *keep looping until counter hits zero
00001F86                          1715              
00001F86  3607                    1716  endB2B      MOVE.W      D7, D3              *load from utility            
00001F88  5448                    1717              ADDQ.W      #2, A0              *advancing memory pointer by word  
00001F8A  4E75                    1718              RTS                             *return
00001F8C                          1719  *===========================================================
00001F8C                          1720  
00001F8C                          1721  ************************************************************
00001F8C                          1722  *WORD2BUFFER
00001F8C                          1723  *Description: Converts a word in memory to ASCII and sends it
00001F8C                          1724  *            to the buffer.
00001F8C                          1725  *Buffer: $XXXX
00001F8C                          1726  *Registers Used:
00001F8C                          1727  *D2 - utility register
00001F8C                          1728  *D3 - utility register
00001F8C                          1729  *D4 - counter
00001F8C                          1730  *A0 - working address
00001F8C                          1731  *A2 - buffer address of decoded instruction
00001F8C                          1732  ************************************************************
00001F8C                          1733  WORD2BUFFER: 
00001F8C  14FC 0024               1734              MOVE.B  #$24, (A2)+     *'$' to buffer
00001F90  4284                    1735              CLR.L   D4
00001F92                          1736              *ADDQ.W  #2, A0                  *clear counter
00001F92  3410                    1737              MOVE.W  (A0), D2            
00001F94  183C 0004               1738              MOVE.B  #4, D4              *load counter
00001F98                          1739  **LOOP******************************************************
00001F98                          1740  W2BLoop                 
00001F98  B83C 0000               1741              CMP.B       #$00, D4            *end?
00001F9C  6700 0014               1742              BEQ         endW2B              *
00001FA0  E95A                    1743              ROL.W       #4, D2              *roll the bits in D2 to the left
00001FA2  3602                    1744              MOVE.W      D2, D3              *move rolled bits into temp storage
00001FA4  0243 000F               1745              ANDI.W      #$000F, D3          *and the bits to isolate ascii char   
00001FA8  4EB8 1EF4               1746              JSR         HEX2ASCII           *load ascii char into buffer            
00001FAC  5304                    1747              SUBQ.B      #$1, D4             *subtract from counter
00001FAE  4EF8 1F98               1748              JMP         W2BLoop             *keep looping until counter hits zero
00001FB2                          1749         
00001FB2  3607                    1750  endW2B      MOVE.W      D7, D3              *load from utility            
00001FB4  5448                    1751              ADDQ.W      #2, A0              *advancing memory pointer by word   
00001FB6  4E75                    1752              RTS                             *return
00001FB8                          1753  *===========================================================
00001FB8                          1754   
00001FB8                          1755  ************************************************************
00001FB8                          1756  *LONG2BUFFER
00001FB8                          1757  *Description: Converts a long word in memory to ASCII and sends
00001FB8                          1758  *            it to the buffer.
00001FB8                          1759  *Buffer: $XXXXXXXX
00001FB8                          1760  *Registers Used:
00001FB8                          1761  *D2 - utility register
00001FB8                          1762  *D3 - utility register
00001FB8                          1763  *D4 - counter
00001FB8                          1764  *A0 - working address
00001FB8                          1765  *A2 - buffer address of decoded instruction
00001FB8                          1766  ************************************************************           
00001FB8                          1767  LONG2BUFFER:
00001FB8  14FC 0024               1768              MOVE.B  #$24, (A2)+     *'$' to buffer
00001FBC  4284                    1769              CLR.L       D4          *clear counter
00001FBE                          1770              *ADDQ.W      #2, A0     *clear counter
00001FBE  2410                    1771              MOVE.L      (A0), D2 
00001FC0  183C 0008               1772              MOVE.B      #8, D4      *load counter
00001FC4                          1773  **LOOP******************************************************
00001FC4                          1774  L2BLoop                 
00001FC4  B83C 0000               1775              CMP.B       #$00, D4    *end?
00001FC8  6700 0014               1776              BEQ         endL2B      *
00001FCC  E99A                    1777              ROL.L       #4, D2      *
00001FCE  3602                    1778              MOVE.W      D2, D3      *
00001FD0  0243 000F               1779              ANDI.W      #$000F, D3  *isolate
00001FD4  4EB8 1EF4               1780              JSR         HEX2ASCII   *to buffer           
00001FD8  5304                    1781              SUBQ.B      #$1, D4     *subtract from counter
00001FDA  4EF8 1FC4               1782              JMP         L2BLoop     *loop
00001FDE                          1783              
00001FDE  3607                    1784  endL2B      MOVE.W      D7, D3      *load from utility           
00001FE0  5848                    1785              ADDQ.W      #4, A0      *advancing memory pointer by word  
00001FE2  4E75                    1786              RTS  
00001FE4                          1787  *===========================================================
00001FE4                          1788             
00001FE4                          1789  ************************************************************
00001FE4                          1790  *IMM2BUFER
00001FE4                          1791  *Description: Converts immediate data and sends to buffer
00001FE4                          1792  *Registers Used:
00001FE4                          1793  *D3 - utility register
00001FE4                          1794  *A2 - buffer address of decoded instruction
00001FE4                          1795  ************************************************************ 
00001FE4                          1796  IMM2BUFER:
00001FE4  14FC 0023               1797              MOVE.B  #$23, (A2)+     *'#' to buffer
00001FE8  4EB8 1EBA               1798              JSR     srSize          *get bit size
00001FEC  0C03 0001               1799              CMPI.B  #%01, D3        *byte?
00001FF0  6700 FF6E               1800              BEQ     BYTE2BUFFER     *
00001FF4  0C03 0003               1801              CMPI.B  #%11, D3        *word?
00001FF8  6792                    1802              BEQ     WORD2BUFFER     *
00001FFA  0C03 0002               1803              CMPI.B  #%10, D3        *long?
00001FFE  67B8                    1804              BEQ     LONG2BUFFER     *
00002000  4E75                    1805  endI2B      RTS                     *return
00002002                          1806  *===========================================================  
00002002                          1807  
00002002                          1808  ************************************************************
00002002                          1809  *ADDR2BUFFER
00002002                          1810  *Description: Converts immediate data and sends to buffer
00002002                          1811  *Registers Used:
00002002                          1812  *D3 - utility register
00002002                          1813  *A2 - buffer address of decoded instruction
00002002                          1814  ************************************************************ 
00002002                          1815  ADDR2BUFFER:
00002002  14FC 0023               1816              MOVE.B  #$23, (A2)+     *'#' to buffer
00002006  0C03 0000               1817              CMPI.B  #%00, D3        *byte?
0000200A  6700 FF54               1818              BEQ     BYTE2BUFFER     *
0000200E  0C03 0001               1819              CMPI.B  #%01, D3        *word?
00002012  6700 FF78               1820              BEQ     WORD2BUFFER     *
00002016  0C03 0003               1821              CMPI.B  #%11, D3        *long?
0000201A  679C                    1822              BEQ     LONG2BUFFER     *
0000201C  4E75                    1823  endA2B      RTS                     *return
0000201E                          1824  *=========================================================== 
0000201E                          1825  
0000201E                          1826  ************************************************************
0000201E                          1827  *DIR2BUFFER
0000201E                          1828  *Description: Send direction to buffer
0000201E                          1829  *Registers Used:
0000201E                          1830  *D3 - utility register
0000201E                          1831  *A2 - buffer address of decoded instruction
0000201E                          1832  ************************************************************ 
0000201E                          1833  DIR2BUFFER:
0000201E  4EB8 1E54               1834              JSR     GETDIRECTION
00002022  0C03 0000               1835              CMPI.B  #%0, D3
00002026  6700 000C               1836              BEQ     D2DR
0000202A  14FC 004C               1837              MOVE.B  #$4C, (A2)+     *'L' to buffer
0000202E  4EF9 00002038           1838              JMP     endD2B      
00002034  14FC 0052               1839  D2DR        MOVE.B  #$52, (A2)+     *'R' to buffer
00002038  4E75                    1840  endD2B      RTS                     *return
0000203A                          1841  *===========================================================       
0000203A                          1842  
0000203A                          1843  ************************************************************
0000203A                          1844  *BADINST
0000203A                          1845  *Description: A bad instruction has been called, print to console
0000203A                          1846  *Buffer: '$0x00000000   DATA    BadWord'
0000203A                          1847  *Registers Used:
0000203A                          1848  *D3 - utility register
0000203A                          1849  *D5 - flag condition
0000203A                          1850  *A2 - buffer address of decoded instruction
0000203A                          1851  *A2 - working address
0000203A                          1852  ************************************************************
0000203A                          1853  BADINST:
0000203A                          1854  **ADDRESS***************************************************
0000203A  1A3C 0000               1855              MOVE.B  #0, D5          *set flag to bad for double EA check
0000203E  45F9 00009000           1856              LEA     buf, A2         *reload buffer
00002044  4EB8 11EA               1857              JSR     ADDRESS         *address to buffer
00002048                          1858  **DATA******************************************************        
00002048  14FC 0044               1859              MOVE.B  #$44,(A2)+      *'D' to buffer
0000204C  14FC 0041               1860              MOVE.B  #$41,(A2)+      *'A' to buffer
00002050  14FC 0054               1861              MOVE.B  #$54,(A2)+      *'T' to buffer
00002054  14FC 0041               1862              MOVE.B  #$41,(A2)+      *'A' to buffer
00002058  14FC 0009               1863              MOVE.B  #$9, (A2)+      *tab buffer
0000205C  14FC 0024               1864              MOVE.B  #$24,(A2)+      *'$' to buffer
00002060                          1865  **BAD WORD**************************************************            
00002060  3610                    1866              MOVE.W  (A0), D3        *
00002062  183C 000C               1867              MOVE.B  #12, D4         *$1254
00002066  4EB8 1EEC               1868              JSR     SHIFT           * ^
0000206A  4EB8 1EF4               1869              JSR     Hex2ASCII       *to ASCII
0000206E  3610                    1870              MOVE.W  (A0), D3        *
00002070  183C 0008               1871              MOVE.B  #8, D4          *$1254
00002074  4EB8 1EEC               1872              JSR     SHIFT           *  ^
00002078  4EB8 1EF4               1873              JSR     Hex2ASCII       *to ASCII
0000207C  3610                    1874              MOVE.W  (A0), D3        *
0000207E  183C 0004               1875              MOVE.B  #4, D4          *$1254
00002082  4EB8 1EEC               1876              JSR     SHIFT           *   ^
00002086  4EB8 1EF4               1877              JSR     Hex2ASCII       *to ASCII
0000208A  3610                    1878              MOVE.W  (A0), D3        *$1254
0000208C  0243 000F               1879              ANDI.W  #$000F, D3      *    ^
00002090  4EB8 1EF4               1880              JSR     Hex2ASCII       *to ASCII
00002094                          1881              
00002094  5278 0900               1882              ADD     #1, badInstCount    
00002098  4E75                    1883  endbadinst  RTS                     *return
0000209A                          1884  *===========================================================    
0000209A                          1885  
0000209A                          1886  ************************************************************
0000209A                          1887  *  _____ _   _ ____      ____ ___ __  __ 
0000209A                          1888  * | ____| \ | |  _ \    / ___|_ _|  \/  |
0000209A                          1889  * |  _| |  \| | | | |   \___ \| || |\/| |
0000209A                          1890  * | |___| |\  | |_| |    ___) | || |  | |
0000209A                          1891  * |_____|_| \_|____/    |____/___|_|  |_|
0000209A                          1892  *                                       
0000209A                          1893  *END
0000209A                          1894  *Description: Ends program
0000209A                          1895  ************************************************************          
0000209A                          1896  END:        
0000209A  103C 000E               1897              MOVE.B  #14, D0         *load bad instruction count
0000209E  43F9 00002BB5           1898              LEA     strBadInst, A1  
000020A4  4E4F                    1899              TRAP    #15
000020A6                          1900  
000020A6  1238 0900               1901              MOVE.B  badInstCount, D1 *display
000020AA  103C 0003               1902              MOVE.B  #3, D0
000020AE  4E4F                    1903              TRAP    #15
000020B0                          1904              
000020B0  4EB8 107E               1905              JSR     dis_cr          *carriage return
000020B4                          1906  
000020B4                          1907  **display y/n***********************************************
000020B4  103C 000E               1908  dis_yncont  MOVE.B  #task14, D0
000020B8  43F9 0000277A           1909              LEA     str_yncont, A1
000020BE  4E4F                    1910              TRAP    #15
000020C0                          1911              
000020C0  103C 0005               1912              MOVE.B  #5, D0           Trap task 4 does the following:
000020C4  4E4F                    1913              TRAP    #15 
000020C6  1401                    1914              MOVE.B  D1, D2
000020C8  B43C 0059               1915              CMP.B   #$59, D2
000020CC                          1916              
000020CC  6700 000E               1917              BEQ     jumpmain   
000020D0  B43C 0079               1918              CMP.B   #$79, D2
000020D4  6600 000A               1919              BNE     therealend  
000020D8  4EB8 107E               1920              JSR     dis_cr
000020DC  4EF8 1004               1921  jumpmain    JMP     main
000020E0                          1922              
000020E0  103C 000D               1923  therealend  MOVE.B  #13,D0          *load end string
000020E4  43F9 000027B8           1924              LEA     str_end,A1      *load string
000020EA  4E4F                    1925              TRAP    #15             *display
000020EC  FFFF FFFF               1926              SIMHALT              
000020F0                          1927  *===========================================================
000020F0                          1928           
000020F0                          1929  *-----------------------------------------------------------
000020F0                          1930  *variables
000020F0                          1931  *-----------------------------------------------------------
000020F0= 20 20 20 20 20 20 ...   1932  intro       dc.b '          66666666        888888888     KKKKKKKKK    KKKKKKK',CR,LF 
0000212E= 20 20 20 20 20 20 ...   1933              dc.b '         6::::::6       88:::::::::88   K:::::::K    K:::::K',CR,LF
0000216C= 20 20 20 20 20 20 ...   1934              dc.b '        6::::::6      88:::::::::::::88 K:::::::K    K:::::K',CR,LF
000021AA= 20 20 20 20 20 20 ...   1935              dc.b '       6::::::6      8::::::88888::::::8K:::::::K   K::::::K',CR,LF
000021E8= 20 20 20 20 20 20 ...   1936              dc.b '      6::::::6       8:::::8     8:::::8KK::::::K  K:::::KKK',CR,LF
00002226= 20 20 20 20 20 36 ...   1937              dc.b '     6::::::6        8:::::8     8:::::8  K:::::K K:::::K   ',CR,LF
00002264= 20 20 20 20 36 3A ...   1938              dc.b '    6::::::6          8:::::88888:::::8   K::::::K:::::K    ',CR,LF
000022A2= 20 20 20 36 3A 3A ...   1939              dc.b '   6::::::::66666      8:::::::::::::8    K:::::::::::K     ',CR,LF
000022E0= 20 20 36 3A 3A 3A ...   1940              dc.b '  6::::::::::::::66   8:::::88888:::::8   K:::::::::::K     ',CR,LF
0000231E= 20 20 36 3A 3A 3A ...   1941              dc.b '  6::::::66666:::::6 8:::::8     8:::::8  K::::::K:::::K    ',CR,LF
0000235C= 20 20 36 3A 3A 3A ...   1942              dc.b '  6:::::6     6:::::68:::::8     8:::::8  K:::::K K:::::K   ',CR,LF    
0000239A= 20 20 36 3A 3A 3A ...   1943              dc.b '  6:::::6     6:::::68:::::8     8:::::8KK::::::K  K:::::KKK',CR,LF     
000023D8= 20 20 36 3A 3A 3A ...   1944              dc.b '  6::::::66666::::::68::::::88888::::::8K:::::::K   K::::::K',CR,LF     
00002416= 20 20 20 36 36 3A ...   1945              dc.b '   66:::::::::::::66  88:::::::::::::88 K:::::::K    K:::::K',CR,LF
00002454= 20 20 20 20 20 36 ...   1946              dc.b '     66:::::::::66      88:::::::::88   K:::::::K    K:::::K',CR,LF
00002492= 20 20 20 20 20 20 ...   1947              dc.b '       666666666          888888888     KKKKKKKKK    KKKKKKK',CR,LF
000024D0= 20 20 20 20 20 20 ...   1948              dc.b '                                                            ',CR,LF  
0000250E= 20 20 20 20 20 20 ...   1949              dc.b '                                                            ',CR,LF  
0000254C= 20 20 20 5F 5F 5F ...   1950              dc.b '   ___  ___________   ______________  ______  __   _______  ',CR,LF 
0000258A= 20 20 2F 20 5F 20 ...   1951              dc.b '  / _ \/  _/ __/ _ | / __/ __/ __/  |/  / _ )/ /  / __/ _ \ ',CR,LF 
000025C8= 20 2F 20 2F 2F 20 ...   1952              dc.b ' / // // /_\ \/ __ |_\ \_\ \/ _// /|_/ / _  / /__/ _// , _/ ',CR,LF 
00002606= 2F 5F 5F 5F 5F 2F ...   1953              dc.b '/____/___/___/_/ |_/___/___/___/_/  /_/____/____/___/_/|_|  ',CR,LF 
00002644= 20 20 20 20 20 20 ...   1954              dc.b '                                                            ',CR,LF                                        
00002682= 20 20 20 20 20 20 ...   1955              dc.b '                                                            ',0,CR,LF 
000026C1                          1956              
000026C2= 05D2                    1957  i_length    dc.w    i_length-intro
000026C4                          1958  
000026C4= 45 6E 74 65 72 20 ...   1959  srt_addr    dc.b    'Enter starting address: $',0
000026DE= 001A                    1960  s_len       dc.w    s_len-srt_addr
000026E0                          1961  
000026E0= 45 6E 74 65 72 20 ...   1962  end_addr    dc.b    'Enter ending address: $',0
000026F8= 0018                    1963  e_len       dc.w    e_len-end_addr
000026FA                          1964  
000026FA= 54 68 65 20 73 74 ...   1965  t_str_start dc.b    'The start address is: $',0
00002712= 0018                    1966  t_start     dc.w    t_start-t_str_start
00002714                          1967  
00002714= 54 68 65 20 65 6E ...   1968  t_str_end   dc.b    'The end address is: $',0
0000272A= 0016                    1969  t_end       dc.w    t_end-t_str_end
0000272C                          1970  
0000272C= 45 72 72 6F 72 3A ...   1971  str_error   dc.b    'Error: starting or ending address has error',0
00002758= 002C                    1972  err_len     dc.w    err_len-str_error 
0000275A                          1973  
0000275A= 50 72 65 73 73 20 ...   1974  str_cont    dc.b    'Press enter to continue.',0
00002774= 001A                    1975  cont_len    dc.w    cont_len-str_cont
00002776                          1976  
00002776= 00                      1977  str_cr      dc.b    '',0
00002778= 0002                    1978  cr_len      dc.w    cr_len-str_cr
0000277A                          1979  
0000277A= 57 6F 75 6C 64 20 ...   1980  str_yncont  dc.b    'Would you like to enter a new decode more memory? Y?',0
000027AF                          1981  
000027AF= 01                      1982  bufferend   dc.b    1
000027B0                          1983  print_stack ds.b    8
000027B8                          1984  
000027B8= 20 20 20 20 20 20 ...   1985  str_end     dc.b '                                                                                   ',CR,LF  
0000280D= 20 20 20 20 20 20 ...   1986              dc.b '                                                                                   ',CR,LF 
00002862= 20 20 20 20 20 20 ...   1987              dc.b '                                                                                   ',CR,LF 
000028B7= 20 20 20 20 20 20 ...   1988              dc.b '                                                                                   ',CR,LF 
0000290C= 20 20 2F 24 24 24 ...   1989              dc.b '  /$$$$$$   /$$$$$$  /$$      /$$ /$$$$$$$  /$$       /$$$$$$$$ /$$$$$$$$ /$$$$$$$$',CR,LF
00002961= 20 2F 24 24 5F 5F ...   1990              dc.b ' /$$__  $$ /$$__  $$| $$$    /$$$| $$__  $$| $$      | $$_____/|__  $$__/| $$_____/',CR,LF
000029B6= 7C 20 24 24 20 20 ...   1991              dc.b '| $$  \__/| $$  \ $$| $$$$  /$$$$| $$  \ $$| $$      | $$         | $$   | $$      ',CR,LF
00002A0B= 7C 20 24 24 20 20 ...   1992              dc.b '| $$      | $$  | $$| $$ $$/$$ $$| $$$$$$$/| $$      | $$$$$      | $$   | $$$$$   ',CR,LF
00002A60= 7C 20 24 24 20 20 ...   1993              dc.b '| $$      | $$  | $$| $$  $$$| $$| $$____/ | $$      | $$__/      | $$   | $$__/   ',CR,LF
00002AB5= 7C 20 24 24 20 20 ...   1994              dc.b '| $$    $$| $$  | $$| $$\  $ | $$| $$      | $$      | $$         | $$   | $$      ',CR,LF
00002B0A= 7C 20 20 24 24 24 ...   1995              dc.b '|  $$$$$$/|  $$$$$$/| $$ \/  | $$| $$      | $$$$$$$$| $$$$$$$$   | $$   | $$$$$$$$',CR,LF
00002B5F= 20 5C 5F 5F 5F 5F ...   1996              dc.b ' \______/  \______/ |__/     |__/|__/      |________/|________/   |__/   |________/',0,CR,LF
00002BB5                          1997  
00002BB5= 20 20 20 20 20 20 ...   1998  strBadInst      dc.b    '                            ',CR,LF
00002BD3= 20 20 20 20 20 20 ...   1999                  dc.b    '                            ',CR,LF
00002BF1= 20 20 20 20 20 20 ...   2000                  dc.b    '                            ',CR,LF
00002C0F= 4E 75 6D 62 65 72 ...   2001                  dc.b    'Number of bad instructions: ',0
00002C2C                          2002  *badInstCount    ds.w    0
00002C2C                          2003  *v_srt_add   ds.l    1               *store start address
00002C2C                          2004  *v_end_add   ds.l    1               *store end address
00002C2C                          2005  *v_test      ds.l    1               *start a temp value
00002C2C                          2006  
00002C2C                          2007  
00002C2C                          2008      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDR2BUFFER         2002
ADDRESS             11EA
ADDRFILL            1212
ADDRLOOP            1218
ASCII2HEX           1128
B2BLOOP             1F6C
BADFLAG             0
BADINST             203A
BADINSTCOUNT        900
BUF                 9000
BUFFEREND           27AF
BYTE2BUFFER         1F60
CLEAR               10B2
CODE0010_CONT       13D4
CODE0010_CONT2      13DC
CODE0011_CONT       1428
CODE0011_CONT2      1430
CONT_LEN            2774
CR                  D
CR_LEN              2778
D2DR                2034
DECODE              11C4
DECODECONT          11E4
DIR2BUFFER          201E
DISP16              1906
DISP32              18E4
DISP8               191C
DIS_BADINPUT        1064
DIS_CONT            1092
DIS_CR              107E
DIS_INTRO_MSG       1050
DIS_YNCONT          20B4
EACODE000           1D94
EACODE001           1DA6
EACODE010           1DB8
EACODE011           1DD2
EACODE100           1DF0
EACODE101           1E0E
EACODE110           1E14
EACODE111           1E1A
EA_TABLE            1D64
END                 209A
ENDA2B              201C
ENDA2H              11B8
ENDADDR             1236
ENDB2B              1F86
ENDBADINST          2098
ENDBF               1238
ENDBI               107A
ENDCLEAR            10C2
ENDD2B              2038
ENDDC               10B0
ENDDECODE           11E8
ENDEA000            1DA4
ENDEA001            1DB6
ENDEA010            1DD0
ENDEA011            1DEE
ENDEA100            1E0C
ENDEA111            1E40
ENDGD               1E5C
ENDGETMWORD         1688
ENDGOP              1256
ENDGS               1E52
ENDH2A              1F0A
ENDI2B              2000
ENDINPUT            1126
ENDINTRO            1062
ENDIRC              1E96
ENDL2B              1FDE
ENDMS2B             1550
ENDOP0000           136E
ENDOP0001           13AE
ENDOP0010           1402
ENDOP0011           1456
ENDOP0100           14B0
ENDOP0100TABLE      16EA
ENDOP0100_0000      16F2
ENDOP0100_0001      16FA
ENDOP0100_0010      1720
ENDOP0100_0011      1728
ENDOP0100_0100      174E
ENDOP0100_0101      1756
ENDOP0100_0110      177C
ENDOP0100_0111      1784
ENDOP0100_1000      178C
ENDOP0100_1001      1794
ENDOP0100_1010      179C
ENDOP0100_1011      17A4
ENDOP0100_1100      17AC
ENDOP0100_1101      17B4
ENDOP0100_1110      1828
ENDOP0100_1111      1830
ENDOP0101           1838
ENDOP0110           192E
ENDOP0111           1936
ENDOP1000           19A4
ENDOP1001           1A4E
ENDOP1010           1A56
ENDOP1011           1AF2
ENDOP1100           1B7E
ENDOP1101           1C34
ENDOP111            1D44
ENDOP1110           1D3C
ENDOPADDI           1334
ENDOPANDI           131C
ENDOPASD            1C9A
ENDOPASM            1CF8
ENDOPCMPI           12FC
ENDOPEORI           1346
ENDOPJMP            1826
ENDOPJSR            180E
ENDOPLEA            14D6
ENDOPLSD            1C86
ENDOPLSM            1CE4
ENDOPNOP            17E8
ENDOPORI            130A
ENDOPROD            1C72
ENDOPROM            1CD0
ENDOPRTS            17F6
ENDOPSMEM           1CBE
ENDOPSREG           1C60
ENDOPSUBI           1322
ENDR2B              1F1C
ENDRB               1E48
ENDREG2MEM          1584
ENDS2B              1F5E
ENDSHFIT            1EF2
ENDSR               1EEA
ENDSWAP             1EB8
ENDW2B              1FB2
END_ADDR            26E0
END_CR              1090
END_LOOP            1684
ERROR               1196
ERR_LEN             2758
E_LEN               26F8
GETDIRECTION        1E54
GETEA               1D46
GETIRCOUNTER        1E5E
GETMWORD            1686
GETOPCODE           123A
GETREGISTER         1E42
GETSIZE             1E4A
GET_POST_AREG_LIST  1618
GET_POST_DREG_LIST  1652
GET_PRE_AREG_LIST   15E0
GET_PRE_DREG_LIST   15AE
GOODFLAG            1
HEX2ASCII           1EF4
IMM2BUFER           1FE4
INTRO               20F0
IRCOUNT             1E78
IRSIZE              1E7C
I_LENGTH            26C2
JUMPMAIN            20DC
L2BLOOP             1FC4
LENGTH              0
LETTER              1F04
LF                  A
LONG2BUFFER         1FB8
LOOP                1138
LOOPPOST_ALIST      1622
LOOPPOST_DLIST      165C
LOOPPRE_ALIST       15EA
LOOPPRE_DLIST       15BA
LOWER2HEX           118A
MAIN                1004
MAIN_CONT           1042
MAIN_END            104C
MAIN_INPUT          1016
MAIN_LOOP           1022
MAIN_NEXT           1034
MAXADD              FFFFFF
MEM2REG             1586
MINADD              0
MOVEMEM_TABLE       1552
MOVEMSIZE2BUFFER    1526
MS2BL               154C
MS2BW               1542
NOTMOVEM            1482
NUM2HEX             1172
NUMBER              1EFC
OP0000CONT          134C
OP0100MOVEM         14D8
OP0100TABLE         168A
OP0100_0000         16EC
OP0100_0001         16F4
OP0100_0010         16FC
OP0100_0011         1722
OP0100_0100         172A
OP0100_0101         1750
OP0100_0110         1758
OP0100_0111         177E
OP0100_1000         1786
OP0100_1001         178E
OP0100_1010         1796
OP0100_1011         179E
OP0100_1100         17A6
OP0100_1101         17AE
OP0100_1110         17B6
OP0100_1111         182A
OP1110DS            1CFE
OP1110MS            1D1E
OPADD               1BE6
OPADD01             1C20
OPADDA              1BC0
OPADDI              1328
OPADDL              1BBC
OPAND01             1B6A
OPANDI              1310
OPASD               1C8C
OPASM               1CEA
OPBCC               185A
OPBGT               1888
OPBLE               18B6
OPCMP               1AA4
OPCMPA              1A66
OPCMPI              12F0
OPCODE0000          12B8
OPCODE0001          1370
OPCODE0010          13B0
OPCODE0011          1404
OPCODE0100          1458
OPCODE0101          1832
OPCODE0110          183A
OPCODE0111          1930
OPCODE1000          1938
OPCODE1001          19A6
OPCODE1010          1A50
OPCODE1011          1A58
OPCODE1100          1AF4
OPCODE1101          1B80
OPCODE1110          1C36
OPCODE1111          1D3E
OPEOR               1AEC
OPEORI              133A
OPJMP               1810
OPJSR               17F8
OPLEA               14B2
OPLSD               1C78
OPLSM               1CD6
OPNOP               17DC
OPOR                194E
OPOR01              1990
OPORI               1302
OPROD               1C64
OPROM               1CC2
OPRTS               17EA
OPSMEM              1CA0
OPSREG              1C44
OPSUBI              1322
OPSUBL              19DE
OPSUBSUB            1A04
OPSUBSUBA           19E2
OPSUBSUBR           1A3A
OP_TABLE            1258
PRINTCOUNT          A
PRINTPOST_AREG_LIST  163E
PRINTPOST_DREG_LIST  1670
PRINTPRE_AREG_LIST  1606
PRINTPRE_DREG_LIST  15CE
PRINT_B             11DA
PRINT_STACK         27B0
REG2BUFFER          1F0C
REG2MEM             1560
RESUME              11A0
S2BB                1F46
S2BL                1F5A
S2BW                1F50
SHIFT               1EEC
SIZE2BUFFER         1F1E
SRL                 1EE6
SRSIZE              1EBA
SRT_ADDR            26C4
SRW                 1EDC
STACK               A000
START               1000
STRBADINST          2BB5
STR_CONT            275A
STR_CR              2776
STR_END             27B8
STR_ERROR           272C
STR_YNCONT          277A
SWAPREG             1E98
S_LEN               26DE
TASK0               0
TASK1               1
TASK13              D
TASK14              E
TASK2               2
TASK3               3
THEREALEND          20E0
T_END               272A
T_START             2712
T_STR_END           2714
T_STR_START         26FA
UPPER2HEX           117E
U_INPUT             10C4
W2B                 1F08
W2BLOOP             1F98
WORD2BUFFER         1F8C
