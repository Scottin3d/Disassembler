00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 06/04/20 11:35:35 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Scott Shirley, Carl Howing
00000000                             4  * Date       : June 6, 2020
00000000                             5  * Description: 
00000000                             6  ************************************************************
00000000                             7  
00000000                             8  ************************************************************
00000000                             9  *  ____            _     _                
00000000                            10  * |  _ \ ___  __ _(_)___| |_ ___ _ __ ___ 
00000000                            11  * | |_) / _ \/ _` | / __| __/ _ \ '__/ __|
00000000                            12  * |  _ <  __/ (_| | \__ \ ||  __/ |  \__ \
00000000                            13  * |_| \_\___|\__, |_|___/\__\___|_|  |___/
00000000                            14  *            |___/                        
00000000                            15  *Register Use
00000000                            16  *For consistency, please utilize registers in the following way.
00000000                            17  *
00000000                            18  *D0 -
00000000                            19  *D1 -
00000000                            20  *D2 - 
00000000                            21  *D3 - utility register
00000000                            22  *D4 -
00000000                            23  *D5 - flag condition
00000000                            24  *D6 - counter
00000000                            25  *D7 - copy of working address
00000000                            26  *
00000000                            27  *A0 - temp address holder
00000000                            28  *A1 - trap address
00000000                            29  *A2 - buffer address of decoded instruction
00000000                            30  *A3 -.
00000000                            31  *A4 - starting address
00000000                            32  *A5 - ending address
00000000                            33  *A6 -
00000000                            34  *A7 -
00000000                            35  ************************************************************
00000000                            36  
00000000                            37  ************************************************************
00000000                            38  * __     __         _       _     _                               _     _____ ___  _   _ 
00000000                            39  * \ \   / /_ _ _ __(_) __ _| |__ | | ___  ___      __ _ _ __   __| |   | ____/ _ \| | | |
00000000                            40  *  \ \ / / _` | '__| |/ _` | '_ \| |/ _ \/ __|    / _` | '_ \ / _` |   |  _|| | | | | | |
00000000                            41  *   \ V / (_| | |  | | (_| | |_) | |  __/\__ \   | (_| | | | | (_| |   | |__| |_| | |_| |
00000000                            42  *    \_/ \__,_|_|  |_|\__,_|_.__/|_|\___||___/    \__,_|_| |_|\__,_|   |_____\__\_\\___/ 
00000000                            43  *                                                                                        
00000000                            44  * Variables and EQUs
00000000                            45  ************************************************************
00000000  =00001000                 46  start       EQU     $1000               *start address
00000000  =0000A000                 47  stack       EQU     $A000               *stack address  
00000000  =00009000                 48  buf         EQU     $9000
00000000                            49  
00000000  =00000000                 50  minAdd      EQU     $00000000           *start of address space
00000000  =00FFFFFF                 51  maxAdd      EQU     $00FFFFFF           *end of address space
00000000                            52  
00000000  =0000000D                 53  CR          EQU     $0D                 *carriage return
00000000  =0000000A                 54  LF          EQU     $0A                 *line feed
00000000                            55  
00000000  =00000001                 56  goodflag    EQU     1                   *good flag condition
00000000  =00000000                 57  badflag     EQU     0                   *bad flag condition
00000000  =00000000                 58  length      EQU     0                   *
00000000                            59  
00000000  =0000000A                 60  printCount  EQU     10                  *number of lines printed to console before user input
00000000                            61  
00000000                            62  *TRAP tasks for preload
00000000  =00000000                 63  task0       EQU     00                  *Display string at (A1), D1.W bytes long (max 255) with carriage return and line feed (CR, LF)
00000000  =00000001                 64  task1       EQU     01                  *Display string at (A1), D1.W bytes long (max 255) without CR, LF
00000000  =00000002                 65  task2       EQU     02                  *Read string from keyboard and store at (A1), NULL terminated, length retuned in D1.W (max 80)
00000000  =00000003                 66  task3       EQU     03                  *Display signed number in D1.L in decimal in smallest field
00000000  =0000000D                 67  task13      EQU     13                  *Display the NULL terminated string at (A1) with CR, LF
00000000  =0000000E                 68  task14      EQU     14                  *Display the NULL terminated string at (A1) without CR, LF
00000000                            69  ************************************************************
00000000                            70  
00000000                            71  ************************************************************
00000000                            72  *  __  __       _       
00000000                            73  * |  \/  | __ _(_)_ __  
00000000                            74  * | |\/| |/ _` | | '_ \ 
00000000                            75  * | |  | | (_| | | | | |
00000000                            76  * |_|  |_|\__,_|_|_| |_|
00000000                            77  *                      
00000000                            78  ************************************************************
00001000                            79              ORG     start
00001000  6100 0042                 80              BSR     dis_intro_msg       *print intro message
00001004                            81              
00001004  6100 00A0                 82  main        BSR     CLEAR               *clear all registers
00001008  4FF9 0000A000             83              LEA     stack, SP           *load stack pointer
0000100E  45F9 00009000             84              LEA     buf, A2          *set buffer for input
00001014  2C4A                      85              MOVEA.L A2,A6    
00001016                            86              
00001016  6100 00A0                 87  main_input  BSR     U_INPUT             *branch to input
0000101A  BA3C 0000                 88              CMP.B   #$0, D5             *check if bad input
0000101E  6700 0038                 89              BEQ     dis_badInput        *bad flag, reinput 
00001022                            90                          
00001022  4EB9 000011B8             91  main_loop   JSR     DECODE         *prep buffer
00001028                            92  *loop checking **********************************************    
00001028  BBC8                      93              CMPA.L  A0, A5              * have we reached the end of our address range?
0000102A  6F00 0014                 94              BLE     main_end  
0000102E                            95   
0000102E  5246                      96              ADDI    #1, D6              *add counter
00001030  BC7C 000A                 97              CMP     #printcount, D6     *check loop progress
00001034  66EC                      98              BNE     main_loop
00001036                            99  
00001036  4EB9 00001086            100  main_cont   JSR     dis_cont
0000103C  4EF8 1022                101              JMP     main_loop
00001040                           102  
00001040  6100 0A3E                103  main_end    BSR     END
00001044                           104  *===========================================================
00001044                           105  
00001044                           106  *-----------------------------------------------------------
00001044                           107  *display subroutines
00001044                           108  *intro message, bad inputs, carriage return, enter2return, input test
00001044                           109  *-----------------------------------------------------------
00001044                           110  *intro message display
00001044                           111  ************************************************************
00001044                           112  dis_intro_msg
00001044  103C 000D                113              MOVE.B  #13,D0              *load task
00001048  43F9 00001A90            114              LEA     intro,A1            *load string
0000104E  3239 000020A0            115              MOVE.W  i_length,D1         *load string length 
00001054  4E4F                     116              TRAP    #15                 *display
00001056  4E75                     117  endIntro    RTS                         *return
00001058                           118  *bad input error message display****************************
00001058                           119  dis_badInput
00001058  103C 0000                120              MOVE.B  #task0,D0           *load task
0000105C  43F9 0000210A            121              LEA     str_error, A1       *load string
00001062  3239 00002136            122              MOVE.W  err_len, D1         *load string length
00001068  4E4F                     123              TRAP    #15                 *display
0000106A  1A3C 0000                124              MOVE.B  #badFlag,D5         *set flag condition to bad
0000106E  4EB8 1016                125  endBI       JSR     main_input          *return to main_input
00001072                           126  *dsiplay carriage return************************************
00001072                           127  dis_cr
00001072  103C 000D                128              MOVE.B  #task13, D0         *load task
00001076  43F9 00002154            129              LEA     str_cr, A1          *load string
0000107C  3239 00002156            130              MOVE.W  cr_len, D1          *load string length
00001082  4E4F                     131              TRAP    #15                 *display
00001084  4E75                     132  end_cr      RTS                         *return
00001086                           133  *enter2return***********************************************
00001086                           134  dis_cont   
00001086  103C 000E                135              MOVE.B  #task14, D0         *load task
0000108A  43F9 00002138            136              LEA     str_cont, A1        *load string
00001090  3239 00002152            137              MOVE.W  cont_len, D1        *load string length
00001096  4E4F                     138              TRAP    #15                 *display
00001098                           139              
00001098  103C 0002                140              MOVE.B  #task2,D0           *load task
0000109C  4E4F                     141              TRAP    #15                 *get input
0000109E                           142              
0000109E  12BC 0050                143              MOVE.B  #$50,(A1)           *reset A1
000010A2                           144              
000010A2  4246                     145              CLR     D6                  *clear counter, reset loop
000010A4  4E75                     146  endDC       RTS                         *return
000010A6                           147  *===========================================================
000010A6                           148  
000010A6                           149  ************************************************************ 
000010A6                           150  *  _   _ _____ _     ____  _____ ____  
000010A6                           151  * | | | | ____| |   |  _ \| ____|  _ \ 
000010A6                           152  * | |_| |  _| | |   | |_) |  _| | |_) |
000010A6                           153  * |  _  | |___| |___|  __/| |___|  _ < 
000010A6                           154  * |_| |_|_____|_____|_|   |_____|_| \_\
000010A6                           155  *                                      
000010A6                           156  *HELPER SUBROUTINES
000010A6                           157  *Description: These subroutines are called during teh opcode translation
000010A6                           158  ************************************************************
000010A6                           159  
000010A6                           160  ************************************************************   
000010A6                           161  *CLEAR
000010A6                           162  *Description: Clears registers of values
000010A6                           163  ************************************************************        
000010A6                           164  CLEAR:
000010A6  4240                     165              CLR     D0
000010A8  4241                     166              CLR     D1
000010AA  4242                     167              CLR     D2
000010AC  4243                     168              CLR     D3
000010AE  4244                     169              CLR     D4
000010B0  4245                     170              CLR     D5
000010B2  4246                     171              CLR     D6
000010B4  4247                     172              CLR     D7
000010B6  4E75                     173  endClear    RTS
000010B8                           174  *===========================================================
000010B8                           175  
000010B8                           176  ************************************************************
000010B8                           177  *U_INPUT
000010B8                           178  *Description: Gets input address from user for program
000010B8                           179  *D5 - Return Status
000010B8                           180  *D7 - Temparary register to store address value
000010B8                           181  *A0 - Working Address
000010B8                           182  *A4 - Start Address
000010B8                           183  *A5 - End Address
000010B8                           184  ************************************************************
000010B8                           185  U_INPUT:
000010B8  103C 0001                186              MOVE.B  #task1,D0           *
000010BC  43F9 000020A2            187              LEA     srt_addr,A1         *
000010C2  3239 000020BC            188              MOVE.W  s_len,D1            *
000010C8  4E4F                     189              TRAP    #15                 *
000010CA  D3FC 000020BC            190              ADDA.L  #s_len,A1           *
000010D0  103C 0002                191              MOVE.B  #task2,D0           *
000010D4  4E4F                     192              TRAP    #15                 *
000010D6  4EB9 0000111C            193              JSR     ASCII2HEX
000010DC  BA3C 0000                194              CMP.B   #$00,D5             *bad input?
000010E0  6700 0038                195              BEQ     endInput
000010E4                           196              *MOVE.L  D7, v_srt_add       *store to varable
000010E4  4247                     197              CLR     D7
000010E6                           198              
000010E6  2848                     199              MOVEA.L A0,A4       
000010E8  103C 0001                200              MOVE.B  #task1,D0
000010EC  43F9 000020BE            201              LEA     end_addr,A1
000010F2  3239 000020D6            202              MOVE.W  e_len,D1         
000010F8  4E4F                     203              TRAP    #15         
000010FA  D3FC 000020D6            204              ADDA.L  #e_len,A1
00001100  103C 0002                205              MOVE.B  #task2,D0
00001104  4E4F                     206              TRAP    #15
00001106  4EB9 0000111C            207              JSR     ASCII2HEX
0000110C  BA3C 0000                208              CMP.B   #$00,D5             *bad input?
00001110  6700 0008                209              BEQ     endInput
00001114                           210              *MOVE.L  D7, v_end_add        *store to varable
00001114  4247                     211              CLR     D7
00001116                           212  
00001116                           213  
00001116  2A48                     214              MOVEA.L A0,A5               *store ending to A5
00001118  204C                     215              MOVEA.L A4,A0               *store starting in A0  
0000111A                           216                    
0000111A  4E75                     217  endInput    RTS
0000111C                           218  *===========================================================
0000111C                           219  
0000111C                           220  ************************************************************
0000111C                           221  *ASCII2HEX 
0000111C                           222  *Description: Converts an ASCII character to HEX - see flowchart for logic
0000111C                           223  *D3 - Placeholder for current ascii byte
0000111C                           224  *D4 - Translated address
0000111C                           225  *D5 - Return status
0000111C                           226  *D6 - Counter (6)
0000111C                           227  *D7 - Temparary register to store address value
0000111C                           228  *A0 - Stored address at end of subroutine
0000111C                           229  ************************************************************
0000111C                           230  ASCII2HEX:
0000111C  48E7 F800                231              MOVEM.L D0-D4,-(SP)         *save data registers to the stack
00001120  4EB8 10A6                232              JSR     CLEAR
00001124  1A3C 0001                233              MOVE.B  #$01,D5             *preset flag condition to good
00001128  3C3C 0000                234              MOVE    #length,D6
0000112C                           235  
0000112C                           236  loop
0000112C  1619                     237              MOVE.B  (A1)+,D3            *
0000112E  B63C 0030                238              CMP.B   #$30,D3             *byte < 30??
00001132  6D00 0056                239              BLT     error               *
00001136                           240              
00001136  B63C 003A                241              CMP.B   #$3A,D3             *byte < 3A??
0000113A  6D00 002A                242              BLT     num2hex             *
0000113E                           243              
0000113E  B63C 0041                244              CMP.B   #$41,D3             *byte < 41??
00001142  6D00 0046                245              BLT     error               *
00001146                           246              
00001146  B63C 0047                247              CMP.B   #$47,D3             *byte < 47?
0000114A  6D00 0026                248              BLT     upper2hex           *
0000114E                           249              
0000114E  B63C 0061                250              CMP.B   #$61,D3             *byte < 61??
00001152  6D00 0036                251              BLT     error               *
00001156                           252              
00001156  B63C 0067                253              CMP.B   #$67,D3             *byte < 67??
0000115A  6D00 0022                254              BLT     lower2hex           *
0000115E                           255              
0000115E  B63C 0066                256              CMP.B   #$66,D3             *byte > 66??
00001162  6E00 0026                257              BGT     error               *
00001166                           258  
00001166                           259  num2hex
00001166  0403 0030                260              SUBI.B  #$30,D3             *subracthex value of 0 to get correct value of input
0000116A  D803                     261              ADD.B   D3,D4               *
0000116C  4EF9 00001194            262              JMP     resume              *return to top
00001172                           263              
00001172                           264  upper2hex
00001172  0403 0037                265              SUBI.B  #$37,D3             *subracthex value of A to get correct value of input
00001176  D803                     266              ADD.B   D3,D4               *
00001178  4EF9 00001194            267              JMP     resume              *return to top
0000117E                           268              
0000117E                           269  lower2hex
0000117E  0403 0057                270              SUBI.B  #$57,D3             *subracthex value of a to get correct value of input
00001182  D803                     271              ADD.B   D3,D4               *
00001184  4EF9 00001194            272              JMP     resume              *return to top
0000118A                           273  error
0000118A  1A3C 0000                274              MOVE.B  #$00,D5             *flag as bad input and return
0000118E  4EF9 000011AC            275              JMP     endA2H              *return to top
00001194                           276  resume
00001194  5246                     277              ADD     #1,D6               *increment length counter
00001196  BC7C 0006                278              CMP     #6,D6               *check if done
0000119A  6700 0010                279              BEQ     endA2H              *
0000119E  0C11 0000                280              CMP.B   #$00,(A1)           *end of string??
000011A2  6700 0008                281              BEQ     endA2H              *
000011A6  E984                     282              ASL.L   #4,D4               *shiftleft by 4 bits to get next value            
000011A8  4EF8 112C                283              JMP     loop                *return to top
000011AC                           284  
000011AC                           285  endA2H
000011AC  2044                     286              MOVE.L  D4,A0               *
000011AE  2E04                     287              MOVE.L  D4,D7               *move address to temp register
000011B0  4246                     288              CLR     D6                  *clear counter
000011B2  4CDF 001F                289              MOVEM.L (SP)+,D0-D4         *load data registers from stack      
000011B6  4E75                     290              RTS                         *
000011B8                           291  *===========================================================
000011B8                           292  
000011B8                           293  ************************************************************
000011B8                           294  *DECODE
000011B8                           295  ************************************************************
000011B8                           296  DECODE:
000011B8  45F9 00009000            297              LEA     buf, A2             *load buffer
000011BE  224A                     298              MOVEA.L A2,A1               *load trap address with buffer 
000011C0  4EB9 000011DE            299              JSR     ADDRESS             *current address to buffer
000011C6  3E18                     300              MOVE.W  (A0)+, D7            *move A0 value to test
000011C8                           301  
000011C8  4EB9 00001226            302              JSR     GETOPCODE           *decode instruction
000011CE  14BC 0000                303  print_b     MOVE.B  #00,(A2)            *null terminator
000011D2  103C 000D                304              MOVE.B  #task13,D0
000011D6  4E4F                     305              TRAP    #15 
000011D8                           306              
000011D8  1A3C 0001                307              MOVE.B  #1, D5
000011DC                           308              *ADDQ.W      #2, A0
000011DC                           309              
000011DC  4E75                     310  endDECODE   RTS
000011DE                           311  *===========================================================                       
000011DE                           312  
000011DE                           313  ************************************************************
000011DE                           314  *ADDRESS
000011DE                           315  *Description: Fills the buffer with the current address
000011DE                           316  ************************************************************
000011DE                           317  ADDRESS:    
000011DE  4283                     318              CLR.L   D3
000011E0  4284                     319              CLR.L   D4
000011E2  4287                     320              CLR.L   D7
000011E4  14FC 0024                321              MOVE.B  #$24, (A2)+        
000011E8  7600                     322              MOVE.L  #$00000000, D3
000011EA  2E08                     323              MOVE.L  A0, D7
000011EC  D647                     324              ADD.W   D7, D3
000011EE  4EB9 000011FE            325              JSR     addrFill   
000011F4  14FC 0009                326              MOVE.B  #$09,(A2)+   *tab
000011F8  4EF9 00001222            327              JMP     endaddr
000011FE                           328              
000011FE  2403                     329  addrFill    MOVE.L      D3, D2            *move current word into D2 for rolling purposes
00001200  183C 0008                330              MOVE.B      #8, D4              *load counter
00001204                           331  
00001204                           332  addrLoop                 
00001204  B83C 0000                333              CMP.B       #$00, D4            *compare counter with 0
00001208  6700 0018                334              BEQ         endaddr      *if 0, return
0000120C  E99A                     335              ROL.L       #4, D2              *
0000120E  2602                     336              MOVE.L      D2, D3              *
00001210  0283 0000000F            337              ANDI.L      #$000F, D3          *isolate
00001216  4EB9 00001916            338              JSR         HEX2ASCII           *to buffer           
0000121C  5304                     339              SUBQ.B      #$1, D4             *subtract from counter
0000121E  4EF8 1204                340              JMP         addrLoop                 *loop
00001222                           341              
00001222  2607                     342  endaddr     MOVE.L      D7, D3              *load from utility                             
00001224  4E75                     343  endbf       RTS
00001226                           344  *===========================================================
00001226                           345  
00001226                           346  ************************************************************ 
00001226                           347  *   ___  ____   ____ ___  ____  _____ ____  
00001226                           348  *  / _ \|  _ \ / ___/ _ \|  _ \| ____/ ___| 
00001226                           349  * | | | | |_) | |  | | | | | | |  _| \___ \ 
00001226                           350  * | |_| |  __/| |__| |_| | |_| | |___ ___) |
00001226                           351  *  \___/|_|    \____\___/|____/|_____|____/ 
00001226                           352  * 
00001226                           353  *GETOPCODE:
00001226                           354  *Description: Gets the first four bits of instruction to decode 
00001226                           355  *  
00001226                           356  *Naming conventions for opcode subroutines
00001226                           357  *opcode####
00001226                           358  *op[opmode][operation]
00001226                           359  *endop####
00001226                           360  *                              
00001226                           361  *Registers Used:
00001226                           362  *For consistency, please utilize registers in the following way.
00001226                           363  *
00001226                           364  *D1 - utility register
00001226                           365  *D3 - utility register
00001226                           366  *D7 - copy of working address
00001226                           367  *
00001226                           368  *A2 - buffer address of decoded instruction
00001226                           369  *A6 - jump table               
00001226                           370  ************************************************************
00001226                           371  GETOPCODE:   
00001226  3607                     372              MOVE.W  D7, D3              *move to utility
00001228  123C 000C                373              MOVE.B  #12, D1             *
0000122C  E26B                     374              LSR.W   D1, D3              *shift
0000122E  C6FC 0006                375              MULU    #6, D3              *offset          
00001232  4DF9 00001240            376              LEA     OP_TABLE, A6        *                                                                                  
00001238  4EB6 3000                377              JSR     00(A6,D3)           *jump indirect with index (00 indicates word movement)
0000123C  260A                     378              MOVE.L  A2, D3
0000123E                           379              *MOVE.L  D3, bufferend   
0000123E  4E75                     380  endgop      RTS                         *return
00001240                           381  *===========================================================
00001240                           382  
00001240                           383  ************************************************************
00001240                           384  *OPCODE Table
00001240                           385  *Description: Table of OPCODES
00001240                           386  ************************************************************ 
00001240                           387  OP_TABLE
00001240  4EF9 000012A0            388              JMP         opcode0000      *BADINST
00001246  4EF9 000012A8            389              JMP         opcode0001      *MOVE.B *testing*
0000124C  4EF9 000012E8            390              JMP         opcode0010      *MOVE/A.L *incomplete*
00001252  4EF9 000012F0            391              JMP         opcode0011      *MOVE/A.W *incomplete*
00001258  4EF9 000012F0            392              JMP         opcode0100      *CLR,LEA,JMP,JSR,MOVEM,NEG*,NOP*,NOT*,RTS *testing*
0000125E  4EF9 00001480            393              JMP         opcode0101      *
00001264  4EF9 00001488            394              JMP         opcode0110      *
0000126A  4EF9 00001490            395              JMP         opcode0111      *
00001270  4EF9 00001498            396              JMP         opcode1000      *
00001276  4EF9 00001506            397              JMP         opcode1001      *
0000127C  4EF9 000015B0            398              JMP         opcode1010      *
00001282  4EF9 000015B8            399              JMP         opcode1011      *
00001288  4EF9 00001654            400              JMP         opcode1100      *
0000128E  4EF9 000016E0            401              JMP         opcode1101      *
00001294  4EF9 00001796            402              JMP         opcode1110      *
0000129A  4EF9 0000179E            403              JMP         opcode1111      *
000012A0                           404              
000012A0                           405  ************************************************************
000012A0                           406  *OPCODES
000012A0                           407  *Description: OPCODE subroutines used to decode instructions
000012A0                           408  ************************************************************          
000012A0                           409  
000012A0                           410  *SUB
000012A0                           411  *Cases for first four bits: 1001
000012A0                           412  *Description: Converts opcode instruction that start with 1001
000012A0                           413  *SUB, SUBA
000012A0                           414  * 1001 0110 0100 0001
000012A0                           415  * ^--^
000012A0                           416  *Registers Used:
000012A0                           417  *D3 - size bit
000012A0                           418  *D7 - copy of instruction
000012A0                           419  *A2 - buffer address of decoded instruction
000012A0                           420  *
000012A0                           421  ************************************************************  
000012A0                           422  * Case for: 0000
000012A0                           423  * --(ORI,ANDI,SUBI,ADDI,EORI,CMPI) 
000012A0  4EF9 00001A24            424  opcode0000: JMP     BADINST
000012A6  4E75                     425  endop0000   RTS
000012A8                           426  *===========================================================
000012A8                           427  
000012A8                           428  ************************************************************  
000012A8                           429  *OPCODE: 0001
000012A8                           430  *MOVE.B
000012A8                           431  opcode0001:
000012A8  14FC 004D                432              MOVE.B  #$4D, (A2)+     *'M' to buffer
000012AC  14FC 004F                433              MOVE.B  #$4F, (A2)+     *'O' to buffer
000012B0  14FC 0056                434              MOVE.B  #$56, (A2)+     *'V' to buffer
000012B4  14FC 0045                435              MOVE.B  #$45, (A2)+     *'E' to buffer
000012B8  14FC 002E                436              MOVE.B  #$2E, (A2)+     *'.' to buffer
000012BC  14FC 0042                437              MOVE.B  #$42, (A2)+     *'B' to buffer
000012C0  14FC 0020                438              MOVE.B  #$20, (A2)+     *' ' to buffer
000012C4  14FC 0020                439              MOVE.B  #$20, (A2)+     *' ' to buffer
000012C8  4EB9 000017A6            440              JSR     GETEA
000012CE  0C05 0000                441              CMPI.B  #%0, D5
000012D2  6700 0012                442              BEQ     endop0001   
000012D6  14FC 002C                443              MOVE.B  #$2C, (A2)+     *',' to buffer
000012DA  4EB9 000018BE            444              JSR     SWAPREG         *swap destination and source regs
000012E0  4EB9 000017A6            445              JSR     GETEA  
000012E6  4E75                     446  endop0001   RTS                     *return
000012E8                           447  
000012E8                           448  *===========================================================
000012E8                           449  
000012E8                           450  ************************************************************  
000012E8                           451  *OPCODE: 0010
000012E8                           452  *MOVE.L, MOVEA.L
000012E8  4EF9 00001A24            453  opcode0010: JMP          BADINST
000012EE  4E75                     454  endop0010   RTS
000012F0                           455  *===========================================================
000012F0                           456  
000012F0                           457  ************************************************************  
000012F0                           458  *OPCODE: 0011
000012F0                           459  *MOVE.W,MOVEA.W
000012F0                           460  opcode0011:
000012F0                           461  *===========================================================
000012F0                           462  
000012F0                           463  ************************************************************  
000012F0                           464  *OPCODE: 0100
000012F0                           465  *CLR,LEA,JMP,JSR,MOVEM,NEG*,NOP*,NOT*,RTS 
000012F0                           466  opcode0100: 
000012F0  2607                     467              MOVE.L  D7, D3
000012F2  0243 0100                468              ANDI.W  #$0100, D3
000012F6  B67C 0100                469              CMP.W   #$0100, D3
000012FA  6700 0044                470              BEQ     opLEA
000012FE  2607                     471              MOVE.L  D7, D3
00001300  E04B                     472              LSR.W   #8, D3
00001302  0243 000F                473              ANDI.W  #$000F, D3
00001306  C6FC 0006                474              MULU    #6, D3
0000130A  4DF9 00001428            475              LEA code0100L1_table, A6
00001310  4EB6 3000                476              JSR 0(A6, D3)
00001314  4EF9 0000147E            477              JMP     endop0100   
0000131A                           478  **CLR******************************************************* 
0000131A  14FC 0043                479  opCLR       MOVE.B  #$43, (A2)+     *'C' to buffer
0000131E  14FC 004C                480              MOVE.B  #$4C, (A2)+     *'L' to buffer
00001322  14FC 0052                481              MOVE.B  #$52, (A2)+     *'R' to buffer
00001326  14FC 002E                482              MOVE.B  #$2E, (A2)+     *'.' to buffer
0000132A  4EB9 00001940            483              JSR     SIZE2BUFFER
00001330  14FC 0020                484              MOVE.B  #$20, (A2)+     *' ' to buffer
00001334  14FC 0020                485              MOVE.B  #$20, (A2)+     *' ' to buffer
00001338  4EB9 000017A6            486              JSR     GETEA
0000133E  4E75                     487  endopCLR    RTS                     *return
00001340                           488  **LEA******************************************************* 
00001340  14FC 004C                489  opLEA       MOVE.B  #$4C, (A2)+     *'L' to buffer
00001344  14FC 0045                490              MOVE.B  #$45, (A2)+     *'E' to buffer
00001348  14FC 0041                491              MOVE.B  #$41, (A2)+     *'A' to buffer
0000134C  14FC 0020                492              MOVE.B  #$20, (A2)+     *' ' to buffer
00001350  14FC 0020                493              MOVE.B  #$20, (A2)+     *' ' to buffer
00001354  4EB9 000017A6            494              JSR     GETEA
0000135A  14FC 002C                495              MOVE.B  #$2C,(A2)+      *',' to buffer
0000135E  14FC 0041                496              MOVE.B  #$41,(A2)+      *'A' to buffer
00001362  4EB9 0000192E            497              JSR     REG2BUFFER
00001368  4E75                     498  endopLEA    RTS                     *return   
0000136A                           499  **JSR*******************************************************           
0000136A  14FC 004A                500  opJSR       MOVE.B  #$4A, (A2)+     *'J' to buffer
0000136E  14FC 0053                501              MOVE.B  #$53, (A2)+     *'S' to buffer
00001372  14FC 0052                502              MOVE.B  #$52, (A2)+     *'R' to buffer
00001376  14FC 0020                503              MOVE.B  #$20, (A2)+     *' ' to buffer
0000137A  4EB9 000017A6            504              JSR     GETEA
00001380  4E75                     505  endopJSR    RTS                     *return
00001382                           506  **JMP*******************************************************
00001382  14FC 004A                507  opJMP       MOVE.B  #$4A, (A2)+     *'J' to buffer
00001386  14FC 004D                508              MOVE.B  #$4D, (A2)+     *'M' to buffer
0000138A  14FC 0050                509              MOVE.B  #$50, (A2)+     *'P' to buffer
0000138E  14FC 0020                510              MOVE.B  #$20, (A2)+     *' ' to buffer
00001392  4EB9 000017A6            511              JSR     GETEA
00001398  4E75                     512  endopJMP    RTS                     *return                 
0000139A                           513  **NEG******************************************************* 
0000139A  14FC 004E                514  opNEG       MOVE.B  #$4E, (A2)+     *'N' to buffer
0000139E  14FC 0045                515              MOVE.B  #$45, (A2)+     *'E' to buffer
000013A2  14FC 0047                516              MOVE.B  #$47, (A2)+     *'G' to buffer
000013A6  14FC 002E                517              MOVE.B  #$2E, (A2)+     *'.' to buffer
000013AA  4EB9 00001940            518              JSR     SIZE2BUFFER
000013B0  14FC 0020                519              MOVE.B  #$20, (A2)+     *' ' to buffer
000013B4  14FC 0020                520              MOVE.B  #$20, (A2)+     *' ' to buffer
000013B8  4EB9 000017A6            521              JSR     GETEA
000013BE  4E75                     522  endopNEG    RTS                     *return  
000013C0                           523  **NOT******************************************************* 
000013C0  14FC 004E                524  opNOT       MOVE.B  #$4E, (A2)+     *'N' to buffer
000013C4  14FC 004F                525              MOVE.B  #$4F, (A2)+     *'O' to buffer
000013C8  14FC 0054                526              MOVE.B  #$54, (A2)+     *'T' to buffer
000013CC  14FC 002E                527              MOVE.B  #$2E, (A2)+     *'.' to buffer
000013D0  4EB9 00001940            528              JSR     SIZE2BUFFER
000013D6  14FC 0020                529              MOVE.B  #$20, (A2)+     *' ' to buffer
000013DA  14FC 0020                530              MOVE.B  #$20, (A2)+     *' ' to buffer
000013DE  4EB9 000017A6            531              JSR     GETEA
000013E4  4E75                     532  endopNOT    RTS                     *return
000013E6                           533  **NOP*******************************************************            
000013E6  14FC 004E                534  opNOP       MOVE.B  #$4E, (A2)+     *'N' to buffer
000013EA  14FC 004F                535              MOVE.B  #$4F, (A2)+     *'O' to buffer
000013EE  14FC 0050                536              MOVE.B  #$50, (A2)+     *'P' to buffer
000013F2  4E75                     537  endopNOP    RTS                     *return
000013F4                           538  **RTS*******************************************************
000013F4  14FC 0052                539  opRTS       MOVE.B  #$52, (A2)+     *'R' to buffer
000013F8  14FC 0054                540              MOVE.B  #$54, (A2)+     *'T' to buffer
000013FC  14FC 0053                541              MOVE.B  #$53, (A2)+     *'S' to buffer
00001400  4E75                     542  endopRTS    RTS                     *return
00001402                           543  **op0100*1110***********************************************
00001402                           544  op01001110:
00001402  4EB9 000018AA            545              JSR     GETSIZE
00001408  B67C 4E71                546              CMP.W   #$4E71, D3
0000140C  67E6                     547              BEQ     opRTS
0000140E  0C03 0002                548              CMPI.B  #%10, D3
00001412  6700 FF56                549              BEQ     opJSR
00001416  0C03 0003                550              CMPI.B  #%11, D3
0000141A  6700 FF66                551              BEQ     opJMP
0000141E  B67C 4E71                552              CMP.W   #$4E71, D3
00001422  6600 0600                553              BNE     BADINST
00001426                           554  endop01001110            
00001426  4E75                     555              RTS                     *return
00001428                           556  **MOVEM*****************************************************
00001428                           557  opMOVEM
00001428                           558  endopMOVEM
00001428                           559  **JMP TABLE*************************************************   
00001428                           560  * 0100 1010 0000 0000 
00001428                           561  *      ^--^          
00001428                           562  code0100L1_table 
00001428  4EF9 00001A24            563              JMP     BADINST         *0000          
0000142E  4EF9 00001A24            564              JMP     BADINST         *0001           
00001434  4EF8 131A                565              JMP     opCLR           *0010
00001438  4EF9 00001A24            566              JMP     BADINST         *0011
0000143E  4EF8 139A                567              JMP     opNEG           *0100
00001442  4EF9 00001A24            568              JMP     BADINST         *0101
00001448  4EF8 13C0                569              JMP     opNOT           *0110
0000144C  4EF9 00001A24            570              JMP     BADINST         *0111
00001452  4EF8 1428                571              JMP     opMOVEM         *1000
00001456  4EF9 00001A24            572              JMP     BADINST         *1001
0000145C  4EF9 00001A24            573              JMP     BADINST         *1010
00001462  4EF9 00001A24            574              JMP     BADINST         *1011
00001468  4EF9 00001A24            575              JMP     BADINST         *1100
0000146E  4EF9 00001A24            576              JMP     BADINST         *1101
00001474  4EF8 1402                577              JMP     op01001110      *1110
00001478  4EF9 00001A24            578              JMP     BADINST         *1111
0000147E  4E75                     579  endop0100   RTS                     *return
00001480                           580  ************************************************************  
00001480                           581  *OPCODE: 0101
00001480                           582  *BAD INSTRUCTION
00001480  4EF9 00001A24            583  opcode0101: JMP     BADINST
00001486  4E75                     584  endop0101   RTS
00001488                           585  *===========================================================
00001488                           586  
00001488                           587  ************************************************************  
00001488                           588  *OPCODE: 0110
00001488                           589  *Bcc
00001488  4EF9 00001A24            590  opcode0110: JMP     BADINST
0000148E  4E75                     591  endop0110   RTS
00001490                           592  *===========================================================
00001490                           593  
00001490                           594  ************************************************************  
00001490                           595  *OPCODE: 0111
00001490                           596  *BAD INSTRUCTION
00001490  4EF9 00001A24            597  opcode0111: JMP     BADINST
00001496  4E75                     598  endop0111   RTS
00001498                           599  *===========================================================
00001498                           600  
00001498                           601  ************************************************************  
00001498                           602  *OPCODE: 1000
00001498                           603  *OR 
00001498                           604  opcode1000: 
00001498  2607                     605              MOVE.L  D7, D3
0000149A  EC8B                     606              LSR.L   #6, D3
0000149C  0243 0003                607              ANDI.W  #$03, D3
000014A0  B63C 0003                608              CMP.B   #$3, D3
000014A4  6600 0008                609              BNE     opOR
000014A8  4EF9 00001A24            610              JMP     BADINST
000014AE  14FC 004F                611  opOR        MOVE.B  #$4F, (A2)+     *'O' to buffer
000014B2  14FC 0052                612              MOVE.B  #$52, (A2)+     *'R' to buffer
000014B6  14FC 002E                613              MOVE.B  #$2E, (A2)+     *'.' to buffer
000014BA  4EB9 00001940            614              JSR     SIZE2BUFFER     *size to buffer
000014C0  14FC 0020                615              MOVE.B  #$20, (A2)+     *' ' to buffer
000014C4  14FC 0020                616              MOVE.B  #$20, (A2)+     *' ' to buffer
000014C8  4EB9 000018B4            617              JSR     GETDIRECTION    *direction bit 0 = EA; 1 = regs
000014CE  0C03 0000                618              CMPI.B  #%0, D3         *EA first?
000014D2  6600 001C                619              BNE     opOR01          
000014D6  4EB9 000017A6            620              JSR     GETEA
000014DC  14FC 002C                621              MOVE.B  #$2C,(A2)+      *',' to buffer
000014E0  14FC 0044                622              MOVE.B  #$44,(A2)+      *'D' to buffer
000014E4  4EB9 0000192E            623              JSR     REG2BUFFER
000014EA  4EF9 00001504            624              JMP     endop1000
000014F0                           625   
000014F0  14FC 0044                626  opOR01      MOVE.B  #$44,(A2)+      *'D' to buffer
000014F4  4EB9 0000192E            627              JSR     REG2BUFFER            
000014FA  14FC 002C                628              MOVE.B  #$2C,(A2)+      *',' to buffer
000014FE  4EB9 000017A6            629              JSR     GETEA
00001504  4E75                     630  endop1000   RTS
00001506                           631  *===========================================================
00001506                           632  
00001506                           633  ************************************************************  
00001506                           634  *OPCODE: 1001
00001506                           635  *SUB, SUBA
00001506                           636  opcode1001:
00001506  14FC 0053                637              MOVE.B  #$53, (A2)+     *'S' to buffer
0000150A  14FC 0055                638              MOVE.B  #$55, (A2)+     *'U' to buffer
0000150E  14FC 0042                639              MOVE.B  #$42, (A2)+     *'B' to buffer
00001512  4EB9 000018AA            640              JSR     GETSIZE         *get the instruction size (OPMODE)
00001518  B63C 0003                641              CMP.B   #%11, D3        *11 = SUBA  
0000151C  6600 0046                642              BNE     opsubSub
00001520  14FC 0041                643              MOVE.B  #$41, (A2)+     *'A' to buffer
00001524  14FC 002E                644              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001528  3607                     645              MOVE.W  D7, D3          *move to utility
0000152A  E08B                     646              LSR.L   #8, D3          *shift for opmode
0000152C  0243 0001                647              ANDI.W  #$0001, D3      *isolate 8 to determine size
00001530  B63C 0001                648              CMP.B   #%1, D3         *long?
00001534  6700 0008                649              BEQ     opsubL          *it's a longword
00001538  4EF9 00001542            650              JMP     opsubSuba
0000153E                           651  **SUBA******************************************************            
0000153E  14FC 004C                652  opsubL      MOVE.B  #$4C, (A2)+     *'L' to buffer
00001542  14FC 0020                653  opsubSuba   MOVE.B  #$20, (A2)+     *' ' to buffer    
00001546  14FC 0020                654              MOVE.B  #$20, (A2)+     *' ' to buffer
0000154A  4EB9 000017A6            655              JSR     GETEA           *get effective address
00001550  14FC 002C                656              MOVE.B  #$2C,(A2)+      *',' to buffer
00001554  14FC 0041                657              MOVE.B  #$41,(A2)+      *'A' to buffer
00001558  4EB9 0000192E            658              JSR     REG2BUFFER      *get the register number
0000155E  4EF9 000015AE            659              JMP     endop1001       *return
00001564                           660  **SUB*EA>>Register****************************************** 
00001564  14FC 002E                661  opsubSub    MOVE.B  #$2E, (A2)+     *'.' to buffer
00001568  4EB9 00001940            662              JSR     SIZE2BUFFER     *send size to buffer
0000156E  14FC 0009                663              MOVE.B  #$09, (A2)+     *tab
00001572  4EB9 000018B4            664              JSR     GETDIRECTION    *isolate
00001578  B63C 0000                665              CMP.B   #%0, D3         *direction bit 0 = EA; 1 = regs
0000157C  6600 001C                666              BNE     opsubSubR         
00001580  4EB9 000017A6            667              JSR     GETEA           *get effective address
00001586  14FC 002C                668              MOVE.B  #$2C,(A2)+      *',' to buffer   
0000158A  14FC 0044                669              MOVE.B  #$44,(A2)+      *'D' to buffer
0000158E  4EB9 0000192E            670              JSR     REG2BUFFER      *get the register number
00001594  4EF9 000015AE            671              JMP     endop1001       *return
0000159A                           672  **SUB*Register>>EA******************************************            
0000159A  14FC 0044                673  opsubSubR   MOVE.B  #$44,(A2)+      *'D' to buffer
0000159E  4EB9 0000192E            674              JSR     REG2BUFFER      *get the register number
000015A4  14FC 002C                675              MOVE.B  #$2C,(A2)+      *',' to buffer
000015A8  4EB9 000017A6            676              JSR     GETEA           *get effective address
000015AE  4E75                     677  endop1001   RTS                     *return
000015B0                           678  *===========================================================
000015B0                           679                                                         
000015B0                           680  ************************************************************  
000015B0                           681  *OPCODE: 1010
000015B0                           682  *BAD INSTRUCTION
000015B0  4EF9 00001A24            683  opcode1010: JMP     BADINST
000015B6  4E75                     684  endop1010   RTS
000015B8                           685  *===========================================================
000015B8                           686  
000015B8                           687  ************************************************************  
000015B8                           688  *OPCODE: 1011
000015B8                           689  *CMP,CMPA
000015B8                           690  *EOR is not applicable to this assignment and will be 
000015B8                           691  *regarded as a bad instruction
000015B8                           692  opcode1011: 
000015B8  4EB9 000018AA            693              JSR     GETSIZE
000015BE  0C03 0003                694              CMPI.B   #%11, D3
000015C2  6600 0040                695              BNE     opcmp
000015C6                           696  **CMPA******************************************************             
000015C6  14FC 0043                697  opCMPA      MOVE.B  #$43, (A2)+     *'C' to buffer
000015CA  14FC 004D                698              MOVE.B  #$4D, (A2)+     *'M' to buffer
000015CE  14FC 0050                699              MOVE.B  #$50, (A2)+     *'P' to buffer
000015D2  14FC 0041                700              MOVE.B  #$41, (A2)+     *'A' to buffer
000015D6  14FC 002E                701              MOVE.B  #$2E, (A2)+     *'.' to buffer
000015DA  2607                     702              MOVE.L  D7, D3
000015DC  14FC 0020                703              MOVE.B  #$20, (A2)+     *' ' to buffer
000015E0  14FC 0020                704              MOVE.B  #$20, (A2)+     *' ' to buffer
000015E4                           705              
000015E4  4EB9 00001940            706              JSR     SIZE2BUFFER
000015EA  4EB9 000017A6            707              JSR     GETEA
000015F0  14FC 002C                708              MOVE.B  #$2C, (A2)+     *',' to buffer
000015F4  14FC 0041                709              MOVE.B  #$41, (A2)+     *'A' to buffer
000015F8  4EB9 0000192E            710              JSR     REG2BUFFER
000015FE  4EF9 00001652            711              JMP     endop1011
00001604                           712  **CMP*******************************************************             
00001604  2607                     713  opCMP       MOVE.L  D7, D3
00001606  4EB9 000018B4            714              JSR     GETDIRECTION
0000160C  0C03 0000                715              CMPI.B   #%0, D3
00001610  6600 003A                716              BNE     opeor
00001614                           717  
00001614  14FC 0043                718              MOVE.B  #$43, (A2)+     *'C' to buffer
00001618  14FC 004D                719              MOVE.B  #$4D, (A2)+     *'M' to buffer
0000161C  14FC 0050                720              MOVE.B  #$50, (A2)+     *'P' to buffer
00001620  14FC 002E                721              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001624  4EB9 00001940            722              JSR     SIZE2BUFFER
0000162A  14FC 0020                723              MOVE.B  #$20, (A2)+     *' ' to buffer
0000162E  14FC 0020                724              MOVE.B  #$20, (A2)+     *' ' to buffer
00001632  4EB9 000017A6            725              JSR     GETEA
00001638  14FC 002C                726              MOVE.B  #$2C, (A2)+     *',' to buffer
0000163C  14FC 0044                727              MOVE.B  #$44, (A2)+     *'D' to buffer
00001640  4EB9 0000192E            728              JSR     REG2BUFFER
00001646  4EF9 00001652            729              JMP     endop1011
0000164C                           730  **EOR*******************************************************            
0000164C  4EF9 00001A24            731  opEOR       JMP     BADINST              
00001652  4E75                     732  endop1011   RTS
00001654                           733  *===========================================================
00001654                           734  
00001654                           735  ************************************************************  
00001654                           736  *OPCODE: 1100
00001654                           737  *AND
00001654                           738  *MULU, EXG are not applicable to this assignment and will be 
00001654                           739  *regarded as a bad instruction
00001654                           740  opcode1100:
00001654  3607                     741              MOVE.W  D7, D3          *move to utility
00001656  EC8B                     742              LSR.L   #6, D3          *shift
00001658  0243 0003                743              ANDI.W  #$3, D3         *isolate
0000165C  B63C 0003                744              CMP.B   #$3, D3         *MULU/MULS?
00001660  6700 03C2                745              BEQ     BADINST         *instruction not supported
00001664  3607                     746              MOVE.W  D7, D3          *move to utility
00001666  E68B                     747              LSR.L   #3, D3          *shift
00001668  0203 001F                748              ANDI.B  #$1F, D3        *isolate
0000166C  B63C 0008                749              CMP.B   #$08, D3        *EXG?
00001670  6700 03B2                750              BEQ     BADINST         *instruction not supported
00001674  B63C 0009                751              CMP.B   #$09, D3        *EXG?
00001678  6700 03AA                752              BEQ     BADINST         *instruction not supported
0000167C  B63C 0011                753              CMP.B   #$11, D3        *EXG?
00001680  6700 03A2                754              BEQ     BADINST         *ok, phew made it to AND
00001684                           755              
00001684  14FC 0041                756              MOVE.B  #$41, (A2)+     *'A' to buffer
00001688  14FC 004E                757              MOVE.B  #$4E, (A2)+     *'N' to buffer
0000168C  14FC 0044                758              MOVE.B  #$44, (A2)+     *'D' to buffer
00001690  14FC 002E                759              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001694  4EB9 00001940            760              JSR     SIZE2BUFFER     *send size to buffer
0000169A  14FC 0020                761              MOVE.B  #$20, (A2)+     *' ' to buffer
0000169E  14FC 0020                762              MOVE.B  #$20, (A2)+     *' ' to buffer
000016A2  4EB9 000018B4            763              JSR     GETDIRECTION    *isolate bit for direction
000016A8  0C03 0000                764              CMPI.B  #%0, D3         *direction bit 0 = EA; 1 = regs
000016AC  6600 001C                765              BNE     opAND01         *
000016B0  4EB9 000017A6            766              JSR     GETEA           *get effective address
000016B6  14FC 002C                767              MOVE.B  #$2C, (A2)+     *',' to buffer
000016BA  14FC 0044                768              MOVE.B  #$44, (A2)+     *'D' to buffer
000016BE  4EB9 0000192E            769              JSR     REG2BUFFER      *get the register number
000016C4  4EF9 000016DE            770              JMP     endop1100     
000016CA                           771           
000016CA  14FC 0044                772  opAND01     MOVE.B  #$44, (A2)+     *'D' to buffer
000016CE  4EB9 0000192E            773              JSR     REG2BUFFER      *get the register number
000016D4  14FC 002C                774              MOVE.B  #$2C, (A2)+     *',' to buffer
000016D8  4EB9 000017A6            775              JSR     GETEA           *get effective address 
000016DE  4E75                     776  endop1100   RTS                     *return
000016E0                           777  *===========================================================
000016E0                           778  
000016E0                           779  ************************************************************  
000016E0                           780  *OPCODE: 1101
000016E0                           781  *ADD,ADDA
000016E0                           782  opcode1101: 
000016E0  14FC 0041                783              MOVE.B  #$41, (A2)+     *'A' to buffer
000016E4  14FC 0044                784              MOVE.B  #$44, (A2)+     *'D' to buffer
000016E8  14FC 0044                785              MOVE.B  #$44, (A2)+     *'D' to buffer
000016EC  4EB9 000018AA            786              JSR     GETSIZE         *
000016F2  0C03 0003                787              CMPI.B  #%11, D3        *11?
000016F6  6600 004E                788              BNE     opadd           *
000016FA  14FC 0041                789              MOVE.B  #$41, (A2)+     *'A' to buffer
000016FE  14FC 002E                790              MOVE.B  #$2E, (A2)+     *'.' to buffer
00001702  3607                     791              MOVE.W  D7, D3          *move to utility
00001704  E08B                     792              LSR.L   #8, D3          *shift
00001706  0243 0001                793              ANDI.W  #$0001, D3      *isolate
0000170A  0C03 0001                794              CMPI.B  #%1, D3         *long?
0000170E  6700 000C                795              BEQ     opaddL          *
00001712  14FC 0057                796              MOVE.B  #$57,(A2)+      *'W' to buffer
00001716  4EF9 00001720            797              JMP     opadda  
0000171C                           798  **ADD.L*****************************************************
0000171C  14FC 004C                799  opADDL      MOVE.B  #$4C,(A2)+      *'L' to buffer
00001720                           800  *ADDA*******************************************************
00001720  14FC 0020                801  opADDA      MOVE.B  #$20, (A2)+     *' ' to buffer
00001724  14FC 0020                802              MOVE.B  #$20, (A2)+     *' ' to buffer
00001728  14FC 0020                803              MOVE.B  #$20, (A2)+     *' ' to buffer
0000172C  4EB9 000017A6            804              JSR     GETEA           *get effective address 
00001732  14FC 002C                805              MOVE.B  #$2C, (A2)+     *',' to buffer
00001736  14FC 0041                806              MOVE.B  #$41, (A2)+     *'A' to buffer
0000173A  4EB9 0000192E            807              JSR     REG2BUFFER      *get the register number
00001740  4EF9 00001794            808              JMP     endop1101
00001746                           809  **ADD*******************************************************
00001746  14FC 002E                810  opADD       MOVE.B  #$2E, (A2)+     *'.' to buffer  
0000174A  4EB9 00001940            811              JSR     SIZE2BUFFER     *send size to buffer
00001750  14FC 0020                812              MOVE.B  #$20, (A2)+     *' ' to buffer
00001754  14FC 0020                813              MOVE.B  #$20, (A2)+     *' ' to buffer
00001758  4EB9 000018B4            814              JSR     GETDIRECTION    *isolate bit for direction
0000175E  0C03 0000                815              CMPI.B   #%0, D3        *direction bit 0 = EA; 1 = regs
00001762  6600 001C                816              BNE     opADD01         *
00001766  4EB9 000017A6            817              JSR     GETEA           *get effective address
0000176C  14FC 002C                818              MOVE.B  #$2C, (A2)+     *',' to buffer
00001770  14FC 0044                819              MOVE.B  #$44, (A2)+     *'D' to buffer
00001774  4EB9 0000192E            820              JSR     REG2BUFFER      *get the register number
0000177A  4EF9 00001794            821              JMP     endop1101   
00001780                           822  **EA first************************************************** 
00001780  14FC 0044                823  opADD01    MOVE.B  #$44, (A2)+     *'D' to buffer
00001784  4EB9 0000192E            824              JSR     REG2BUFFER      *get the register number
0000178A  14FC 002C                825              MOVE.B  #$2C, (A2)+     *',' to buffer
0000178E  4EB9 000017A6            826              JSR     GETEA           *get effective address
00001794  4E75                     827  endop1101   RTS                     *return           
00001796                           828  *===========================================================
00001796                           829  
00001796                           830  ************************************************************  
00001796                           831  *OPCODE: 1110
00001796                           832  *ASR, LSL
00001796  4EF9 00001A24            833  opcode1110: JMP     BADINST
0000179C  4E75                     834  endop1110   RTS
0000179E                           835  *===========================================================
0000179E                           836  
0000179E                           837  ************************************************************  
0000179E                           838  *OPCODE: 1111
0000179E                           839  *BAD INSTRUCTION
0000179E  4EF9 00001A24            840  opcode1111: JMP     BADINST
000017A4  4E75                     841  endop111    RTS
000017A6                           842   *===========================================================             
000017A6                           843  
000017A6                           844  ************************************************************
000017A6                           845  *  _____ _____ _____ _____ ____ _____ _____     _______      _    ____  ____  ____  _____ ____ ____  
000017A6                           846  * | ____|  ___|  ___| ____/ ___|_   _|_ _\ \   / / ____|    / \  |  _ \|  _ \|  _ \| ____/ ___/ ___| 
000017A6                           847  * |  _| | |_  | |_  |  _|| |     | |  | | \ \ / /|  _|     / _ \ | | | | | | | |_) |  _| \___ \___ \ 
000017A6                           848  * | |___|  _| |  _| | |__| |___  | |  | |  \ V / | |___   / ___ \| |_| | |_| |  _ <| |___ ___) |__) |
000017A6                           849  * |_____|_|   |_|   |_____\____| |_| |___|  \_/  |_____| /_/   \_\____/|____/|_| \_\_____|____/____/ 
000017A6                           850  *                                                                                                   
000017A6                           851  *GETEA
000017A6                           852  *Description: Converts the opcode instruction EA
000017A6                           853  * 1001 0110 0100 0001
000017A6                           854  *             ^-----^
000017A6                           855  *Registers Used:
000017A6                           856  *For consistency, please utilize registers in the following way.
000017A6                           857  *
000017A6                           858  *D1 - utility register
000017A6                           859  *D3 - utility register
000017A6                           860  *D7 - copy of working address
000017A6                           861  *
000017A6                           862  *A2 - buffer address of decoded instruction
000017A6                           863  *A6 - jump table
000017A6                           864  ************************************************************
000017A6                           865  GETEA:
000017A6  4DF9 000017C4            866              LEA     EA_TABLE, A6
000017AC  4283                     867              CLR.L   D3
000017AE  3607                     868              MOVE.W  D7, D3
000017B0  0243 003F                869              ANDI.W  #$003F, D3
000017B4  123C 0003                870              MOVE.B  #3, D1
000017B8  E26B                     871              LSR.W   D1, D3
000017BA  C6FC 0006                872              MULU    #6, D3
000017BE  4EB6 3000                873              JSR     0(A6, D3)
000017C2  4E75                     874              RTS                     *return
000017C4                           875  *===========================================================
000017C4                           876  
000017C4                           877  ************************************************************
000017C4                           878  *GET_TABLE
000017C4                           879  *Description: Jump table of Effective Address Modes
000017C4                           880  ************************************************************
000017C4                           881  EA_TABLE:       
000017C4  4EF9 000017F4            882              JMP     eacode000
000017CA  4EF9 00001806            883              JMP     eacode001
000017D0  4EF9 00001818            884              JMP     eacode010
000017D6  4EF9 00001832            885              JMP     eacode011
000017DC  4EF9 00001850            886              JMP     eacode100
000017E2  4EF9 0000186E            887              JMP     eacode101
000017E8  4EF9 00001874            888              JMP     eacode110
000017EE  4EF9 0000187A            889              JMP     eacode111
000017F4                           890  *===========================================================
000017F4                           891  
000017F4                           892  ************************************************************
000017F4                           893  *EA CODES
000017F4                           894  *Description: Lsit of Effective Address Subrotines
000017F4                           895  *000,001,010,011,100,[101],[110],111
000017F4                           896  *Registers Used:
000017F4                           897  *TODO
000017F4                           898  *
000017F4                           899  *Data Register**********************************************
000017F4  3607                     900  eacode000   MOVE.W      D7, D3          *move to utility
000017F6  0243 0007                901              ANDI.W      #$7, D3         *isolate
000017FA  14FC 0044                902              MOVE.B      #$44,(A2)+      *'D' to buffer
000017FE  0603 0030                903              ADD.B       #$30, D3        *convert register number to ascii
00001802  14C3                     904              MOVE.B      D3,(A2)+        *to buffer                  
00001804  4E75                     905  endea000    RTS                         *return
00001806                           906  *Address Register*******************************************
00001806  3607                     907  eacode001   MOVE.W      D7, D3          *move to utility
00001808  0243 0007                908              ANDI.W      #$7, D3         *isolate
0000180C  163C 0041                909              MOVE.B      #$41, D3        *'A' to buffer
00001810  0603 0030                910              ADD.B       #$30, D3        *convert register number to ascii
00001814  14C3                     911              MOVE.B      D3,(A2)+        *to buffer  
00001816  4E75                     912  endea001    RTS                         *return
00001818                           913  *Address
00001818  3607                     914  eacode010   MOVE.W      D7, D3          *move to utility
0000181A  0243 0007                915              ANDI.W      #$7, D3         *isolate
0000181E  14FC 0028                916              MOVE.B      #$28,(A2)+      *'(' to buffer            
00001822  14FC 0041                917              MOVE.B      #$41,(A2)+      *'A' to buffer
00001826  0603 0030                918              ADD.B       #$30, D3        *convert register number to ascii
0000182A  14C3                     919              MOVE.B      D3,(A2)+        *to buffer  
0000182C  14FC 0029                920              MOVE.B      #$29,(A2)+      *')' to buffe
00001830  4E75                     921  endea010    RTS                         *return
00001832                           922  *Address with Postincrement*********************************
00001832  3607                     923  eacode011   MOVE.W      D7, D3          *move to utility
00001834  0243 0007                924              ANDI.W      #$7, D3         *isolate
00001838  14FC 0028                925              MOVE.B      #$28,(A2)+      *'(' to buffer            
0000183C  14FC 0041                926              MOVE.B      #$41,(A2)+      *'A' to buffer
00001840  0603 0030                927              ADD.B       #$30, D3        *convert register number to ascii
00001844  14C3                     928              MOVE.B      D3,(A2)+        *to buffer  
00001846  14FC 0029                929              MOVE.B      #$29,(A2)+      *')' to buffer
0000184A  14FC 002B                930              MOVE.B      #$2B, (A2)+     *'+' to buffer
0000184E  4E75                     931  endea011    RTS                         *return
00001850                           932  *Address with Predecrement**********************************
00001850  3607                     933  eacode100   MOVE.W      D7, D3          *move to utility
00001852  0243 0007                934              ANDI.W      #$7, D3         *isolate
00001856  14FC 002D                935              MOVE.B      #$2D,(A2)+      *'-' to buffer 
0000185A  14FC 0028                936              MOVE.B      #$28,(A2)+      *'(' to buffer            
0000185E  14FC 0041                937              MOVE.B      #$41,(A2)+      *'A' to buffer
00001862  0603 0030                938              ADD.B       #$30, D3        *convert register number to ascii
00001866  14C3                     939              MOVE.B      D3,(A2)+        *to buffer  
00001868  14FC 0029                940              MOVE.B      #$29,(A2)+      *')' to buffe
0000186C  4E75                     941  endea100    RTS                         *return
0000186E                           942  *Bad Instruction********************************************
0000186E  4EF9 00001A24            943  eacode101   JMP         BADINST
00001874                           944  *Bad Instruction********************************************
00001874  4EF9 00001A24            945  eacode110   JMP         BADINST
0000187A                           946  *Immediate*Absolute*****************************************
0000187A  4EB9 000018A2            947  eacode111   JSR         GETREGISTER     *isolate register bit
00001880  0C03 0000                948              CMPI.B      #$0, D3         *word?
00001884  6700 0128                949              BEQ         WORD2BUFFER
00001888  0C03 0001                950              CMPI.B      #$1, D3         *long?
0000188C  6700 014C                951              BEQ         LONG2BUFFER
00001890  0C03 0004                952              CMPI.B      #$4, D3         *Immediate Data?
00001894  6700 0170                953              BEQ         IMM2BUFER
00001898  0C03 0002                954              CMPI.B      #$2, D3         *PC?
0000189C  6700 0186                955              BEQ         BADINST
000018A0  4E75                     956  endea111    RTS                         *return
000018A2                           957  *===========================================================
000018A2                           958  
000018A2                           959  ************************************************************
000018A2                           960  *GETREGISTER
000018A2                           961  *Description: Converts register bit and stores in D3
000018A2                           962  ************************************************************ 
000018A2                           963  GETREGISTER:
000018A2  3607                     964              MOVE.W  D7, D3
000018A4  0243 0007                965              ANDI.W  #$07, D3
000018A8  4E75                     966  endrb       RTS
000018AA                           967  *===========================================================
000018AA                           968  
000018AA                           969  ************************************************************
000018AA                           970  *GETSIZE
000018AA                           971  *Description: Returns the size of the bit in 6-7 (.B, .W, .L)
000018AA                           972  * 1001 0110 0100 0001
000018AA                           973  *       ^^--------->|
000018AA                           974  *Registers Used:
000018AA                           975  *D3 - size bit
000018AA                           976  *D7 - copy of instruction
000018AA                           977  ************************************************************
000018AA                           978  GETSIZE:
000018AA  3607                     979              MOVE.W  D7, D3          *move to utility
000018AC  EC4B                     980              LSR.W   #6, D3          *shift
000018AE  0243 0003                981              ANDI.W  #$0003, D3      *isolate
000018B2  4E75                     982  endGS       RTS                     *return
000018B4                           983  *===========================================================
000018B4                           984  
000018B4                           985  ************************************************************
000018B4                           986  *GETDIRECTION
000018B4                           987  *Description: Finds direction of the instruction and sets it to the utility register
000018B4                           988  * 1001 0110 0100 0001
000018B4                           989  *         ^-------->|
000018B4                           990  *Registers Used:
000018B4                           991  *D3 - size bit
000018B4                           992  *D7 - copy of instruction 
000018B4                           993  ************************************************************
000018B4                           994  GETDIRECTION:
000018B4  3607                     995              MOVE.W  D7, D3          *move to utility
000018B6  E08B                     996              LSR.L   #8, D3          *shift 8
000018B8  0203 0001                997              ANDI.B  #01, D3         *isolate 8th bit
000018BC  4E75                     998  endgd       RTS                     *return
000018BE                           999  *===========================================================
000018BE                          1000  
000018BE                          1001  ************************************************************
000018BE                          1002  *SWAPREG         
000018BE                          1003  *Description: For double EA move instructions, swaps registers to use EA jump table
000018BE                          1004  *Registers Used:
000018BE                          1005  *D3 - size bit
000018BE                          1006  *D4 - hold register for swap bits
000018BE                          1007  *D7 - swapped EA mode 
000018BE                          1008  SWAPREG:
000018BE  4283                    1009              CLR.L   D3              *
000018C0  3607                    1010              MOVE.W  D7,D3           *move to utility
000018C2  E04B                    1011              LSR.W   #8,D3           *shift
000018C4  E24B                    1012              LSR.W   #1,D3           *shift
000018C6  0243 0007               1013              ANDI.W  #$0007,D3       *
000018CA  8843                    1014              OR.W    D3,D4           *store bits for swap
000018CC  3607                    1015              MOVE.W  D7,D3           *move to utility
000018CE  E64B                    1016              LSR.W   #3,D3           *shift bits 6-8 to normal ea position
000018D0  8843                    1017              OR.W    D3,D4           *
000018D2  4EB9 000018DC           1018              JSR     srSize          *get mode size
000018D8  3E04                    1019              MOVE.W  D4,D7           *load swap register
000018DA  4E75                    1020  endswap     RTS                     *return
000018DC                          1021  
000018DC  3607                    1022  srSize      MOVE.W  D7,D3           *move to utility
000018DE  E04B                    1023              LSR.W   #8,D3           *shift
000018E0  E84B                    1024              LSR.W   #4,D3           *
000018E2  0243 0003               1025              ANDI.W  #$0003,D3       *isolate
000018E6  B63C 0001               1026              CMP.B   #$1,D3          *byte?
000018EA  6700 0020               1027              BEQ     endsr           *yes
000018EE  B63C 0002               1028              CMP.B   #$2,D3          *long?
000018F2  6700 0014               1029              BEQ     srL             *yes
000018F6  B63C 0003               1030              CMP.B   #$3,D3          *word?
000018FA  6600 0128               1031              BNE     BADINST         *No? bad instrustion        
000018FE  0044 0040               1032  srW         ORI.W   #$0040,D4       *add size
00001902  4EF9 0000190C           1033              JMP     endsr           *
00001908  0044 0080               1034  srL         ORI.W   #$0080,D4       *add size
0000190C  4E75                    1035  endsr       RTS                     *return
0000190E                          1036  *===========================================================
0000190E                          1037  
0000190E                          1038  SHIFT:       
0000190E  E8AB                    1039              LSR.L   D4,D3               
00001910  0243 000F               1040              ANDI.W  #$000F,D3
00001914  4E75                    1041  endSHFIT    RTS
00001916                          1042  
00001916                          1043  ************************************************************
00001916                          1044  *  ____  _   _ _____ _____ _____ ____ 
00001916                          1045  * | __ )| | | |  ___|  ___| ____|  _ \ 
00001916                          1046  * |  _ \| | | | |_  | |_  |  _| | |_) | 
00001916                          1047  * | |_) | |_| |  _| |  _| | |___|  _ <  
00001916                          1048  * |____/ \___/|_|   |_|   |_____|_| \_\ 
00001916                          1049  *
00001916                          1050  *BUFFER SUBROUTINES                                                                                 
00001916                          1051  *Description: Puts word to print buffer
00001916                          1052  *D3 - Utility register
00001916                          1053  *D6 - Counter
00001916                          1054  *A0 - Utility address
00001916                          1055  *A2 - Address buffer
00001916                          1056  *NOTES:
00001916                          1057  *Adding chars to the buffer a byte at a time seems to work the best
00001916                          1058  *Adding words or longwords can sometimes land on odd memory address
00001916                          1059  *which do no allow memory to be written to.  To combat this, move
00001916                          1060  *chars as bytes.  Tideous, but effective.
00001916                          1061  *EXAMPLE:   MOVE.B  #$20, (A2)+     *' ' to buffer
00001916                          1062  *----------------------------------------------------------- 
00001916                          1063  
00001916                          1064  ************************************************************
00001916                          1065  *HEX2ASCII
00001916                          1066  *Description: Converts bit to ASCII and send to buffer
00001916                          1067  ************************************************************            
00001916                          1068  HEX2ASCII:  
00001916  B63C 000A               1069              CMP.B       #$A, D3     *hex char?
0000191A  6C00 000A               1070              BGE         letter      *letter?
0000191E  0603 0030               1071  number      ADDI.B      #$30,D3     *convert to ASCII
00001922  6000 0006               1072              BRA         W2B         *
00001926  0603 0037               1073  letter      ADDI.B      #$37,D3     *
0000192A  14C3                    1074  W2B         MOVE.B      D3,(A2)+    *to buffer
0000192C  4E75                    1075  endH2A      RTS                     *return
0000192E                          1076  *===========================================================   
0000192E                          1077  
0000192E                          1078  ************************************************************
0000192E                          1079  *REG2BUFFER
0000192E                          1080  *Description: Finds the register size and sends it to the output buffer
0000192E                          1081  * 1001 0110 0100 0001
0000192E                          1082  *      ^-^--------->|
0000192E                          1083  *Registers Used:
0000192E                          1084  *D3 - size bit
0000192E                          1085  *D7 - copy of instruction
0000192E                          1086  *A2 - buffer address of decoded instruction          
0000192E                          1087  ************************************************************
0000192E                          1088  REG2BUFFER:
0000192E  3607                    1089              MOVE.W  D7,D3            *move to utility
00001930  E08B                    1090              LSR.L   #8,D3            *shift
00001932  E28B                    1091              LSR.L   #1,D3            *shift
00001934  0203 0007               1092              ANDI.B  #$7,D3           *isolate last 7 bits for register number
00001938  0603 0030               1093              ADD.B   #$30,D3          *convert register number to ascii
0000193C  14C3                    1094              MOVE.B  D3,(A2)+         *to buffer
0000193E  4E75                    1095  endR2B      RTS                      *return
00001940                          1096  *===========================================================
00001940                          1097  
00001940                          1098  ************************************************************
00001940                          1099  *SIZE2BUFFER
00001940                          1100  *Description: Isolates and converts the instruction size and sends it to the output buffer
00001940                          1101  *              Byte, word, long read word in memory for instructions that utilize immediate
00001940                          1102  *              data.  At the end of the instruction, the working memory address is advanced.
00001940                          1103  *Registers Used:
00001940                          1104  *D3 - size bit
00001940                          1105  *A2 - buffer address of decoded instruction
00001940                          1106  ************************************************************
00001940                          1107  SIZE2BUFFER:
00001940  4EB8 18AA               1108              JSR     GETSIZE         *get the size of bit
00001944  B63C 0000               1109              CMP.B   #%00, D3        *byte
00001948  6700 001E               1110              BEQ     s2bB            *
0000194C  B63C 0001               1111              CMP.B   #%01, D3        *word
00001950  6700 0020               1112              BEQ     s2bW            *
00001954  B63C 0002               1113              CMP.B   #%10, D3        *long
00001958  6700 0022               1114              BEQ     s2bL            *
0000195C  4EF9 00001A24           1115              JMP     BADINST         *bad instruction
00001962  4EF9 00001980           1116              JMP     ends2b          *
00001968                          1117              
00001968  14FC 0042               1118  s2bB        MOVE.B  #$42,(A2)+      *'B' to buffer
0000196C  4EF9 00001980           1119              JMP     ends2b          *
00001972  14FC 0057               1120  s2bW        MOVE.B  #$57,(A2)+      *'W' to buffer
00001976  4EF9 00001980           1121              JMP     ends2b          *
0000197C  14FC 004C               1122  s2bL        MOVE.B  #$4C,(A2)+      *'L' to buffer
00001980  4E75                    1123  ends2b      RTS                     *return
00001982                          1124  *===========================================================
00001982                          1125  
00001982                          1126  ************************************************************
00001982                          1127  *BYTE2BUFFER
00001982                          1128  *Description: Converts byte and sends it to the output buffer
00001982                          1129  *Buffer: $XX
00001982                          1130  ************************************************************
00001982                          1131  BYTE2BUFFER:  
00001982  14FC 0024               1132              MOVE.B  #$24, (A2)+     *'$' to buffer
00001986  4284                    1133              CLR.L       D4                  *clear counter
00001988                          1134              *ADDQ.W      #2, A0
00001988  3410                    1135              MOVE.W      (A0), D2
0000198A  183C 0002               1136              MOVE.B      #2, D4              *load counter
0000198E                          1137  **LOOP******************************************************
0000198E                          1138  B2BLoop                 
0000198E  B83C 0000               1139              CMP.B      #$0, D4            *end?
00001992  6700 0014               1140              BEQ         endB2B             *
00001996  E91A                    1141              ROL.B       #4, D2             *roll bits
00001998  3602                    1142              MOVE.W      D2, D3             *move to utility
0000199A  0243 000F               1143              ANDI.W      #$000F, D3          *isolate  
0000199E  4EB8 1916               1144              JSR         HEX2ASCII           *load ascii char into buffer            
000019A2  5304                    1145              SUBQ.B      #$1, D4             *subtract from counter
000019A4  4EF8 198E               1146              JMP         B2BLoop             *keep looping until counter hits zero
000019A8                          1147              
000019A8  3607                    1148  endB2B      MOVE.W      D7, D3              *load from utility            
000019AA  5448                    1149              ADDQ.W      #2, A0              *advancing memory pointer by word  
000019AC  4E75                    1150              RTS                             *return
000019AE                          1151  *===========================================================
000019AE                          1152  
000019AE                          1153  ************************************************************
000019AE                          1154  *WORD2BUFFER
000019AE                          1155  *Buffer: $XXXX
000019AE                          1156  ************************************************************
000019AE                          1157  WORD2BUFFER: 
000019AE  14FC 0024               1158              MOVE.B  #$24, (A2)+     *'$' to buffer
000019B2  4284                    1159              CLR.L   D4
000019B4                          1160              *ADDQ.W  #2, A0                  *clear counter
000019B4  3410                    1161              MOVE.W  (A0), D2            
000019B6  183C 0004               1162              MOVE.B  #4, D4              *load counter
000019BA                          1163  **LOOP******************************************************
000019BA                          1164  W2BLoop                 
000019BA  B83C 0000               1165              CMP.B       #$00, D4            *end?
000019BE  6700 0014               1166              BEQ         endW2B              *
000019C2  E95A                    1167              ROL.W       #4, D2              *roll the bits in D2 to the left
000019C4  3602                    1168              MOVE.W      D2, D3              *move rolled bits into temp storage
000019C6  0243 000F               1169              ANDI.W      #$000F, D3          *and the bits to isolate ascii char   
000019CA  4EB8 1916               1170              JSR         HEX2ASCII           *load ascii char into buffer            
000019CE  5304                    1171              SUBQ.B      #$1, D4             *subtract from counter
000019D0  4EF8 19BA               1172              JMP         W2BLoop             *keep looping until counter hits zero
000019D4                          1173         
000019D4  3607                    1174  endW2B      MOVE.W      D7, D3              *load from utility            
000019D6  5448                    1175              ADDQ.W      #2, A0              *advancing memory pointer by word   
000019D8  4E75                    1176              RTS                             *return
000019DA                          1177  *===========================================================
000019DA                          1178   
000019DA                          1179  ************************************************************
000019DA                          1180  *LONG2BUFFER
000019DA                          1181  *Buffer: $XXXXXXXX
000019DA                          1182  ************************************************************           
000019DA                          1183  LONG2BUFFER:
000019DA  14FC 0024               1184              MOVE.B  #$24, (A2)+     *'$' to buffer
000019DE  4284                    1185              CLR.L       D4                  *clear counter
000019E0                          1186              *ADDQ.W      #2, A0                  *clear counter
000019E0  2410                    1187              MOVE.L      (A0), D2 
000019E2  183C 0008               1188              MOVE.B      #8, D4              *load counter
000019E6                          1189  **LOOP******************************************************
000019E6                          1190  L2BLoop                 
000019E6  B83C 0000               1191              CMP.B       #$00, D4            *end?
000019EA  6700 0014               1192              BEQ         endL2B              *
000019EE  E99A                    1193              ROL.L       #4, D2              *
000019F0  3602                    1194              MOVE.W      D2, D3              *
000019F2  0243 000F               1195              ANDI.W      #$000F, D3          *isolate
000019F6  4EB8 1916               1196              JSR         HEX2ASCII           *to buffer           
000019FA  5304                    1197              SUBQ.B      #$1, D4             *subtract from counter
000019FC  4EF8 19E6               1198              JMP         L2BLoop             *loop
00001A00                          1199              
00001A00  3607                    1200  endL2B      MOVE.W      D7, D3              *load from utility           
00001A02  5848                    1201              ADDQ.W      #4, A0              *advancing memory pointer by word  
00001A04  4E75                    1202              RTS  
00001A06                          1203  *===========================================================
00001A06                          1204             
00001A06                          1205  ************************************************************
00001A06                          1206  *IMM2BUFER
00001A06                          1207  *Description: Converts immediate data and sends to buffer
00001A06                          1208  ************************************************************ 
00001A06                          1209  IMM2BUFER:
00001A06  14FC 0023               1210              MOVE.B  #$23, (A2)+     *'#' to buffer
00001A0A  4EB8 18DC               1211              JSR     srSize          *get bit size
00001A0E  0C03 0001               1212              CMPI.B  #%01, D3        *byte?
00001A12  6700 FF6E               1213              BEQ     BYTE2BUFFER     *
00001A16  0C03 0003               1214              CMPI.B  #%11, D3        *word?
00001A1A  6792                    1215              BEQ     WORD2BUFFER     *
00001A1C  0C03 0002               1216              CMPI.B  #%10, D3        *long?
00001A20  67B8                    1217              BEQ     LONG2BUFFER     *
00001A22  4E75                    1218  endI2B      RTS                     *return
00001A24                          1219  *===========================================================        
00001A24                          1220  
00001A24                          1221  ************************************************************
00001A24                          1222  *BADINST
00001A24                          1223  *Description: A bad instruction has been called, print to console
00001A24                          1224  *Registers Used:
00001A24                          1225  *D5 - flag condition
00001A24                          1226  *A2 - buffer address of decoded instruction
00001A24                          1227  *A2 - working address
00001A24                          1228  ************************************************************
00001A24                          1229  BADINST:
00001A24  1A3C 0000               1230              MOVE.B  #0, D5
00001A28  45F9 00009000           1231              LEA     buf, A2
00001A2E  4EB8 11DE               1232              JSR     ADDRESS
00001A32                          1233              
00001A32  14FC 0044               1234              MOVE.B  #$44,(A2)+      *'D' to buffer
00001A36  14FC 0041               1235              MOVE.B  #$41,(A2)+      *'A' to buffer
00001A3A  14FC 0054               1236              MOVE.B  #$54,(A2)+      *'T' to buffer
00001A3E  14FC 0041               1237              MOVE.B  #$41,(A2)+      *'A' to buffer
00001A42  14FC 0009               1238              MOVE.B  #$9, (A2)+        *tab buffer
00001A46  14FC 0024               1239              MOVE.B  #$24,(A2)+      *'$' to buffer
00001A4A                          1240              
00001A4A  3610                    1241              MOVE.W  (A0), D3
00001A4C  183C 000C               1242              MOVE.B  #12, D4
00001A50  4EB8 190E               1243              JSR     SHIFT
00001A54  4EB8 1916               1244              JSR     Hex2ASCII
00001A58  3610                    1245              MOVE.W  (A0), D3
00001A5A  183C 0008               1246              MOVE.B  #8, D4
00001A5E  4EB8 190E               1247              JSR     SHIFT
00001A62  4EB8 1916               1248              JSR     Hex2ASCII
00001A66  3610                    1249              MOVE.W  (A0), D3
00001A68  183C 0004               1250              MOVE.B  #4, D4
00001A6C  4EB8 190E               1251              JSR     SHIFT
00001A70  4EB8 1916               1252              JSR     Hex2ASCII
00001A74  3610                    1253              MOVE.W  (A0), D3
00001A76  0243 000F               1254              ANDI.W  #$000F, D3
00001A7A  4EB8 1916               1255              JSR     Hex2ASCII
00001A7E  4E75                    1256  endbadinst  RTS
00001A80                          1257  *===========================================================    
00001A80                          1258  
00001A80                          1259  ************************************************************
00001A80                          1260  *  _____ _   _ ____      ____ ___ __  __ 
00001A80                          1261  * | ____| \ | |  _ \    / ___|_ _|  \/  |
00001A80                          1262  * |  _| |  \| | | | |   \___ \| || |\/| |
00001A80                          1263  * | |___| |\  | |_| |    ___) | || |  | |
00001A80                          1264  * |_____|_| \_|____/    |____/___|_|  |_|
00001A80                          1265  *                                       
00001A80                          1266  *END
00001A80                          1267  *Description: Ends program
00001A80                          1268  ************************************************************          
00001A80  103C 000D               1269  END:        MOVE.B  #13,D0              *load task
00001A84  43F9 00002161           1270              LEA     str_end,A1            *load string
00001A8A  4E4F                    1271              TRAP    #15                 *display
00001A8C                          1272  
00001A8C                          1273             
00001A8C  FFFF FFFF               1274              SIMHALT              
00001A90                          1275  *===========================================================
00001A90                          1276           
00001A90                          1277  *-----------------------------------------------------------
00001A90                          1278  *variables
00001A90                          1279  *-----------------------------------------------------------
00001A90= 20 20 20 20 20 20 ...   1280  intro       dc.b '          66666666        888888888     KKKKKKKKK    KKKKKKK',CR,LF 
00001ACE= 20 20 20 20 20 20 ...   1281              dc.b '         6::::::6       88:::::::::88   K:::::::K    K:::::K',CR,LF
00001B0C= 20 20 20 20 20 20 ...   1282              dc.b '        6::::::6      88:::::::::::::88 K:::::::K    K:::::K',CR,LF
00001B4A= 20 20 20 20 20 20 ...   1283              dc.b '       6::::::6      8::::::88888::::::8K:::::::K   K::::::K',CR,LF
00001B88= 20 20 20 20 20 20 ...   1284              dc.b '      6::::::6       8:::::8     8:::::8KK::::::K  K:::::KKK',CR,LF
00001BC6= 20 20 20 20 20 36 ...   1285              dc.b '     6::::::6        8:::::8     8:::::8  K:::::K K:::::K   ',CR,LF
00001C04= 20 20 20 20 36 3A ...   1286              dc.b '    6::::::6          8:::::88888:::::8   K::::::K:::::K    ',CR,LF
00001C42= 20 20 20 36 3A 3A ...   1287              dc.b '   6::::::::66666      8:::::::::::::8    K:::::::::::K     ',CR,LF
00001C80= 20 20 36 3A 3A 3A ...   1288              dc.b '  6::::::::::::::66   8:::::88888:::::8   K:::::::::::K     ',CR,LF
00001CBE= 20 20 36 3A 3A 3A ...   1289              dc.b '  6::::::66666:::::6 8:::::8     8:::::8  K::::::K:::::K    ',CR,LF
00001CFC= 20 20 36 3A 3A 3A ...   1290              dc.b '  6:::::6     6:::::68:::::8     8:::::8  K:::::K K:::::K   ',CR,LF    
00001D3A= 20 20 36 3A 3A 3A ...   1291              dc.b '  6:::::6     6:::::68:::::8     8:::::8KK::::::K  K:::::KKK',CR,LF     
00001D78= 20 20 36 3A 3A 3A ...   1292              dc.b '  6::::::66666::::::68::::::88888::::::8K:::::::K   K::::::K',CR,LF     
00001DB6= 20 20 20 36 36 3A ...   1293              dc.b '   66:::::::::::::66  88:::::::::::::88 K:::::::K    K:::::K',CR,LF
00001DF4= 20 20 20 20 20 36 ...   1294              dc.b '     66:::::::::66      88:::::::::88   K:::::::K    K:::::K',CR,LF
00001E32= 20 20 20 20 20 20 ...   1295              dc.b '       666666666          888888888     KKKKKKKKK    KKKKKKK',CR,LF
00001E70= 20 20 20 20 20 20 ...   1296              dc.b '                                                            ',CR,LF  
00001EAE= 20 20 20 20 20 20 ...   1297              dc.b '                                                            ',CR,LF  
00001EEC= 20 20 20 20 5F 5F ...   1298              dc.b '    ____  _                                __    __         ',CR,LF
00001F2A= 20 20 20 2F 20 5F ...   1299              dc.b '   / __ \(_)________ _________  ____ ___  / /_  / /__  _____',CR,LF
00001F68= 20 20 2F 20 2F 20 ...   1300              dc.b '  / / / / / ___/ __ `/ ___/ _ \/ __ `__ \/ __ \/ / _ \/ ___/',CR,LF
00001FA6= 20 2F 20 2F 5F 2F ...   1301              dc.b ' / /_/ / (__  ) /_/ (__  )  __/ / / / / / /_/ / /  __/ /    ',CR,LF
00001FE4= 2F 5F 5F 5F 5F 5F ...   1302              dc.b '/_____/_/____/\__,_/____/\___/_/ /_/ /_/_.___/_/\___/_/     ',CR,LF
00002022= 20 20 20 20 20 20 ...   1303              dc.b '                                                            ',CR,LF  
00002060= 20 20 20 20 20 20 ...   1304              dc.b '                                                            ',0,CR,LF 
0000209F                          1305              
000020A0= 0610                    1306  i_length    dc.w    i_length-intro
000020A2                          1307  
000020A2= 45 6E 74 65 72 20 ...   1308  srt_addr    dc.b    'Enter starting address: $',0
000020BC= 001A                    1309  s_len       dc.w    s_len-srt_addr
000020BE                          1310  
000020BE= 45 6E 74 65 72 20 ...   1311  end_addr    dc.b    'Enter ending address: $',0
000020D6= 0018                    1312  e_len       dc.w    e_len-end_addr
000020D8                          1313  
000020D8= 54 68 65 20 73 74 ...   1314  t_str_start dc.b    'The start address is: $',0
000020F0= 0018                    1315  t_start     dc.w    t_start-t_str_start
000020F2                          1316  
000020F2= 54 68 65 20 65 6E ...   1317  t_str_end   dc.b    'The end address is: $',0
00002108= 0016                    1318  t_end       dc.w    t_end-t_str_end
0000210A                          1319  
0000210A= 45 72 72 6F 72 3A ...   1320  str_error   dc.b    'Error: starting or ending address has error',0
00002136= 002C                    1321  err_len     dc.w    err_len-str_error 
00002138                          1322  
00002138= 50 72 65 73 73 20 ...   1323  str_cont    dc.b    'Press enter to continue.',0
00002152= 001A                    1324  cont_len    dc.w    cont_len-str_cont
00002154                          1325  
00002154= 00                      1326  str_cr      dc.b    '',0
00002156= 0002                    1327  cr_len      dc.w    cr_len-str_cr
00002158                          1328  
00002158                          1329  
00002158= 01                      1330  bufferend   dc.b    1
00002159                          1331  print_stack ds.b    8
00002161                          1332  
00002161= 20 20 20 20 20 20 ...   1333  str_end     dc.b '                                                                                   ',CR,LF  
000021B6= 20 20 20 20 20 20 ...   1334              dc.b '                                                                                   ',CR,LF 
0000220B= 20 20 20 20 20 20 ...   1335              dc.b '                                                                                   ',CR,LF 
00002260= 20 20 20 20 20 20 ...   1336              dc.b '                                                                                   ',CR,LF 
000022B5= 20 20 2F 24 24 24 ...   1337              dc.b '  /$$$$$$   /$$$$$$  /$$      /$$ /$$$$$$$  /$$       /$$$$$$$$ /$$$$$$$$ /$$$$$$$$',CR,LF
0000230A= 20 2F 24 24 5F 5F ...   1338              dc.b ' /$$__  $$ /$$__  $$| $$$    /$$$| $$__  $$| $$      | $$_____/|__  $$__/| $$_____/',CR,LF
0000235F= 7C 20 24 24 20 20 ...   1339              dc.b '| $$  \__/| $$  \ $$| $$$$  /$$$$| $$  \ $$| $$      | $$         | $$   | $$      ',CR,LF
000023B4= 7C 20 24 24 20 20 ...   1340              dc.b '| $$      | $$  | $$| $$ $$/$$ $$| $$$$$$$/| $$      | $$$$$      | $$   | $$$$$   ',CR,LF
00002409= 7C 20 24 24 20 20 ...   1341              dc.b '| $$      | $$  | $$| $$  $$$| $$| $$____/ | $$      | $$__/      | $$   | $$__/   ',CR,LF
0000245E= 7C 20 24 24 20 20 ...   1342              dc.b '| $$    $$| $$  | $$| $$\  $ | $$| $$      | $$      | $$         | $$   | $$      ',CR,LF
000024B3= 7C 20 20 24 24 24 ...   1343              dc.b '|  $$$$$$/|  $$$$$$/| $$ \/  | $$| $$      | $$$$$$$$| $$$$$$$$   | $$   | $$$$$$$$',CR,LF
00002508= 20 5C 5F 5F 5F 5F ...   1344              dc.b ' \______/  \______/ |__/     |__/|__/      |________/|________/   |__/   |________/',0,CR,LF
0000255E                          1345  
0000255E                          1346  
0000255E= 4241 4420 494E 5...     1347  bad_inst    dc.w    'BAD INSTRUCTION',0
00002570                          1348  
00002570                          1349  *v_srt_add   ds.l    1               *store start address
00002570                          1350  *v_end_add   ds.l    1               *store end address
00002570                          1351  *v_test      ds.l    1               *start a temp value
00002570                          1352  
00002570                          1353  
00002570                          1354      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDRESS             11DE
ADDRFILL            11FE
ADDRLOOP            1204
ASCII2HEX           111C
B2BLOOP             198E
BADFLAG             0
BADINST             1A24
BAD_INST            255E
BUF                 9000
BUFFEREND           2158
BYTE2BUFFER         1982
CLEAR               10A6
CODE0100L1_TABLE    1428
CONT_LEN            2152
CR                  D
CR_LEN              2156
DECODE              11B8
DIS_BADINPUT        1058
DIS_CONT            1086
DIS_CR              1072
DIS_INTRO_MSG       1044
EACODE000           17F4
EACODE001           1806
EACODE010           1818
EACODE011           1832
EACODE100           1850
EACODE101           186E
EACODE110           1874
EACODE111           187A
EA_TABLE            17C4
END                 1A80
ENDA2H              11AC
ENDADDR             1222
ENDB2B              19A8
ENDBADINST          1A7E
ENDBF               1224
ENDBI               106E
ENDCLEAR            10B6
ENDDC               10A4
ENDDECODE           11DC
ENDEA000            1804
ENDEA001            1816
ENDEA010            1830
ENDEA011            184E
ENDEA100            186C
ENDEA111            18A0
ENDGD               18BC
ENDGOP              123E
ENDGS               18B2
ENDH2A              192C
ENDI2B              1A22
ENDINPUT            111A
ENDINTRO            1056
ENDL2B              1A00
ENDOP0000           12A6
ENDOP0001           12E6
ENDOP0010           12EE
ENDOP0100           147E
ENDOP01001110       1426
ENDOP0101           1486
ENDOP0110           148E
ENDOP0111           1496
ENDOP1000           1504
ENDOP1001           15AE
ENDOP1010           15B6
ENDOP1011           1652
ENDOP1100           16DE
ENDOP1101           1794
ENDOP111            17A4
ENDOP1110           179C
ENDOPCLR            133E
ENDOPJMP            1398
ENDOPJSR            1380
ENDOPLEA            1368
ENDOPMOVEM          1428
ENDOPNEG            13BE
ENDOPNOP            13F2
ENDOPNOT            13E4
ENDOPRTS            1400
ENDR2B              193E
ENDRB               18A8
ENDS2B              1980
ENDSHFIT            1914
ENDSR               190C
ENDSWAP             18DA
ENDW2B              19D4
END_ADDR            20BE
END_CR              1084
ERROR               118A
ERR_LEN             2136
E_LEN               20D6
GETDIRECTION        18B4
GETEA               17A6
GETOPCODE           1226
GETREGISTER         18A2
GETSIZE             18AA
GOODFLAG            1
HEX2ASCII           1916
IMM2BUFER           1A06
INTRO               1A90
I_LENGTH            20A0
L2BLOOP             19E6
LENGTH              0
LETTER              1926
LF                  A
LONG2BUFFER         19DA
LOOP                112C
LOWER2HEX           117E
MAIN                1004
MAIN_CONT           1036
MAIN_END            1040
MAIN_INPUT          1016
MAIN_LOOP           1022
MAXADD              FFFFFF
MINADD              0
NUM2HEX             1166
NUMBER              191E
OP01001110          1402
OPADD               1746
OPADD01             1780
OPADDA              1720
OPADDL              171C
OPAND01             16CA
OPCLR               131A
OPCMP               1604
OPCMPA              15C6
OPCODE0000          12A0
OPCODE0001          12A8
OPCODE0010          12E8
OPCODE0011          12F0
OPCODE0100          12F0
OPCODE0101          1480
OPCODE0110          1488
OPCODE0111          1490
OPCODE1000          1498
OPCODE1001          1506
OPCODE1010          15B0
OPCODE1011          15B8
OPCODE1100          1654
OPCODE1101          16E0
OPCODE1110          1796
OPCODE1111          179E
OPEOR               164C
OPJMP               1382
OPJSR               136A
OPLEA               1340
OPMOVEM             1428
OPNEG               139A
OPNOP               13E6
OPNOT               13C0
OPOR                14AE
OPOR01              14F0
OPRTS               13F4
OPSUBL              153E
OPSUBSUB            1564
OPSUBSUBA           1542
OPSUBSUBR           159A
OP_TABLE            1240
PRINTCOUNT          A
PRINT_B             11CE
PRINT_STACK         2159
REG2BUFFER          192E
RESUME              1194
S2BB                1968
S2BL                197C
S2BW                1972
SHIFT               190E
SIZE2BUFFER         1940
SRL                 1908
SRSIZE              18DC
SRT_ADDR            20A2
SRW                 18FE
STACK               A000
START               1000
STR_CONT            2138
STR_CR              2154
STR_END             2161
STR_ERROR           210A
SWAPREG             18BE
S_LEN               20BC
TASK0               0
TASK1               1
TASK13              D
TASK14              E
TASK2               2
TASK3               3
T_END               2108
T_START             20F0
T_STR_END           20F2
T_STR_START         20D8
UPPER2HEX           1172
U_INPUT             10B8
W2B                 192A
W2BLOOP             19BA
WORD2BUFFER         19AE
