00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 05/16/20 4:38:44 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Scott Shirley
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7   
00000000                             8  * Variables and EQUs
00000000  =00001000                  9  start       EQU     $1000               *start address
00000000  =0000A000                 10  stack       EQU     $A000               *stack address   
00000000  =0000000D                 11  CR          EQU     $0D                 *carriage return
00000000  =0000000A                 12  LF          EQU     $0A                 *line feed
00000000  =00000000                 13  length      EQU     0
00000000  =00000001                 14  task1       EQU     01                  *
00000000  =00000002                 15  task2       EQU     02                  *
00000000                            16  
00000000                            17  *-----------------------------------------------------------
00000000                            18  *beging program
00000000                            19  *-----------------------------------------------------------
00001000                            20              ORG     start
00001000  6100 0016                 21              BSR     intro_msg           *print intro message
00001004  6100 0026                 22  main        BSR     CLEAR               *clear all registers
00001008  4FF9 0000A000             23              LEA     stack, SP           *load stack pointer
0000100E  45F9 00001186             24              LEA     buffer, A2          *set buffer for input
00001014                            25              
00001014  6100 0028                 26              BSR     U_INPUT
00001018                            27  
00001018                            28  *-----------------------------------------------------------
00001018                            29  *subroutines
00001018                            30  *-----------------------------------------------------------
00001018                            31  intro_msg
00001018  103C 000D                 32              MOVE.B  #13,D0
0000101C  43F9 00001136             33              LEA     intro,A1
00001022  3239 0000114E             34              MOVE.W  i_length,D1
00001028  4E4F                      35              TRAP    #15
0000102A  4E75                      36  endIntro    RTS
0000102C                            37              
0000102C                            38  CLEAR:
0000102C  4240                      39              CLR     D0
0000102E  4241                      40              CLR     D1
00001030  4242                      41              CLR     D2
00001032  4243                      42              CLR     D3
00001034  4244                      43              CLR     D4
00001036  4245                      44              CLR     D5
00001038  4246                      45              CLR     D6
0000103A  4247                      46              CLR     D7
0000103C  4E75                      47  endClear    RTS
0000103E                            48  
0000103E                            49  ************************************************************
0000103E                            50  *address input
0000103E                            51  ************************************************************
0000103E                            52  U_INPUT:
0000103E  103C 0001                 53              MOVE.B  #task1,D0
00001042  43F9 00001150             54              LEA     srt_addr,A1
00001048  3239 0000116A             55              MOVE.W  s_len,D1         
0000104E  4E4F                      56              TRAP    #15
00001050  D3FC 0000116A             57              ADDA.L  #s_len,A1
00001056  103C 0002                 58              MOVE.B  #task2,D0      
0000105A  4E4F                      59              TRAP    #15
0000105C  4EB9 000010A0             60              JSR     ASCII2HEX
00001062  BA3C 0000                 61              CMP.B   #$00,D5
00001066  6700 0036                 62              BEQ     endInput
0000106A                            63              
0000106A  2848                      64              MOVEA.L A0,A4         
0000106C  103C 0001                 65              MOVE.B  #task1,D0
00001070  43F9 0000116C             66              LEA     end_addr,A1
00001076  3239 00001184             67              MOVE.W  e_len,D1         
0000107C  4E4F                      68              TRAP    #15         
0000107E  D3FC 00001184             69              ADDA.L  #e_len,A1
00001084  103C 0002                 70              MOVE.B  #task2,D0
00001088  4E4F                      71              TRAP    #15
0000108A  4EB9 000010A0             72              JSR     ASCII2HEX
00001090  BA3C 0000                 73              CMP.B   #$00,D5
00001094  6700 0008                 74              BEQ     endInput
00001098                            75              
00001098                            76             
00001098                            77             **********swap************
00001098  264C                      78              MOVEA.L A4,A3               *store starting into register
0000109A  2848                      79              MOVEA.L A0,A4               *copy ending to A4
0000109C  204B                      80              MOVEA.L A3,A0               *store starting in A0                    
0000109E  4E75                      81  endInput    RTS
000010A0                            82  
000010A0                            83  ************************************************************
000010A0                            84  *ascii2hex - see flowchart for logic
000010A0                            85  ************************************************************
000010A0                            86  ASCII2HEX:
000010A0  48E7 F800                 87              MOVEM.L D0-D4,-(SP)         * save data registers to the stack
000010A4  4EB8 102C                 88              JSR     CLEAR
000010A8  3C3C 0000                 89              MOVE    #length,D6
000010AC                            90  
000010AC                            91  loop
000010AC  1619                      92              MOVE.B  (A1)+,D3            *
000010AE  B63C 0030                 93              CMP.B   #$30,D3             *byte < 30??
000010B2  6D00 0056                 94              BLT     error               *
000010B6                            95              
000010B6  B63C 003A                 96              CMP.B   #$3A,D3             *byte < 3A??
000010BA  6D00 002A                 97              BLT     num2hex             *
000010BE                            98              
000010BE  B63C 0041                 99              CMP.B   #$41,D3             *byte < 41??
000010C2  6D00 0046                100              BLT     error               *
000010C6                           101              
000010C6  B63C 0047                102              CMP.B   #$47,D3             *byte < 47?
000010CA  6D00 0026                103              BLT     upper2hex           *
000010CE                           104              
000010CE  B63C 0061                105              CMP.B   #$61,D3             *byte < 61??
000010D2  6D00 0036                106              BLT     error               *
000010D6                           107              
000010D6  B63C 0067                108              CMP.B   #$67,D3             *byte < 67??
000010DA  6D00 0022                109              BLT     lower2hex           *
000010DE                           110              
000010DE  B63C 0066                111              CMP.B   #$66,D3             *byte > 66??
000010E2  6E00 0026                112              BGT     error               *
000010E6                           113  
000010E6                           114  num2hex
000010E6  0403 0030                115              SUBI.B  #$30,D3             *subracthex value of 0 to get correct value of input
000010EA  D803                     116              ADD.B   D3,D4               *
000010EC  4EF9 00001110            117              JMP     resume              *return to top
000010F2                           118              
000010F2                           119  upper2hex
000010F2  0403 0037                120              SUBI.B  #$37,D3             *subracthex value of A to get correct value of input
000010F6  D803                     121              ADD.B   D3,D4               *
000010F8  4EF9 00001110            122              JMP     resume              *return to top
000010FE                           123              
000010FE                           124  lower2hex
000010FE  0403 0057                125              SUBI.B  #$57,D3             *subracthex value of a to get correct value of input
00001102  D803                     126              ADD.B   D3,D4               *
00001104  4EF9 00001110            127              JMP     resume              *return to top
0000110A                           128  error
0000110A  4EF9 00001110            129              JMP     resume              *return to top
00001110                           130  resume
00001110  5246                     131              ADD     #1,D6               *increment length counter
00001112  BC7C 0006                132              CMP     #6,D6               *check if done
00001116  6700 0010                133              BEQ     endA2H              *
0000111A  0C11 0000                134              CMP.B   #$00,(A1)           *end of string??
0000111E  6700 0008                135              BEQ     endA2H              *
00001122  E984                     136              ASL.L   #4,D4               *shiftleft by 4 bits to get next value            
00001124  4EF8 10AC                137              JMP     loop                *return to top
00001128                           138  
00001128                           139  endA2H
00001128  2044                     140              MOVE.L  D4,A0               *
0000112A  4246                     141              CLR     D6                  *clear counter
0000112C  4CDF 001F                142              MOVEM.L (SP)+,D0-D4         *load data registers from stack      
00001130  4E75                     143              RTS                         *
00001132                           144  
00001132  FFFF FFFF                145      SIMHALT             ; halt simulator
00001136                           146  
00001136                           147  
00001136                           148  *-----------------------------------------------------------
00001136                           149  *variables
00001136                           150  *-----------------------------------------------------------
00001136= 45 61 73 79 36 38 ...    151  intro       dc.b    'Easy68k Disassembler',0,CR,LF
0000114E= 0018                     152  i_length    dc.w    i_length-intro
00001150                           153  
00001150= 45 6E 74 65 72 20 ...    154  srt_addr    dc.b    'Enter starting address: $',0
0000116A= 001A                     155  s_len       dc.w    s_len-srt_addr
0000116C                           156  
0000116C= 45 6E 74 65 72 20 ...    157  end_addr    dc.b    'Enter ending address: $',0
00001184= 0018                     158  e_len       dc.w    e_len-end_addr
00001186                           159  
00001186= 01                       160  buffer      dc.b    1
00001187                           161  
00001187                           162      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII2HEX           10A0
BUFFER              1186
CLEAR               102C
CR                  D
ENDA2H              1128
ENDCLEAR            103C
ENDINPUT            109E
ENDINTRO            102A
END_ADDR            116C
ERROR               110A
E_LEN               1184
INTRO               1136
INTRO_MSG           1018
I_LENGTH            114E
LENGTH              0
LF                  A
LOOP                10AC
LOWER2HEX           10FE
MAIN                1004
NUM2HEX             10E6
RESUME              1110
SRT_ADDR            1150
STACK               A000
START               1000
S_LEN               116A
TASK1               1
TASK2               2
UPPER2HEX           10F2
U_INPUT             103E
